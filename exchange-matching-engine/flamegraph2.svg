<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="2006" onload="init(evt)" viewBox="0 0 1200 2006" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="2006" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1989.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1989.00"> </text><svg id="frames" x="10" width="1180" total_samples="3459"><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_bool (1 samples, 0.03%)</title><rect x="0.0000%" y="1925" width="0.0289%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1935.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.03%)</title><rect x="0.0289%" y="1925" width="0.0289%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2789%" y="1935.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.06%)</title><rect x="0.0578%" y="1925" width="0.0578%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="2"/><text x="0.3078%" y="1935.50"></text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (1 samples, 0.03%)</title><rect x="0.1156%" y="1925" width="0.0289%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="0.3656%" y="1935.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.06%)</title><rect x="0.1446%" y="1925" width="0.0578%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="2"/><text x="0.3946%" y="1935.50"></text></g><g><title>&lt;exchange_lib::commands::_::&lt;impl serde::de::Deserialize for exchange_lib::commands::TradeCommand&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (2 samples, 0.06%)</title><rect x="0.2024%" y="1925" width="0.0578%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="2"/><text x="0.4524%" y="1935.50"></text></g><g><title>&lt;redis::connection::Connection as redis::connection::ConnectionLike&gt;::check_connection (3 samples, 0.09%)</title><rect x="0.2602%" y="1925" width="0.0867%" height="15" fill="rgb(207,160,47)" fg:x="9" fg:w="3"/><text x="0.5102%" y="1935.50"></text></g><g><title>redis::cmd::Cmd::query (3 samples, 0.09%)</title><rect x="0.2602%" y="1909" width="0.0867%" height="15" fill="rgb(228,23,34)" fg:x="9" fg:w="3"/><text x="0.5102%" y="1919.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (3 samples, 0.09%)</title><rect x="0.2602%" y="1893" width="0.0867%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="3"/><text x="0.5102%" y="1903.50"></text></g><g><title>&lt;redis::parser::ResultExtend&lt;T,E&gt; as core::iter::traits::collect::Extend&lt;core::result::Result&lt;U,E&gt;&gt;&gt;::extend (5 samples, 0.14%)</title><rect x="0.3469%" y="1925" width="0.1446%" height="15" fill="rgb(220,122,19)" fg:x="12" fg:w="5"/><text x="0.5969%" y="1935.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (6 samples, 0.17%)</title><rect x="0.4915%" y="1925" width="0.1735%" height="15" fill="rgb(250,228,42)" fg:x="17" fg:w="6"/><text x="0.7415%" y="1935.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.03%)</title><rect x="0.6649%" y="1909" width="0.0289%" height="15" fill="rgb(240,193,28)" fg:x="23" fg:w="1"/><text x="0.9149%" y="1919.50"></text></g><g><title>&lt;alloc::string::String as redis::types::FromRedisValue&gt;::from_redis_value (1 samples, 0.03%)</title><rect x="0.6938%" y="1909" width="0.0289%" height="15" fill="rgb(216,20,37)" fg:x="24" fg:w="1"/><text x="0.9438%" y="1919.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.09%)</title><rect x="0.7228%" y="1909" width="0.0867%" height="15" fill="rgb(206,188,39)" fg:x="25" fg:w="3"/><text x="0.9728%" y="1919.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as redis::types::FromRedisValue&gt;::from_redis_value (1 samples, 0.03%)</title><rect x="0.8095%" y="1909" width="0.0289%" height="15" fill="rgb(217,207,13)" fg:x="28" fg:w="1"/><text x="1.0595%" y="1919.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="0.8384%" y="1909" width="0.0289%" height="15" fill="rgb(231,73,38)" fg:x="29" fg:w="1"/><text x="1.0884%" y="1919.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.03%)</title><rect x="1.0119%" y="1893" width="0.0289%" height="15" fill="rgb(225,20,46)" fg:x="35" fg:w="1"/><text x="1.2619%" y="1903.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (1 samples, 0.03%)</title><rect x="1.0119%" y="1877" width="0.0289%" height="15" fill="rgb(210,31,41)" fg:x="35" fg:w="1"/><text x="1.2619%" y="1887.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (13 samples, 0.38%)</title><rect x="0.8673%" y="1909" width="0.3758%" height="15" fill="rgb(221,200,47)" fg:x="30" fg:w="13"/><text x="1.1173%" y="1919.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (7 samples, 0.20%)</title><rect x="1.0408%" y="1893" width="0.2024%" height="15" fill="rgb(226,26,5)" fg:x="36" fg:w="7"/><text x="1.2908%" y="1903.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_first (1 samples, 0.03%)</title><rect x="1.2431%" y="1909" width="0.0289%" height="15" fill="rgb(249,33,26)" fg:x="43" fg:w="1"/><text x="1.4931%" y="1919.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (7 samples, 0.20%)</title><rect x="1.2720%" y="1909" width="0.2024%" height="15" fill="rgb(235,183,28)" fg:x="44" fg:w="7"/><text x="1.5220%" y="1919.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (1 samples, 0.03%)</title><rect x="1.4455%" y="1893" width="0.0289%" height="15" fill="rgb(221,5,38)" fg:x="50" fg:w="1"/><text x="1.6955%" y="1903.50"></text></g><g><title>&lt;dyn core::any::Any+core::marker::Send+core::marker::Sync&gt;::downcast_mut (1 samples, 0.03%)</title><rect x="1.4455%" y="1877" width="0.0289%" height="15" fill="rgb(247,18,42)" fg:x="50" fg:w="1"/><text x="1.6955%" y="1887.50"></text></g><g><title>&lt;dyn core::any::Any&gt;::downcast_mut (1 samples, 0.03%)</title><rect x="1.4455%" y="1861" width="0.0289%" height="15" fill="rgb(241,131,45)" fg:x="50" fg:w="1"/><text x="1.6955%" y="1871.50"></text></g><g><title>&lt;dyn core::any::Any&gt;::is (1 samples, 0.03%)</title><rect x="1.4455%" y="1845" width="0.0289%" height="15" fill="rgb(249,31,29)" fg:x="50" fg:w="1"/><text x="1.6955%" y="1855.50"></text></g><g><title>&lt;combine::parser::range::Recognize&lt;Input,P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (1 samples, 0.03%)</title><rect x="1.4744%" y="1909" width="0.0289%" height="15" fill="rgb(225,111,53)" fg:x="51" fg:w="1"/><text x="1.7244%" y="1919.50"></text></g><g><title>combine::parser::Parser::parse_committed_mode (1 samples, 0.03%)</title><rect x="1.6479%" y="1893" width="0.0289%" height="15" fill="rgb(238,160,17)" fg:x="57" fg:w="1"/><text x="1.8979%" y="1903.50"></text></g><g><title>&lt;combine::parser::sequence::ThenPartial&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (7 samples, 0.20%)</title><rect x="1.5033%" y="1909" width="0.2024%" height="15" fill="rgb(214,148,48)" fg:x="52" fg:w="7"/><text x="1.7533%" y="1919.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.03%)</title><rect x="1.6768%" y="1893" width="0.0289%" height="15" fill="rgb(232,36,49)" fg:x="58" fg:w="1"/><text x="1.9268%" y="1903.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (1 samples, 0.03%)</title><rect x="1.6768%" y="1877" width="0.0289%" height="15" fill="rgb(209,103,24)" fg:x="58" fg:w="1"/><text x="1.9268%" y="1887.50"></text></g><g><title>&lt;redis::cmd::Cmd as redis::types::RedisWrite&gt;::write_arg (1 samples, 0.03%)</title><rect x="1.7057%" y="1909" width="0.0289%" height="15" fill="rgb(229,88,8)" fg:x="59" fg:w="1"/><text x="1.9557%" y="1919.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.03%)</title><rect x="1.7346%" y="1909" width="0.0289%" height="15" fill="rgb(213,181,19)" fg:x="60" fg:w="1"/><text x="1.9846%" y="1919.50"></text></g><g><title>[exchange-matching-engine] (1 samples, 0.03%)</title><rect x="1.7635%" y="1909" width="0.0289%" height="15" fill="rgb(254,191,54)" fg:x="61" fg:w="1"/><text x="2.0135%" y="1919.50"></text></g><g><title>&lt;redis::types::Value as redis::types::FromRedisValue&gt;::from_redis_value (1 samples, 0.03%)</title><rect x="1.7635%" y="1893" width="0.0289%" height="15" fill="rgb(241,83,37)" fg:x="61" fg:w="1"/><text x="2.0135%" y="1903.50"></text></g><g><title>&lt;redis::types::Value as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="1.7635%" y="1877" width="0.0289%" height="15" fill="rgb(233,36,39)" fg:x="61" fg:w="1"/><text x="2.0135%" y="1887.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="1.7635%" y="1861" width="0.0289%" height="15" fill="rgb(226,3,54)" fg:x="61" fg:w="1"/><text x="2.0135%" y="1871.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.03%)</title><rect x="1.7635%" y="1845" width="0.0289%" height="15" fill="rgb(245,192,40)" fg:x="61" fg:w="1"/><text x="2.0135%" y="1855.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.03%)</title><rect x="1.7635%" y="1829" width="0.0289%" height="15" fill="rgb(238,167,29)" fg:x="61" fg:w="1"/><text x="2.0135%" y="1839.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.03%)</title><rect x="1.7635%" y="1813" width="0.0289%" height="15" fill="rgb(232,182,51)" fg:x="61" fg:w="1"/><text x="2.0135%" y="1823.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.03%)</title><rect x="1.7635%" y="1797" width="0.0289%" height="15" fill="rgb(231,60,39)" fg:x="61" fg:w="1"/><text x="2.0135%" y="1807.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="1.7635%" y="1781" width="0.0289%" height="15" fill="rgb(208,69,12)" fg:x="61" fg:w="1"/><text x="2.0135%" y="1791.50"></text></g><g><title>[libc.so.6] (11 samples, 0.32%)</title><rect x="1.7924%" y="1909" width="0.3180%" height="15" fill="rgb(235,93,37)" fg:x="62" fg:w="11"/><text x="2.0424%" y="1919.50"></text></g><g><title>alloc::fmt::format::format_inner (5 samples, 0.14%)</title><rect x="2.1104%" y="1909" width="0.1446%" height="15" fill="rgb(213,116,39)" fg:x="73" fg:w="5"/><text x="2.3604%" y="1919.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.09%)</title><rect x="2.1683%" y="1893" width="0.0867%" height="15" fill="rgb(222,207,29)" fg:x="75" fg:w="3"/><text x="2.4183%" y="1903.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.06%)</title><rect x="2.2550%" y="1909" width="0.0578%" height="15" fill="rgb(206,96,30)" fg:x="78" fg:w="2"/><text x="2.5050%" y="1919.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.06%)</title><rect x="2.2550%" y="1893" width="0.0578%" height="15" fill="rgb(218,138,4)" fg:x="78" fg:w="2"/><text x="2.5050%" y="1903.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.03%)</title><rect x="2.2839%" y="1877" width="0.0289%" height="15" fill="rgb(250,191,14)" fg:x="79" fg:w="1"/><text x="2.5339%" y="1887.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.03%)</title><rect x="2.2839%" y="1861" width="0.0289%" height="15" fill="rgb(239,60,40)" fg:x="79" fg:w="1"/><text x="2.5339%" y="1871.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="2.3128%" y="1909" width="0.0289%" height="15" fill="rgb(206,27,48)" fg:x="80" fg:w="1"/><text x="2.5628%" y="1919.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (1 samples, 0.03%)</title><rect x="2.3417%" y="1909" width="0.0289%" height="15" fill="rgb(225,35,8)" fg:x="81" fg:w="1"/><text x="2.5917%" y="1919.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (1 samples, 0.03%)</title><rect x="2.3706%" y="1909" width="0.0289%" height="15" fill="rgb(250,213,24)" fg:x="82" fg:w="1"/><text x="2.6206%" y="1919.50"></text></g><g><title>cfree (3 samples, 0.09%)</title><rect x="2.3995%" y="1909" width="0.0867%" height="15" fill="rgb(247,123,22)" fg:x="83" fg:w="3"/><text x="2.6495%" y="1919.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (1 samples, 0.03%)</title><rect x="2.4863%" y="1909" width="0.0289%" height="15" fill="rgb(231,138,38)" fg:x="86" fg:w="1"/><text x="2.7363%" y="1919.50"></text></g><g><title>combine::parser::Parser::parse_with_state (1 samples, 0.03%)</title><rect x="2.5152%" y="1909" width="0.0289%" height="15" fill="rgb(231,145,46)" fg:x="87" fg:w="1"/><text x="2.7652%" y="1919.50"></text></g><g><title>combine::parser::byte::memslice (9 samples, 0.26%)</title><rect x="2.5441%" y="1909" width="0.2602%" height="15" fill="rgb(251,118,11)" fg:x="88" fg:w="9"/><text x="2.7941%" y="1919.50"></text></g><g><title>combine::parser::sequence::&lt;impl combine::parser::Parser&lt;Input&gt; for (A,B)&gt;::parse_first (2 samples, 0.06%)</title><rect x="2.8043%" y="1909" width="0.0578%" height="15" fill="rgb(217,147,25)" fg:x="97" fg:w="2"/><text x="3.0543%" y="1919.50"></text></g><g><title>core::ptr::drop_in_place&lt;combine::parser::repeat::State&lt;combine::stream::easy::Errors&lt;u8,&amp;[u8],combine::stream::PointerOffset&lt;[u8]&gt;&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="2.8621%" y="1909" width="0.0289%" height="15" fill="rgb(247,81,37)" fg:x="99" fg:w="1"/><text x="3.1121%" y="1919.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::types::Value&gt;&gt; (2 samples, 0.06%)</title><rect x="2.8910%" y="1909" width="0.0578%" height="15" fill="rgb(209,12,38)" fg:x="100" fg:w="2"/><text x="3.1410%" y="1919.50"></text></g><g><title>core::str::converts::from_utf8 (3 samples, 0.09%)</title><rect x="2.9488%" y="1909" width="0.0867%" height="15" fill="rgb(227,1,9)" fg:x="102" fg:w="3"/><text x="3.1988%" y="1919.50"></text></g><g><title>exchange_lib::message_queue::_::&lt;impl serde::de::Deserialize for exchange_lib::message_queue::Payload&gt;::deserialize (2 samples, 0.06%)</title><rect x="3.0356%" y="1909" width="0.0578%" height="15" fill="rgb(248,47,43)" fg:x="105" fg:w="2"/><text x="3.2856%" y="1919.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_enum (1 samples, 0.03%)</title><rect x="3.0645%" y="1893" width="0.0289%" height="15" fill="rgb(221,10,30)" fg:x="106" fg:w="1"/><text x="3.3145%" y="1903.50"></text></g><g><title>&lt;exchange_lib::message_queue::_::&lt;impl serde::de::Deserialize for exchange_lib::message_queue::Payload&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (1 samples, 0.03%)</title><rect x="3.0645%" y="1877" width="0.0289%" height="15" fill="rgb(210,229,1)" fg:x="106" fg:w="1"/><text x="3.3145%" y="1887.50"></text></g><g><title>serde::de::VariantAccess::newtype_variant (1 samples, 0.03%)</title><rect x="3.0645%" y="1861" width="0.0289%" height="15" fill="rgb(222,148,37)" fg:x="106" fg:w="1"/><text x="3.3145%" y="1871.50"></text></g><g><title>&lt;serde_json::de::VariantAccess&lt;R&gt; as serde::de::VariantAccess&gt;::newtype_variant_seed (1 samples, 0.03%)</title><rect x="3.0645%" y="1845" width="0.0289%" height="15" fill="rgb(234,67,33)" fg:x="106" fg:w="1"/><text x="3.3145%" y="1855.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.03%)</title><rect x="3.0645%" y="1829" width="0.0289%" height="15" fill="rgb(247,98,35)" fg:x="106" fg:w="1"/><text x="3.3145%" y="1839.50"></text></g><g><title>exchange_matching_engine::order_book::OrderBook::insert_order (3 samples, 0.09%)</title><rect x="3.0934%" y="1909" width="0.0867%" height="15" fill="rgb(247,138,52)" fg:x="107" fg:w="3"/><text x="3.3434%" y="1919.50"></text></g><g><title>malloc (4 samples, 0.12%)</title><rect x="3.1801%" y="1909" width="0.1156%" height="15" fill="rgb(213,79,30)" fg:x="110" fg:w="4"/><text x="3.4301%" y="1919.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (2 samples, 0.06%)</title><rect x="3.2958%" y="1909" width="0.0578%" height="15" fill="rgb(246,177,23)" fg:x="114" fg:w="2"/><text x="3.5458%" y="1919.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::end_map (1 samples, 0.03%)</title><rect x="3.3536%" y="1909" width="0.0289%" height="15" fill="rgb(230,62,27)" fg:x="116" fg:w="1"/><text x="3.6036%" y="1919.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.06%)</title><rect x="3.3825%" y="1909" width="0.0578%" height="15" fill="rgb(216,154,8)" fg:x="117" fg:w="2"/><text x="3.6325%" y="1919.50"></text></g><g><title>exchange_lib::message_queue::_::&lt;impl serde::de::Deserialize for exchange_lib::message_queue::Message&gt;::deserialize (1 samples, 0.03%)</title><rect x="3.4114%" y="1893" width="0.0289%" height="15" fill="rgb(244,35,45)" fg:x="118" fg:w="1"/><text x="3.6614%" y="1903.50"></text></g><g><title>[[heap]] (99 samples, 2.86%)</title><rect x="0.6649%" y="1925" width="2.8621%" height="15" fill="rgb(251,115,12)" fg:x="23" fg:w="99"/><text x="0.9149%" y="1935.50">[[..</text></g><g><title>std::net::udp::UdpSocket::recv (3 samples, 0.09%)</title><rect x="3.4403%" y="1909" width="0.0867%" height="15" fill="rgb(240,54,50)" fg:x="119" fg:w="3"/><text x="3.6903%" y="1919.50"></text></g><g><title>&lt;alloc::string::String as redis::types::FromRedisValue&gt;::from_redis_value (1 samples, 0.03%)</title><rect x="3.5270%" y="1909" width="0.0289%" height="15" fill="rgb(233,84,52)" fg:x="122" fg:w="1"/><text x="3.7770%" y="1919.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (1 samples, 0.03%)</title><rect x="3.5270%" y="1893" width="0.0289%" height="15" fill="rgb(207,117,47)" fg:x="122" fg:w="1"/><text x="3.7770%" y="1903.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.03%)</title><rect x="3.5270%" y="1877" width="0.0289%" height="15" fill="rgb(249,43,39)" fg:x="122" fg:w="1"/><text x="3.7770%" y="1887.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.03%)</title><rect x="3.5270%" y="1861" width="0.0289%" height="15" fill="rgb(209,38,44)" fg:x="122" fg:w="1"/><text x="3.7770%" y="1871.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.03%)</title><rect x="3.5270%" y="1845" width="0.0289%" height="15" fill="rgb(236,212,23)" fg:x="122" fg:w="1"/><text x="3.7770%" y="1855.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.03%)</title><rect x="3.5270%" y="1829" width="0.0289%" height="15" fill="rgb(242,79,21)" fg:x="122" fg:w="1"/><text x="3.7770%" y="1839.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.03%)</title><rect x="3.5270%" y="1813" width="0.0289%" height="15" fill="rgb(211,96,35)" fg:x="122" fg:w="1"/><text x="3.7770%" y="1823.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.03%)</title><rect x="3.5270%" y="1797" width="0.0289%" height="15" fill="rgb(253,215,40)" fg:x="122" fg:w="1"/><text x="3.7770%" y="1807.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.03%)</title><rect x="3.5270%" y="1781" width="0.0289%" height="15" fill="rgb(211,81,21)" fg:x="122" fg:w="1"/><text x="3.7770%" y="1791.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.03%)</title><rect x="3.5270%" y="1765" width="0.0289%" height="15" fill="rgb(208,190,38)" fg:x="122" fg:w="1"/><text x="3.7770%" y="1775.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="3.5270%" y="1749" width="0.0289%" height="15" fill="rgb(235,213,38)" fg:x="122" fg:w="1"/><text x="3.7770%" y="1759.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.14%)</title><rect x="3.5559%" y="1909" width="0.1446%" height="15" fill="rgb(237,122,38)" fg:x="123" fg:w="5"/><text x="3.8059%" y="1919.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="3.6716%" y="1893" width="0.0289%" height="15" fill="rgb(244,218,35)" fg:x="127" fg:w="1"/><text x="3.9216%" y="1903.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="3.6716%" y="1877" width="0.0289%" height="15" fill="rgb(240,68,47)" fg:x="127" fg:w="1"/><text x="3.9216%" y="1887.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.03%)</title><rect x="3.6716%" y="1861" width="0.0289%" height="15" fill="rgb(210,16,53)" fg:x="127" fg:w="1"/><text x="3.9216%" y="1871.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="3.6716%" y="1845" width="0.0289%" height="15" fill="rgb(235,124,12)" fg:x="127" fg:w="1"/><text x="3.9216%" y="1855.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.03%)</title><rect x="3.6716%" y="1829" width="0.0289%" height="15" fill="rgb(224,169,11)" fg:x="127" fg:w="1"/><text x="3.9216%" y="1839.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.03%)</title><rect x="3.6716%" y="1813" width="0.0289%" height="15" fill="rgb(250,166,2)" fg:x="127" fg:w="1"/><text x="3.9216%" y="1823.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.03%)</title><rect x="3.6716%" y="1797" width="0.0289%" height="15" fill="rgb(242,216,29)" fg:x="127" fg:w="1"/><text x="3.9216%" y="1807.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.03%)</title><rect x="3.6716%" y="1781" width="0.0289%" height="15" fill="rgb(230,116,27)" fg:x="127" fg:w="1"/><text x="3.9216%" y="1791.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (1 samples, 0.03%)</title><rect x="3.6716%" y="1765" width="0.0289%" height="15" fill="rgb(228,99,48)" fg:x="127" fg:w="1"/><text x="3.9216%" y="1775.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.03%)</title><rect x="3.6716%" y="1749" width="0.0289%" height="15" fill="rgb(253,11,6)" fg:x="127" fg:w="1"/><text x="3.9216%" y="1759.50"></text></g><g><title>&lt;redis::types::Value as redis::types::FromRedisValue&gt;::from_redis_value (1 samples, 0.03%)</title><rect x="3.6716%" y="1733" width="0.0289%" height="15" fill="rgb(247,143,39)" fg:x="127" fg:w="1"/><text x="3.9216%" y="1743.50"></text></g><g><title>&lt;redis::types::Value as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="3.6716%" y="1717" width="0.0289%" height="15" fill="rgb(236,97,10)" fg:x="127" fg:w="1"/><text x="3.9216%" y="1727.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="3.6716%" y="1701" width="0.0289%" height="15" fill="rgb(233,208,19)" fg:x="127" fg:w="1"/><text x="3.9216%" y="1711.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.03%)</title><rect x="3.6716%" y="1685" width="0.0289%" height="15" fill="rgb(216,164,2)" fg:x="127" fg:w="1"/><text x="3.9216%" y="1695.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.03%)</title><rect x="3.6716%" y="1669" width="0.0289%" height="15" fill="rgb(220,129,5)" fg:x="127" fg:w="1"/><text x="3.9216%" y="1679.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.03%)</title><rect x="3.6716%" y="1653" width="0.0289%" height="15" fill="rgb(242,17,10)" fg:x="127" fg:w="1"/><text x="3.9216%" y="1663.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.03%)</title><rect x="3.6716%" y="1637" width="0.0289%" height="15" fill="rgb(242,107,0)" fg:x="127" fg:w="1"/><text x="3.9216%" y="1647.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="3.6716%" y="1621" width="0.0289%" height="15" fill="rgb(251,28,31)" fg:x="127" fg:w="1"/><text x="3.9216%" y="1631.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as redis::types::FromRedisValue&gt;::from_redis_value (1 samples, 0.03%)</title><rect x="3.7005%" y="1909" width="0.0289%" height="15" fill="rgb(233,223,10)" fg:x="128" fg:w="1"/><text x="3.9505%" y="1919.50"></text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.06%)</title><rect x="3.9029%" y="1893" width="0.0578%" height="15" fill="rgb(215,21,27)" fg:x="135" fg:w="2"/><text x="4.1529%" y="1903.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (2 samples, 0.06%)</title><rect x="3.9029%" y="1877" width="0.0578%" height="15" fill="rgb(232,23,21)" fg:x="135" fg:w="2"/><text x="4.1529%" y="1887.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (7 samples, 0.20%)</title><rect x="3.9607%" y="1877" width="0.2024%" height="15" fill="rgb(244,5,23)" fg:x="137" fg:w="7"/><text x="4.2107%" y="1887.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (17 samples, 0.49%)</title><rect x="3.7294%" y="1909" width="0.4915%" height="15" fill="rgb(226,81,46)" fg:x="129" fg:w="17"/><text x="3.9794%" y="1919.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (9 samples, 0.26%)</title><rect x="3.9607%" y="1893" width="0.2602%" height="15" fill="rgb(247,70,30)" fg:x="137" fg:w="9"/><text x="4.2107%" y="1903.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim (2 samples, 0.06%)</title><rect x="4.1631%" y="1877" width="0.0578%" height="15" fill="rgb(212,68,19)" fg:x="144" fg:w="2"/><text x="4.4131%" y="1887.50"></text></g><g><title>&lt;dyn core::any::Any+core::marker::Send+core::marker::Sync&gt;::downcast_mut (2 samples, 0.06%)</title><rect x="4.2209%" y="1877" width="0.0578%" height="15" fill="rgb(240,187,13)" fg:x="146" fg:w="2"/><text x="4.4709%" y="1887.50"></text></g><g><title>&lt;dyn core::any::Any&gt;::downcast_mut (2 samples, 0.06%)</title><rect x="4.2209%" y="1861" width="0.0578%" height="15" fill="rgb(223,113,26)" fg:x="146" fg:w="2"/><text x="4.4709%" y="1871.50"></text></g><g><title>&lt;dyn core::any::Any&gt;::is (2 samples, 0.06%)</title><rect x="4.2209%" y="1845" width="0.0578%" height="15" fill="rgb(206,192,2)" fg:x="146" fg:w="2"/><text x="4.4709%" y="1855.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_first (3 samples, 0.09%)</title><rect x="4.2209%" y="1909" width="0.0867%" height="15" fill="rgb(241,108,4)" fg:x="146" fg:w="3"/><text x="4.4709%" y="1919.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (3 samples, 0.09%)</title><rect x="4.2209%" y="1893" width="0.0867%" height="15" fill="rgb(247,173,49)" fg:x="146" fg:w="3"/><text x="4.4709%" y="1903.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.03%)</title><rect x="4.2787%" y="1877" width="0.0289%" height="15" fill="rgb(224,114,35)" fg:x="148" fg:w="1"/><text x="4.5287%" y="1887.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (1 samples, 0.03%)</title><rect x="4.2787%" y="1861" width="0.0289%" height="15" fill="rgb(245,159,27)" fg:x="148" fg:w="1"/><text x="4.5287%" y="1871.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (5 samples, 0.14%)</title><rect x="4.3076%" y="1909" width="0.1446%" height="15" fill="rgb(245,172,44)" fg:x="149" fg:w="5"/><text x="4.5576%" y="1919.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (2 samples, 0.06%)</title><rect x="4.3943%" y="1893" width="0.0578%" height="15" fill="rgb(236,23,11)" fg:x="152" fg:w="2"/><text x="4.6443%" y="1903.50"></text></g><g><title>&lt;dyn core::any::Any+core::marker::Send+core::marker::Sync&gt;::downcast_mut (2 samples, 0.06%)</title><rect x="4.3943%" y="1877" width="0.0578%" height="15" fill="rgb(205,117,38)" fg:x="152" fg:w="2"/><text x="4.6443%" y="1887.50"></text></g><g><title>&lt;dyn core::any::Any&gt;::downcast_mut (2 samples, 0.06%)</title><rect x="4.3943%" y="1861" width="0.0578%" height="15" fill="rgb(237,72,25)" fg:x="152" fg:w="2"/><text x="4.6443%" y="1871.50"></text></g><g><title>&lt;dyn core::any::Any&gt;::is (2 samples, 0.06%)</title><rect x="4.3943%" y="1845" width="0.0578%" height="15" fill="rgb(244,70,9)" fg:x="152" fg:w="2"/><text x="4.6443%" y="1855.50"></text></g><g><title>combine::parser::Parser::parse_committed_mode (1 samples, 0.03%)</title><rect x="4.4811%" y="1845" width="0.0289%" height="15" fill="rgb(217,125,39)" fg:x="155" fg:w="1"/><text x="4.7311%" y="1855.50"></text></g><g><title>&lt;combine::parser::combinator::Map&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (4 samples, 0.12%)</title><rect x="4.4522%" y="1909" width="0.1156%" height="15" fill="rgb(235,36,10)" fg:x="154" fg:w="4"/><text x="4.7022%" y="1919.50"></text></g><g><title>combine::parser::Parser::parse_mode (3 samples, 0.09%)</title><rect x="4.4811%" y="1893" width="0.0867%" height="15" fill="rgb(251,123,47)" fg:x="155" fg:w="3"/><text x="4.7311%" y="1903.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (3 samples, 0.09%)</title><rect x="4.4811%" y="1877" width="0.0867%" height="15" fill="rgb(221,13,13)" fg:x="155" fg:w="3"/><text x="4.7311%" y="1887.50"></text></g><g><title>&lt;combine::parser::sequence::ThenPartial&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (3 samples, 0.09%)</title><rect x="4.4811%" y="1861" width="0.0867%" height="15" fill="rgb(238,131,9)" fg:x="155" fg:w="3"/><text x="4.7311%" y="1871.50"></text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.06%)</title><rect x="4.5100%" y="1845" width="0.0578%" height="15" fill="rgb(211,50,8)" fg:x="156" fg:w="2"/><text x="4.7600%" y="1855.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (2 samples, 0.06%)</title><rect x="4.5100%" y="1829" width="0.0578%" height="15" fill="rgb(245,182,24)" fg:x="156" fg:w="2"/><text x="4.7600%" y="1839.50"></text></g><g><title>&lt;combine::parser::sequence::ThenPartial&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (2 samples, 0.06%)</title><rect x="4.5678%" y="1909" width="0.0578%" height="15" fill="rgb(242,14,37)" fg:x="158" fg:w="2"/><text x="4.8178%" y="1919.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (3 samples, 0.09%)</title><rect x="4.7702%" y="1877" width="0.0867%" height="15" fill="rgb(246,228,12)" fg:x="165" fg:w="3"/><text x="5.0202%" y="1887.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (1 samples, 0.03%)</title><rect x="4.8280%" y="1861" width="0.0289%" height="15" fill="rgb(213,55,15)" fg:x="167" fg:w="1"/><text x="5.0780%" y="1871.50"></text></g><g><title>bytes::buf::uninit_slice::UninitSlice::write_byte (2 samples, 0.06%)</title><rect x="4.8569%" y="1877" width="0.0578%" height="15" fill="rgb(209,9,3)" fg:x="168" fg:w="2"/><text x="5.1069%" y="1887.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.06%)</title><rect x="4.8569%" y="1861" width="0.0578%" height="15" fill="rgb(230,59,30)" fg:x="168" fg:w="2"/><text x="5.1069%" y="1871.50"></text></g><g><title>core::ptr::write (2 samples, 0.06%)</title><rect x="4.8569%" y="1845" width="0.0578%" height="15" fill="rgb(209,121,21)" fg:x="168" fg:w="2"/><text x="5.1069%" y="1855.50"></text></g><g><title>&lt;combine::stream::buf_reader::Buffer as combine::stream::buf_reader::CombineSyncRead&lt;R&gt;&gt;::extend_buf_sync (11 samples, 0.32%)</title><rect x="4.6256%" y="1909" width="0.3180%" height="15" fill="rgb(220,109,13)" fg:x="160" fg:w="11"/><text x="4.8756%" y="1919.50"></text></g><g><title>combine::stream::buf_reader::extend_buf_sync (6 samples, 0.17%)</title><rect x="4.7702%" y="1893" width="0.1735%" height="15" fill="rgb(232,18,1)" fg:x="165" fg:w="6"/><text x="5.0202%" y="1903.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (1 samples, 0.03%)</title><rect x="4.9147%" y="1877" width="0.0289%" height="15" fill="rgb(215,41,42)" fg:x="170" fg:w="1"/><text x="5.1647%" y="1887.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (1 samples, 0.03%)</title><rect x="4.9147%" y="1861" width="0.0289%" height="15" fill="rgb(224,123,36)" fg:x="170" fg:w="1"/><text x="5.1647%" y="1871.50"></text></g><g><title>&lt;exchange_lib::message_queue::_::&lt;impl serde::de::Deserialize for exchange_lib::message_queue::Payload&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (1 samples, 0.03%)</title><rect x="5.1749%" y="1893" width="0.0289%" height="15" fill="rgb(240,125,3)" fg:x="179" fg:w="1"/><text x="5.4249%" y="1903.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (1 samples, 0.03%)</title><rect x="5.1749%" y="1877" width="0.0289%" height="15" fill="rgb(205,98,50)" fg:x="179" fg:w="1"/><text x="5.4249%" y="1887.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.03%)</title><rect x="5.1749%" y="1861" width="0.0289%" height="15" fill="rgb(205,185,37)" fg:x="179" fg:w="1"/><text x="5.4249%" y="1871.50"></text></g><g><title>&lt;exchange_lib::order_side::_::&lt;impl serde::de::Deserialize for exchange_lib::order_side::OrderSide&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (1 samples, 0.03%)</title><rect x="5.2038%" y="1893" width="0.0289%" height="15" fill="rgb(238,207,15)" fg:x="180" fg:w="1"/><text x="5.4538%" y="1903.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (1 samples, 0.03%)</title><rect x="5.2038%" y="1877" width="0.0289%" height="15" fill="rgb(213,199,42)" fg:x="180" fg:w="1"/><text x="5.4538%" y="1887.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.03%)</title><rect x="5.2038%" y="1861" width="0.0289%" height="15" fill="rgb(235,201,11)" fg:x="180" fg:w="1"/><text x="5.4538%" y="1871.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (14 samples, 0.40%)</title><rect x="4.9436%" y="1909" width="0.4047%" height="15" fill="rgb(207,46,11)" fg:x="171" fg:w="14"/><text x="5.1936%" y="1919.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u64&gt;::deserialize (4 samples, 0.12%)</title><rect x="5.2327%" y="1893" width="0.1156%" height="15" fill="rgb(241,35,35)" fg:x="181" fg:w="4"/><text x="5.4827%" y="1903.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_u64 (4 samples, 0.12%)</title><rect x="5.2327%" y="1877" width="0.1156%" height="15" fill="rgb(243,32,47)" fg:x="181" fg:w="4"/><text x="5.4827%" y="1887.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::deserialize_number (4 samples, 0.12%)</title><rect x="5.2327%" y="1861" width="0.1156%" height="15" fill="rgb(247,202,23)" fg:x="181" fg:w="4"/><text x="5.4827%" y="1871.50"></text></g><g><title>&lt;exchange_lib::commands::_::&lt;impl serde::de::Deserialize for exchange_lib::commands::TradeCommand&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.03%)</title><rect x="5.3484%" y="1909" width="0.0289%" height="15" fill="rgb(219,102,11)" fg:x="185" fg:w="1"/><text x="5.5984%" y="1919.50"></text></g><g><title>serde::de::MapAccess::next_key (1 samples, 0.03%)</title><rect x="5.4062%" y="1845" width="0.0289%" height="15" fill="rgb(243,110,44)" fg:x="187" fg:w="1"/><text x="5.6562%" y="1855.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.03%)</title><rect x="5.4062%" y="1829" width="0.0289%" height="15" fill="rgb(222,74,54)" fg:x="187" fg:w="1"/><text x="5.6562%" y="1839.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.03%)</title><rect x="5.4062%" y="1813" width="0.0289%" height="15" fill="rgb(216,99,12)" fg:x="187" fg:w="1"/><text x="5.6562%" y="1823.50"></text></g><g><title>&lt;exchange_lib::commands::_::&lt;impl serde::de::Deserialize for exchange_lib::commands::TradeCommand&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (1 samples, 0.03%)</title><rect x="5.4062%" y="1797" width="0.0289%" height="15" fill="rgb(226,22,26)" fg:x="187" fg:w="1"/><text x="5.6562%" y="1807.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (1 samples, 0.03%)</title><rect x="5.4062%" y="1781" width="0.0289%" height="15" fill="rgb(217,163,10)" fg:x="187" fg:w="1"/><text x="5.6562%" y="1791.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.03%)</title><rect x="5.4062%" y="1765" width="0.0289%" height="15" fill="rgb(213,25,53)" fg:x="187" fg:w="1"/><text x="5.6562%" y="1775.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (4 samples, 0.12%)</title><rect x="5.3773%" y="1877" width="0.1156%" height="15" fill="rgb(252,105,26)" fg:x="186" fg:w="4"/><text x="5.6273%" y="1887.50"></text></g><g><title>&lt;exchange_lib::commands::_::&lt;impl serde::de::Deserialize for exchange_lib::commands::TradeCommand&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.09%)</title><rect x="5.4062%" y="1861" width="0.0867%" height="15" fill="rgb(220,39,43)" fg:x="187" fg:w="3"/><text x="5.6562%" y="1871.50"></text></g><g><title>serde::de::MapAccess::next_value (2 samples, 0.06%)</title><rect x="5.4351%" y="1845" width="0.0578%" height="15" fill="rgb(229,68,48)" fg:x="188" fg:w="2"/><text x="5.6851%" y="1855.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.06%)</title><rect x="5.4351%" y="1829" width="0.0578%" height="15" fill="rgb(252,8,32)" fg:x="188" fg:w="2"/><text x="5.6851%" y="1839.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (12 samples, 0.35%)</title><rect x="5.4929%" y="1877" width="0.3469%" height="15" fill="rgb(223,20,43)" fg:x="190" fg:w="12"/><text x="5.7429%" y="1887.50"></text></g><g><title>exchange_lib::order_side::_::&lt;impl serde::de::Deserialize for exchange_lib::order_side::OrderSide&gt;::deserialize (1 samples, 0.03%)</title><rect x="5.8398%" y="1877" width="0.0289%" height="15" fill="rgb(229,81,49)" fg:x="202" fg:w="1"/><text x="6.0898%" y="1887.50"></text></g><g><title>&lt;redis::connection::Connection as redis::connection::ConnectionLike&gt;::check_connection (19 samples, 0.55%)</title><rect x="5.3773%" y="1909" width="0.5493%" height="15" fill="rgb(236,28,36)" fg:x="186" fg:w="19"/><text x="5.6273%" y="1919.50"></text></g><g><title>redis::cmd::Cmd::query (19 samples, 0.55%)</title><rect x="5.3773%" y="1893" width="0.5493%" height="15" fill="rgb(249,185,26)" fg:x="186" fg:w="19"/><text x="5.6273%" y="1903.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (2 samples, 0.06%)</title><rect x="5.8687%" y="1877" width="0.0578%" height="15" fill="rgb(249,174,33)" fg:x="203" fg:w="2"/><text x="6.1187%" y="1887.50"></text></g><g><title>&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;A,B,C,D,E,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (7 samples, 0.20%)</title><rect x="5.9266%" y="1909" width="0.2024%" height="15" fill="rgb(233,201,37)" fg:x="205" fg:w="7"/><text x="6.1766%" y="1919.50"></text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.06%)</title><rect x="6.0711%" y="1893" width="0.0578%" height="15" fill="rgb(221,78,26)" fg:x="210" fg:w="2"/><text x="6.3211%" y="1903.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (2 samples, 0.06%)</title><rect x="6.0711%" y="1877" width="0.0578%" height="15" fill="rgb(250,127,30)" fg:x="210" fg:w="2"/><text x="6.3211%" y="1887.50"></text></g><g><title>&lt;redis::types::Value as redis::types::FromRedisValue&gt;::from_redis_value (3 samples, 0.09%)</title><rect x="6.1289%" y="1909" width="0.0867%" height="15" fill="rgb(230,49,44)" fg:x="212" fg:w="3"/><text x="6.3789%" y="1919.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.03%)</title><rect x="6.2157%" y="1909" width="0.0289%" height="15" fill="rgb(229,67,23)" fg:x="215" fg:w="1"/><text x="6.4657%" y="1919.50"></text></g><g><title>[libc.so.6] (3 samples, 0.09%)</title><rect x="6.2446%" y="1909" width="0.0867%" height="15" fill="rgb(249,83,47)" fg:x="216" fg:w="3"/><text x="6.4946%" y="1919.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.17%)</title><rect x="6.3313%" y="1909" width="0.1735%" height="15" fill="rgb(215,43,3)" fg:x="219" fg:w="6"/><text x="6.5813%" y="1919.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (1 samples, 0.03%)</title><rect x="6.5048%" y="1909" width="0.0289%" height="15" fill="rgb(238,154,13)" fg:x="225" fg:w="1"/><text x="6.7548%" y="1919.50"></text></g><g><title>cfree (3 samples, 0.09%)</title><rect x="6.5337%" y="1909" width="0.0867%" height="15" fill="rgb(219,56,2)" fg:x="226" fg:w="3"/><text x="6.7837%" y="1919.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (9 samples, 0.26%)</title><rect x="6.6204%" y="1909" width="0.2602%" height="15" fill="rgb(233,0,4)" fg:x="229" fg:w="9"/><text x="6.8704%" y="1919.50"></text></g><g><title>&lt;memchr::memchr::Memchr as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="7.1119%" y="1893" width="0.0289%" height="15" fill="rgb(235,30,7)" fg:x="246" fg:w="1"/><text x="7.3619%" y="1903.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (1 samples, 0.03%)</title><rect x="7.1119%" y="1877" width="0.0289%" height="15" fill="rgb(250,79,13)" fg:x="246" fg:w="1"/><text x="7.3619%" y="1887.50"></text></g><g><title>&lt;memchr::memchr::Memchr as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (1 samples, 0.03%)</title><rect x="7.1119%" y="1861" width="0.0289%" height="15" fill="rgb(211,146,34)" fg:x="246" fg:w="1"/><text x="7.3619%" y="1871.50"></text></g><g><title>memchr::memchr::memchr_raw (1 samples, 0.03%)</title><rect x="7.1119%" y="1845" width="0.0289%" height="15" fill="rgb(228,22,38)" fg:x="246" fg:w="1"/><text x="7.3619%" y="1855.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (1 samples, 0.03%)</title><rect x="7.1119%" y="1829" width="0.0289%" height="15" fill="rgb(235,168,5)" fg:x="246" fg:w="1"/><text x="7.3619%" y="1839.50"></text></g><g><title>combine::parser::byte::memslice (11 samples, 0.32%)</title><rect x="6.8806%" y="1909" width="0.3180%" height="15" fill="rgb(221,155,16)" fg:x="238" fg:w="11"/><text x="7.1306%" y="1919.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (2 samples, 0.06%)</title><rect x="7.1408%" y="1893" width="0.0578%" height="15" fill="rgb(215,215,53)" fg:x="247" fg:w="2"/><text x="7.3908%" y="1903.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.06%)</title><rect x="7.1408%" y="1877" width="0.0578%" height="15" fill="rgb(223,4,10)" fg:x="247" fg:w="2"/><text x="7.3908%" y="1887.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.06%)</title><rect x="7.1408%" y="1861" width="0.0578%" height="15" fill="rgb(234,103,6)" fg:x="247" fg:w="2"/><text x="7.3908%" y="1871.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.06%)</title><rect x="7.1408%" y="1845" width="0.0578%" height="15" fill="rgb(227,97,0)" fg:x="247" fg:w="2"/><text x="7.3908%" y="1855.50"></text></g><g><title>combine::parser::sequence::&lt;impl combine::parser::Parser&lt;Input&gt; for (A,B)&gt;::parse_first (1 samples, 0.03%)</title><rect x="7.1986%" y="1909" width="0.0289%" height="15" fill="rgb(234,150,53)" fg:x="249" fg:w="1"/><text x="7.4486%" y="1919.50"></text></g><g><title>combine::stream::easy::Errors&lt;T,R,P&gt;::add_error (1 samples, 0.03%)</title><rect x="7.2275%" y="1909" width="0.0289%" height="15" fill="rgb(228,201,54)" fg:x="250" fg:w="1"/><text x="7.4775%" y="1919.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.03%)</title><rect x="7.2564%" y="1909" width="0.0289%" height="15" fill="rgb(222,22,37)" fg:x="251" fg:w="1"/><text x="7.5064%" y="1919.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.03%)</title><rect x="7.2853%" y="1909" width="0.0289%" height="15" fill="rgb(237,53,32)" fg:x="252" fg:w="1"/><text x="7.5353%" y="1919.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.03%)</title><rect x="7.3143%" y="1909" width="0.0289%" height="15" fill="rgb(233,25,53)" fg:x="253" fg:w="1"/><text x="7.5643%" y="1919.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for i64&gt;::from_str (2 samples, 0.06%)</title><rect x="7.3432%" y="1909" width="0.0578%" height="15" fill="rgb(210,40,34)" fg:x="254" fg:w="2"/><text x="7.5932%" y="1919.50"></text></g><g><title>core::num::from_str_radix (5 samples, 0.14%)</title><rect x="7.4010%" y="1909" width="0.1446%" height="15" fill="rgb(241,220,44)" fg:x="256" fg:w="5"/><text x="7.6510%" y="1919.50"></text></g><g><title>core::ptr::drop_in_place&lt;combine::parser::repeat::State&lt;combine::stream::easy::Errors&lt;u8,&amp;[u8],combine::stream::PointerOffset&lt;[u8]&gt;&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="7.5455%" y="1909" width="0.0289%" height="15" fill="rgb(235,28,35)" fg:x="261" fg:w="1"/><text x="7.7955%" y="1919.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::types::Value&gt;&gt; (2 samples, 0.06%)</title><rect x="7.5744%" y="1909" width="0.0578%" height="15" fill="rgb(210,56,17)" fg:x="262" fg:w="2"/><text x="7.8244%" y="1919.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.03%)</title><rect x="7.6323%" y="1909" width="0.0289%" height="15" fill="rgb(224,130,29)" fg:x="264" fg:w="1"/><text x="7.8823%" y="1919.50"></text></g><g><title>exchange_lib::event::_::&lt;impl serde::ser::Serialize for exchange_lib::event::MatchingEngineEvent&gt;::serialize (1 samples, 0.03%)</title><rect x="7.6612%" y="1909" width="0.0289%" height="15" fill="rgb(235,212,8)" fg:x="265" fg:w="1"/><text x="7.9112%" y="1919.50"></text></g><g><title>malloc (5 samples, 0.14%)</title><rect x="7.6901%" y="1909" width="0.1446%" height="15" fill="rgb(223,33,50)" fg:x="266" fg:w="5"/><text x="7.9401%" y="1919.50"></text></g><g><title>realloc (2 samples, 0.06%)</title><rect x="7.8346%" y="1909" width="0.0578%" height="15" fill="rgb(219,149,13)" fg:x="271" fg:w="2"/><text x="8.0846%" y="1919.50"></text></g><g><title>recv (2 samples, 0.06%)</title><rect x="7.8925%" y="1909" width="0.0578%" height="15" fill="rgb(250,156,29)" fg:x="273" fg:w="2"/><text x="8.1425%" y="1919.50"></text></g><g><title>redis::connection::Connection::read_response (1 samples, 0.03%)</title><rect x="7.9503%" y="1909" width="0.0289%" height="15" fill="rgb(216,193,19)" fg:x="275" fg:w="1"/><text x="8.2003%" y="1919.50"></text></g><g><title>redis::connection::Msg::from_value (3 samples, 0.09%)</title><rect x="7.9792%" y="1909" width="0.0867%" height="15" fill="rgb(216,135,14)" fg:x="276" fg:w="3"/><text x="8.2292%" y="1919.50"></text></g><g><title>redis::types::from_redis_value (1 samples, 0.03%)</title><rect x="8.0370%" y="1893" width="0.0289%" height="15" fill="rgb(241,47,5)" fg:x="278" fg:w="1"/><text x="8.2870%" y="1903.50"></text></g><g><title>redis::parser::Parser::parse_value (1 samples, 0.03%)</title><rect x="8.0659%" y="1909" width="0.0289%" height="15" fill="rgb(233,42,35)" fg:x="279" fg:w="1"/><text x="8.3159%" y="1919.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (3 samples, 0.09%)</title><rect x="8.0948%" y="1909" width="0.0867%" height="15" fill="rgb(231,13,6)" fg:x="280" fg:w="3"/><text x="8.3448%" y="1919.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.06%)</title><rect x="8.1816%" y="1909" width="0.0578%" height="15" fill="rgb(207,181,40)" fg:x="283" fg:w="2"/><text x="8.4316%" y="1919.50"></text></g><g><title>serde_json::ser::to_vec (1 samples, 0.03%)</title><rect x="8.2394%" y="1909" width="0.0289%" height="15" fill="rgb(254,173,49)" fg:x="285" fg:w="1"/><text x="8.4894%" y="1919.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.03%)</title><rect x="8.2394%" y="1893" width="0.0289%" height="15" fill="rgb(221,1,38)" fg:x="285" fg:w="1"/><text x="8.4894%" y="1903.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="8.2394%" y="1877" width="0.0289%" height="15" fill="rgb(206,124,46)" fg:x="285" fg:w="1"/><text x="8.4894%" y="1887.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="8.2394%" y="1861" width="0.0289%" height="15" fill="rgb(249,21,11)" fg:x="285" fg:w="1"/><text x="8.4894%" y="1871.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.03%)</title><rect x="8.2394%" y="1845" width="0.0289%" height="15" fill="rgb(222,201,40)" fg:x="285" fg:w="1"/><text x="8.4894%" y="1855.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="8.2394%" y="1829" width="0.0289%" height="15" fill="rgb(235,61,29)" fg:x="285" fg:w="1"/><text x="8.4894%" y="1839.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="8.2394%" y="1813" width="0.0289%" height="15" fill="rgb(219,207,3)" fg:x="285" fg:w="1"/><text x="8.4894%" y="1823.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="8.2394%" y="1797" width="0.0289%" height="15" fill="rgb(222,56,46)" fg:x="285" fg:w="1"/><text x="8.4894%" y="1807.50"></text></g><g><title>[[stack]] (166 samples, 4.80%)</title><rect x="3.5270%" y="1925" width="4.7991%" height="15" fill="rgb(239,76,54)" fg:x="122" fg:w="166"/><text x="3.7770%" y="1935.50">[[stac..</text></g><g><title>std::net::udp::UdpSocket::recv (2 samples, 0.06%)</title><rect x="8.2683%" y="1909" width="0.0578%" height="15" fill="rgb(231,124,27)" fg:x="286" fg:w="2"/><text x="8.5183%" y="1919.50"></text></g><g><title>std::sys_common::net::UdpSocket::recv (2 samples, 0.06%)</title><rect x="8.2683%" y="1893" width="0.0578%" height="15" fill="rgb(249,195,6)" fg:x="286" fg:w="2"/><text x="8.5183%" y="1903.50"></text></g><g><title>std::sys::unix::net::Socket::read (2 samples, 0.06%)</title><rect x="8.2683%" y="1877" width="0.0578%" height="15" fill="rgb(237,174,47)" fg:x="286" fg:w="2"/><text x="8.5183%" y="1887.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (2 samples, 0.06%)</title><rect x="8.2683%" y="1861" width="0.0578%" height="15" fill="rgb(206,201,31)" fg:x="286" fg:w="2"/><text x="8.5183%" y="1871.50"></text></g><g><title>std::sys::unix::cvt (1 samples, 0.03%)</title><rect x="8.2972%" y="1845" width="0.0289%" height="15" fill="rgb(231,57,52)" fg:x="287" fg:w="1"/><text x="8.5472%" y="1855.50"></text></g><g><title>std::io::error::Error::last_os_error (1 samples, 0.03%)</title><rect x="8.2972%" y="1829" width="0.0289%" height="15" fill="rgb(248,177,22)" fg:x="287" fg:w="1"/><text x="8.5472%" y="1839.50"></text></g><g><title>std::sys::unix::os::errno (1 samples, 0.03%)</title><rect x="8.2972%" y="1813" width="0.0289%" height="15" fill="rgb(215,211,37)" fg:x="287" fg:w="1"/><text x="8.5472%" y="1823.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="8.3550%" y="1845" width="0.0289%" height="15" fill="rgb(241,128,51)" fg:x="289" fg:w="1"/><text x="8.6050%" y="1855.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="8.3550%" y="1829" width="0.0289%" height="15" fill="rgb(227,165,31)" fg:x="289" fg:w="1"/><text x="8.6050%" y="1839.50"></text></g><g><title>&lt;redis::cmd::Cmd as redis::types::RedisWrite&gt;::write_arg (3 samples, 0.09%)</title><rect x="8.3261%" y="1909" width="0.0867%" height="15" fill="rgb(228,167,24)" fg:x="288" fg:w="3"/><text x="8.5761%" y="1919.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.06%)</title><rect x="8.3550%" y="1893" width="0.0578%" height="15" fill="rgb(228,143,12)" fg:x="289" fg:w="2"/><text x="8.6050%" y="1903.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.06%)</title><rect x="8.3550%" y="1877" width="0.0578%" height="15" fill="rgb(249,149,8)" fg:x="289" fg:w="2"/><text x="8.6050%" y="1887.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.06%)</title><rect x="8.3550%" y="1861" width="0.0578%" height="15" fill="rgb(243,35,44)" fg:x="289" fg:w="2"/><text x="8.6050%" y="1871.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="8.3839%" y="1845" width="0.0289%" height="15" fill="rgb(246,89,9)" fg:x="290" fg:w="1"/><text x="8.6339%" y="1855.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="8.4128%" y="1909" width="0.0289%" height="15" fill="rgb(233,213,13)" fg:x="291" fg:w="1"/><text x="8.6628%" y="1919.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.03%)</title><rect x="8.4128%" y="1893" width="0.0289%" height="15" fill="rgb(233,141,41)" fg:x="291" fg:w="1"/><text x="8.6628%" y="1903.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.03%)</title><rect x="8.4128%" y="1877" width="0.0289%" height="15" fill="rgb(239,167,4)" fg:x="291" fg:w="1"/><text x="8.6628%" y="1887.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.03%)</title><rect x="8.4128%" y="1861" width="0.0289%" height="15" fill="rgb(209,217,16)" fg:x="291" fg:w="1"/><text x="8.6628%" y="1871.50"></text></g><g><title>exchange_lib::message_queue::_::&lt;impl serde::ser::Serialize for exchange_lib::message_queue::Payload&gt;::serialize (2 samples, 0.06%)</title><rect x="8.4417%" y="1909" width="0.0578%" height="15" fill="rgb(219,88,35)" fg:x="292" fg:w="2"/><text x="8.6917%" y="1919.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.03%)</title><rect x="8.4707%" y="1893" width="0.0289%" height="15" fill="rgb(220,193,23)" fg:x="293" fg:w="1"/><text x="8.7207%" y="1903.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.03%)</title><rect x="8.4707%" y="1877" width="0.0289%" height="15" fill="rgb(230,90,52)" fg:x="293" fg:w="1"/><text x="8.7207%" y="1887.50"></text></g><g><title>redis::commands::&lt;impl redis::pipeline::Pipeline&gt;::publish (1 samples, 0.03%)</title><rect x="8.4996%" y="1893" width="0.0289%" height="15" fill="rgb(252,106,19)" fg:x="294" fg:w="1"/><text x="8.7496%" y="1903.50"></text></g><g><title>redis::cmd::Cmd::arg (1 samples, 0.03%)</title><rect x="8.4996%" y="1877" width="0.0289%" height="15" fill="rgb(206,74,20)" fg:x="294" fg:w="1"/><text x="8.7496%" y="1887.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.03%)</title><rect x="8.4996%" y="1861" width="0.0289%" height="15" fill="rgb(230,138,44)" fg:x="294" fg:w="1"/><text x="8.7496%" y="1871.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="8.4996%" y="1845" width="0.0289%" height="15" fill="rgb(235,182,43)" fg:x="294" fg:w="1"/><text x="8.7496%" y="1855.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="8.4996%" y="1829" width="0.0289%" height="15" fill="rgb(242,16,51)" fg:x="294" fg:w="1"/><text x="8.7496%" y="1839.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="8.4996%" y="1813" width="0.0289%" height="15" fill="rgb(248,9,4)" fg:x="294" fg:w="1"/><text x="8.7496%" y="1823.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="8.4996%" y="1797" width="0.0289%" height="15" fill="rgb(210,31,22)" fg:x="294" fg:w="1"/><text x="8.7496%" y="1807.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="8.4996%" y="1781" width="0.0289%" height="15" fill="rgb(239,54,39)" fg:x="294" fg:w="1"/><text x="8.7496%" y="1791.50"></text></g><g><title>exchange_lib::message_queue::publish_pipeline (2 samples, 0.06%)</title><rect x="8.4996%" y="1909" width="0.0578%" height="15" fill="rgb(230,99,41)" fg:x="294" fg:w="2"/><text x="8.7496%" y="1919.50"></text></g><g><title>serde_json::ser::to_string (1 samples, 0.03%)</title><rect x="8.5285%" y="1893" width="0.0289%" height="15" fill="rgb(253,106,12)" fg:x="295" fg:w="1"/><text x="8.7785%" y="1903.50"></text></g><g><title>[anon] (10 samples, 0.29%)</title><rect x="8.3261%" y="1925" width="0.2891%" height="15" fill="rgb(213,46,41)" fg:x="288" fg:w="10"/><text x="8.5761%" y="1935.50"></text></g><g><title>exchange_matching_engine::order::StandingOrder::notify (2 samples, 0.06%)</title><rect x="8.5574%" y="1909" width="0.0578%" height="15" fill="rgb(215,133,35)" fg:x="296" fg:w="2"/><text x="8.8074%" y="1919.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.09%)</title><rect x="8.6152%" y="1909" width="0.0867%" height="15" fill="rgb(213,28,5)" fg:x="298" fg:w="3"/><text x="8.8652%" y="1919.50"></text></g><g><title>combine::parser::Parser::parse_committed_mode (1 samples, 0.03%)</title><rect x="8.8465%" y="1877" width="0.0289%" height="15" fill="rgb(215,77,49)" fg:x="306" fg:w="1"/><text x="9.0965%" y="1887.50"></text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (9 samples, 0.26%)</title><rect x="8.7019%" y="1909" width="0.2602%" height="15" fill="rgb(248,100,22)" fg:x="301" fg:w="9"/><text x="8.9519%" y="1919.50"></text></g><g><title>&lt;combine::parser::sequence::ThenPartial&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (4 samples, 0.12%)</title><rect x="8.8465%" y="1893" width="0.1156%" height="15" fill="rgb(208,67,9)" fg:x="306" fg:w="4"/><text x="9.0965%" y="1903.50"></text></g><g><title>combine::parser::Parser::parse_mode (3 samples, 0.09%)</title><rect x="8.8754%" y="1877" width="0.0867%" height="15" fill="rgb(219,133,21)" fg:x="307" fg:w="3"/><text x="9.1254%" y="1887.50"></text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (3 samples, 0.09%)</title><rect x="8.8754%" y="1861" width="0.0867%" height="15" fill="rgb(246,46,29)" fg:x="307" fg:w="3"/><text x="9.1254%" y="1871.50"></text></g><g><title>&lt;combine::parser::sequence::ThenPartial&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (3 samples, 0.09%)</title><rect x="8.8754%" y="1845" width="0.0867%" height="15" fill="rgb(246,185,52)" fg:x="307" fg:w="3"/><text x="9.1254%" y="1855.50"></text></g><g><title>combine::parser::Parser::parse_committed_mode (3 samples, 0.09%)</title><rect x="8.8754%" y="1829" width="0.0867%" height="15" fill="rgb(252,136,11)" fg:x="307" fg:w="3"/><text x="9.1254%" y="1839.50"></text></g><g><title>&lt;combine::parser::combinator::Map&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (3 samples, 0.09%)</title><rect x="8.9621%" y="1909" width="0.0867%" height="15" fill="rgb(219,138,53)" fg:x="310" fg:w="3"/><text x="9.2121%" y="1919.50"></text></g><g><title>&lt;combine::stream::easy::Error&lt;T,R&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.03%)</title><rect x="9.0489%" y="1909" width="0.0289%" height="15" fill="rgb(211,51,23)" fg:x="313" fg:w="1"/><text x="9.2989%" y="1919.50"></text></g><g><title>&lt;redis::types::Value as redis::types::FromRedisValue&gt;::from_redis_value (1 samples, 0.03%)</title><rect x="9.0778%" y="1909" width="0.0289%" height="15" fill="rgb(247,221,28)" fg:x="314" fg:w="1"/><text x="9.3278%" y="1919.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="9.1067%" y="1909" width="0.0289%" height="15" fill="rgb(251,222,45)" fg:x="315" fg:w="1"/><text x="9.3567%" y="1919.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="9.1356%" y="1909" width="0.0289%" height="15" fill="rgb(217,162,53)" fg:x="316" fg:w="1"/><text x="9.3856%" y="1919.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="9.1356%" y="1893" width="0.0289%" height="15" fill="rgb(229,93,14)" fg:x="316" fg:w="1"/><text x="9.3856%" y="1903.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.09%)</title><rect x="9.1645%" y="1909" width="0.0867%" height="15" fill="rgb(209,67,49)" fg:x="317" fg:w="3"/><text x="9.4145%" y="1919.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (2 samples, 0.06%)</title><rect x="9.2512%" y="1909" width="0.0578%" height="15" fill="rgb(213,87,29)" fg:x="320" fg:w="2"/><text x="9.5012%" y="1919.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (1 samples, 0.03%)</title><rect x="9.3090%" y="1909" width="0.0289%" height="15" fill="rgb(205,151,52)" fg:x="322" fg:w="1"/><text x="9.5590%" y="1919.50"></text></g><g><title>cfree (1 samples, 0.03%)</title><rect x="9.3380%" y="1909" width="0.0289%" height="15" fill="rgb(253,215,39)" fg:x="323" fg:w="1"/><text x="9.5880%" y="1919.50"></text></g><g><title>combine::stream::decode (4 samples, 0.12%)</title><rect x="9.3669%" y="1909" width="0.1156%" height="15" fill="rgb(221,220,41)" fg:x="324" fg:w="4"/><text x="9.6169%" y="1919.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.03%)</title><rect x="9.4825%" y="1909" width="0.0289%" height="15" fill="rgb(218,133,21)" fg:x="328" fg:w="1"/><text x="9.7325%" y="1919.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.03%)</title><rect x="9.5114%" y="1909" width="0.0289%" height="15" fill="rgb(221,193,43)" fg:x="329" fg:w="1"/><text x="9.7614%" y="1919.50"></text></g><g><title>exchange_matching_engine::order_book::OrderBook::insert_order (1 samples, 0.03%)</title><rect x="9.5403%" y="1909" width="0.0289%" height="15" fill="rgb(240,128,52)" fg:x="330" fg:w="1"/><text x="9.7903%" y="1919.50"></text></g><g><title>redis::connection::PubSub::get_message (2 samples, 0.06%)</title><rect x="9.5692%" y="1909" width="0.0578%" height="15" fill="rgb(253,114,12)" fg:x="331" fg:w="2"/><text x="9.8192%" y="1919.50"></text></g><g><title>redis::connection::Connection::recv_response (1 samples, 0.03%)</title><rect x="9.5981%" y="1893" width="0.0289%" height="15" fill="rgb(215,223,47)" fg:x="332" fg:w="1"/><text x="9.8481%" y="1903.50"></text></g><g><title>redis::parser::Parser::parse_value (1 samples, 0.03%)</title><rect x="9.6271%" y="1909" width="0.0289%" height="15" fill="rgb(248,225,23)" fg:x="333" fg:w="1"/><text x="9.8771%" y="1919.50"></text></g><g><title>redis::pipeline::Pipeline::execute_pipelined (1 samples, 0.03%)</title><rect x="9.6560%" y="1909" width="0.0289%" height="15" fill="rgb(250,108,0)" fg:x="334" fg:w="1"/><text x="9.9060%" y="1919.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.03%)</title><rect x="9.6849%" y="1909" width="0.0289%" height="15" fill="rgb(228,208,7)" fg:x="335" fg:w="1"/><text x="9.9349%" y="1919.50"></text></g><g><title>[exchange-matching-engine] (39 samples, 1.13%)</title><rect x="8.6152%" y="1925" width="1.1275%" height="15" fill="rgb(244,45,10)" fg:x="298" fg:w="39"/><text x="8.8652%" y="1935.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.03%)</title><rect x="9.7138%" y="1909" width="0.0289%" height="15" fill="rgb(207,125,25)" fg:x="336" fg:w="1"/><text x="9.9638%" y="1919.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.17%)</title><rect x="9.7427%" y="1925" width="0.1735%" height="15" fill="rgb(210,195,18)" fg:x="337" fg:w="6"/><text x="9.9927%" y="1935.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="9.8873%" y="1909" width="0.0289%" height="15" fill="rgb(249,80,12)" fg:x="342" fg:w="1"/><text x="10.1373%" y="1919.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="9.8873%" y="1893" width="0.0289%" height="15" fill="rgb(221,65,9)" fg:x="342" fg:w="1"/><text x="10.1373%" y="1903.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="9.8873%" y="1877" width="0.0289%" height="15" fill="rgb(235,49,36)" fg:x="342" fg:w="1"/><text x="10.1373%" y="1887.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="9.8873%" y="1861" width="0.0289%" height="15" fill="rgb(225,32,20)" fg:x="342" fg:w="1"/><text x="10.1373%" y="1871.50"></text></g><g><title>[libc.so.6] (5 samples, 0.14%)</title><rect x="9.9162%" y="1925" width="0.1446%" height="15" fill="rgb(215,141,46)" fg:x="343" fg:w="5"/><text x="10.1662%" y="1935.50"></text></g><g><title>[libc.so.6] (2 samples, 0.06%)</title><rect x="10.0029%" y="1909" width="0.0578%" height="15" fill="rgb(250,160,47)" fg:x="346" fg:w="2"/><text x="10.2529%" y="1919.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="10.0607%" y="1909" width="0.0289%" height="15" fill="rgb(216,222,40)" fg:x="348" fg:w="1"/><text x="10.3107%" y="1919.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.03%)</title><rect x="10.0896%" y="1909" width="0.0289%" height="15" fill="rgb(234,217,39)" fg:x="349" fg:w="1"/><text x="10.3396%" y="1919.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.03%)</title><rect x="10.1185%" y="1909" width="0.0289%" height="15" fill="rgb(207,178,40)" fg:x="350" fg:w="1"/><text x="10.3685%" y="1919.50"></text></g><g><title>&lt;alloc::string::String as redis::types::FromRedisValue&gt;::from_redis_value (1 samples, 0.03%)</title><rect x="10.1474%" y="1909" width="0.0289%" height="15" fill="rgb(221,136,13)" fg:x="351" fg:w="1"/><text x="10.3974%" y="1919.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.09%)</title><rect x="10.1764%" y="1909" width="0.0867%" height="15" fill="rgb(249,199,10)" fg:x="352" fg:w="3"/><text x="10.4264%" y="1919.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (3 samples, 0.09%)</title><rect x="10.1764%" y="1893" width="0.0867%" height="15" fill="rgb(249,222,13)" fg:x="352" fg:w="3"/><text x="10.4264%" y="1903.50"></text></g><g><title>&lt;core::iter::adapters::scan::Scan&lt;I,St,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.09%)</title><rect x="10.1764%" y="1877" width="0.0867%" height="15" fill="rgb(244,185,38)" fg:x="352" fg:w="3"/><text x="10.4264%" y="1887.50"></text></g><g><title>&lt;combine::parser::repeat::SuggestSizeHint&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.09%)</title><rect x="10.1764%" y="1861" width="0.0867%" height="15" fill="rgb(236,202,9)" fg:x="352" fg:w="3"/><text x="10.4264%" y="1871.50"></text></g><g><title>&lt;core::iter::adapters::inspect::Inspect&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.09%)</title><rect x="10.1764%" y="1845" width="0.0867%" height="15" fill="rgb(250,229,37)" fg:x="352" fg:w="3"/><text x="10.4264%" y="1855.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.09%)</title><rect x="10.1764%" y="1829" width="0.0867%" height="15" fill="rgb(206,174,23)" fg:x="352" fg:w="3"/><text x="10.4264%" y="1839.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.09%)</title><rect x="10.1764%" y="1813" width="0.0867%" height="15" fill="rgb(211,33,43)" fg:x="352" fg:w="3"/><text x="10.4264%" y="1823.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as redis::types::FromRedisValue&gt;::from_redis_value (1 samples, 0.03%)</title><rect x="10.2631%" y="1909" width="0.0289%" height="15" fill="rgb(245,58,50)" fg:x="355" fg:w="1"/><text x="10.5131%" y="1919.50"></text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (7 samples, 0.20%)</title><rect x="10.2920%" y="1909" width="0.2024%" height="15" fill="rgb(244,68,36)" fg:x="356" fg:w="7"/><text x="10.5420%" y="1919.50"></text></g><g><title>&lt;combine::parser::combinator::Map&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (1 samples, 0.03%)</title><rect x="10.4655%" y="1893" width="0.0289%" height="15" fill="rgb(232,229,15)" fg:x="362" fg:w="1"/><text x="10.7155%" y="1903.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.03%)</title><rect x="10.4655%" y="1877" width="0.0289%" height="15" fill="rgb(254,30,23)" fg:x="362" fg:w="1"/><text x="10.7155%" y="1887.50"></text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (1 samples, 0.03%)</title><rect x="10.4655%" y="1861" width="0.0289%" height="15" fill="rgb(235,160,14)" fg:x="362" fg:w="1"/><text x="10.7155%" y="1871.50"></text></g><g><title>&lt;combine::parser::sequence::ThenPartial&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (1 samples, 0.03%)</title><rect x="10.4655%" y="1845" width="0.0289%" height="15" fill="rgb(212,155,44)" fg:x="362" fg:w="1"/><text x="10.7155%" y="1855.50"></text></g><g><title>combine::parser::Parser::parse_committed_mode (1 samples, 0.03%)</title><rect x="10.4655%" y="1829" width="0.0289%" height="15" fill="rgb(226,2,50)" fg:x="362" fg:w="1"/><text x="10.7155%" y="1839.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (1 samples, 0.03%)</title><rect x="10.4655%" y="1813" width="0.0289%" height="15" fill="rgb(234,177,6)" fg:x="362" fg:w="1"/><text x="10.7155%" y="1823.50"></text></g><g><title>&lt;combine::parser::combinator::Either&lt;L,R&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (1 samples, 0.03%)</title><rect x="10.4655%" y="1797" width="0.0289%" height="15" fill="rgb(217,24,9)" fg:x="362" fg:w="1"/><text x="10.7155%" y="1807.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.03%)</title><rect x="10.4655%" y="1781" width="0.0289%" height="15" fill="rgb(220,13,46)" fg:x="362" fg:w="1"/><text x="10.7155%" y="1791.50"></text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (1 samples, 0.03%)</title><rect x="10.4655%" y="1765" width="0.0289%" height="15" fill="rgb(239,221,27)" fg:x="362" fg:w="1"/><text x="10.7155%" y="1775.50"></text></g><g><title>&lt;combine::parser::sequence::Skip&lt;P1,P2&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (1 samples, 0.03%)</title><rect x="10.4655%" y="1749" width="0.0289%" height="15" fill="rgb(222,198,25)" fg:x="362" fg:w="1"/><text x="10.7155%" y="1759.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.03%)</title><rect x="10.4655%" y="1733" width="0.0289%" height="15" fill="rgb(211,99,13)" fg:x="362" fg:w="1"/><text x="10.7155%" y="1743.50"></text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (1 samples, 0.03%)</title><rect x="10.4655%" y="1717" width="0.0289%" height="15" fill="rgb(232,111,31)" fg:x="362" fg:w="1"/><text x="10.7155%" y="1727.50"></text></g><g><title>combine::parser::sequence::&lt;impl combine::parser::Parser&lt;Input&gt; for (A,B)&gt;::parse_mode_impl (1 samples, 0.03%)</title><rect x="10.4655%" y="1701" width="0.0289%" height="15" fill="rgb(245,82,37)" fg:x="362" fg:w="1"/><text x="10.7155%" y="1711.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.03%)</title><rect x="10.4655%" y="1685" width="0.0289%" height="15" fill="rgb(227,149,46)" fg:x="362" fg:w="1"/><text x="10.7155%" y="1695.50"></text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (1 samples, 0.03%)</title><rect x="10.4655%" y="1669" width="0.0289%" height="15" fill="rgb(218,36,50)" fg:x="362" fg:w="1"/><text x="10.7155%" y="1679.50"></text></g><g><title>&lt;combine::parser::combinator::Ignore&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (1 samples, 0.03%)</title><rect x="10.4655%" y="1653" width="0.0289%" height="15" fill="rgb(226,80,48)" fg:x="362" fg:w="1"/><text x="10.7155%" y="1663.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.03%)</title><rect x="10.4655%" y="1637" width="0.0289%" height="15" fill="rgb(238,224,15)" fg:x="362" fg:w="1"/><text x="10.7155%" y="1647.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (1 samples, 0.03%)</title><rect x="10.4655%" y="1621" width="0.0289%" height="15" fill="rgb(241,136,10)" fg:x="362" fg:w="1"/><text x="10.7155%" y="1631.50"></text></g><g><title>&lt;combine::parser::error::Expected&lt;P,S&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (1 samples, 0.03%)</title><rect x="10.4655%" y="1605" width="0.0289%" height="15" fill="rgb(208,32,45)" fg:x="362" fg:w="1"/><text x="10.7155%" y="1615.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.03%)</title><rect x="10.4655%" y="1589" width="0.0289%" height="15" fill="rgb(207,135,9)" fg:x="362" fg:w="1"/><text x="10.7155%" y="1599.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (1 samples, 0.03%)</title><rect x="10.4655%" y="1573" width="0.0289%" height="15" fill="rgb(206,86,44)" fg:x="362" fg:w="1"/><text x="10.7155%" y="1583.50"></text></g><g><title>&lt;combine::parser::combinator::NoPartial&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (1 samples, 0.03%)</title><rect x="10.4655%" y="1557" width="0.0289%" height="15" fill="rgb(245,177,15)" fg:x="362" fg:w="1"/><text x="10.7155%" y="1567.50"></text></g><g><title>&lt;combine::parser::sequence::With&lt;P1,P2&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_lazy (1 samples, 0.03%)</title><rect x="10.4655%" y="1541" width="0.0289%" height="15" fill="rgb(206,64,50)" fg:x="362" fg:w="1"/><text x="10.7155%" y="1551.50"></text></g><g><title>combine::parser::Parser::parse_lazy (1 samples, 0.03%)</title><rect x="10.4655%" y="1525" width="0.0289%" height="15" fill="rgb(234,36,40)" fg:x="362" fg:w="1"/><text x="10.7155%" y="1535.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (7 samples, 0.20%)</title><rect x="10.4944%" y="1909" width="0.2024%" height="15" fill="rgb(213,64,8)" fg:x="363" fg:w="7"/><text x="10.7444%" y="1919.50"></text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_first (2 samples, 0.06%)</title><rect x="10.6967%" y="1909" width="0.0578%" height="15" fill="rgb(210,75,36)" fg:x="370" fg:w="2"/><text x="10.9467%" y="1919.50"></text></g><g><title>&lt;combine::parser::range::Recognize&lt;Input,P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (7 samples, 0.20%)</title><rect x="10.7546%" y="1909" width="0.2024%" height="15" fill="rgb(229,88,21)" fg:x="372" fg:w="7"/><text x="11.0046%" y="1919.50"></text></g><g><title>&lt;combine::parser::repeat::Iter&lt;Input,P,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.09%)</title><rect x="10.9569%" y="1909" width="0.0867%" height="15" fill="rgb(252,204,47)" fg:x="379" fg:w="3"/><text x="11.2069%" y="1919.50"></text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.06%)</title><rect x="10.9858%" y="1893" width="0.0578%" height="15" fill="rgb(208,77,27)" fg:x="380" fg:w="2"/><text x="11.2358%" y="1903.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (2 samples, 0.06%)</title><rect x="10.9858%" y="1877" width="0.0578%" height="15" fill="rgb(221,76,26)" fg:x="380" fg:w="2"/><text x="11.2358%" y="1887.50"></text></g><g><title>combine::parser::Parser::parse_mode_impl (2 samples, 0.06%)</title><rect x="10.9858%" y="1861" width="0.0578%" height="15" fill="rgb(225,139,18)" fg:x="380" fg:w="2"/><text x="11.2358%" y="1871.50"></text></g><g><title>&lt;&amp;mut P as combine::parser::Parser&lt;Input&gt;&gt;::parse_first (2 samples, 0.06%)</title><rect x="10.9858%" y="1845" width="0.0578%" height="15" fill="rgb(230,137,11)" fg:x="380" fg:w="2"/><text x="11.2358%" y="1855.50"></text></g><g><title>&lt;combine::parser::combinator::Opaque&lt;F,Input,O,S&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_first (2 samples, 0.06%)</title><rect x="10.9858%" y="1829" width="0.0578%" height="15" fill="rgb(212,28,1)" fg:x="380" fg:w="2"/><text x="11.2358%" y="1839.50"></text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.06%)</title><rect x="10.9858%" y="1813" width="0.0578%" height="15" fill="rgb(248,164,17)" fg:x="380" fg:w="2"/><text x="11.2358%" y="1823.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (2 samples, 0.06%)</title><rect x="10.9858%" y="1797" width="0.0578%" height="15" fill="rgb(222,171,42)" fg:x="380" fg:w="2"/><text x="11.2358%" y="1807.50"></text></g><g><title>&lt;combine::parser::combinator::Opaque&lt;F,Input,O,S&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (2 samples, 0.06%)</title><rect x="10.9858%" y="1781" width="0.0578%" height="15" fill="rgb(243,84,45)" fg:x="380" fg:w="2"/><text x="11.2358%" y="1791.50"></text></g><g><title>redis::parser::value::{{closure}} (2 samples, 0.06%)</title><rect x="10.9858%" y="1765" width="0.0578%" height="15" fill="rgb(252,49,23)" fg:x="380" fg:w="2"/><text x="11.2358%" y="1775.50"></text></g><g><title>&lt;combine::parser::combinator::Opaque&lt;F,Input,O,S&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl::{{closure}} (2 samples, 0.06%)</title><rect x="10.9858%" y="1749" width="0.0578%" height="15" fill="rgb(215,19,7)" fg:x="380" fg:w="2"/><text x="11.2358%" y="1759.50"></text></g><g><title>&lt;combine::parser::sequence::ThenPartial&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (5 samples, 0.14%)</title><rect x="11.0437%" y="1909" width="0.1446%" height="15" fill="rgb(238,81,41)" fg:x="382" fg:w="5"/><text x="11.2937%" y="1919.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.09%)</title><rect x="11.1882%" y="1909" width="0.0867%" height="15" fill="rgb(210,199,37)" fg:x="387" fg:w="3"/><text x="11.4382%" y="1919.50"></text></g><g><title>&lt;redis::connection::Connection as redis::connection::ConnectionLike&gt;::check_connection (1 samples, 0.03%)</title><rect x="11.2749%" y="1909" width="0.0289%" height="15" fill="rgb(244,192,49)" fg:x="390" fg:w="1"/><text x="11.5249%" y="1919.50"></text></g><g><title>redis::cmd::Cmd::query (1 samples, 0.03%)</title><rect x="11.2749%" y="1893" width="0.0289%" height="15" fill="rgb(226,211,11)" fg:x="390" fg:w="1"/><text x="11.5249%" y="1903.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.03%)</title><rect x="11.2749%" y="1877" width="0.0289%" height="15" fill="rgb(236,162,54)" fg:x="390" fg:w="1"/><text x="11.5249%" y="1887.50"></text></g><g><title>&lt;redis::parser::ResultExtend&lt;T,E&gt; as core::iter::traits::collect::Extend&lt;core::result::Result&lt;U,E&gt;&gt;&gt;::extend (1 samples, 0.03%)</title><rect x="11.3038%" y="1909" width="0.0289%" height="15" fill="rgb(220,229,9)" fg:x="391" fg:w="1"/><text x="11.5538%" y="1919.50"></text></g><g><title>&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;A,B,C,D,E,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (5 samples, 0.14%)</title><rect x="11.3328%" y="1909" width="0.1446%" height="15" fill="rgb(250,87,22)" fg:x="392" fg:w="5"/><text x="11.5828%" y="1919.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (3 samples, 0.09%)</title><rect x="11.4773%" y="1909" width="0.0867%" height="15" fill="rgb(239,43,17)" fg:x="397" fg:w="3"/><text x="11.7273%" y="1919.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (1 samples, 0.03%)</title><rect x="11.5640%" y="1893" width="0.0289%" height="15" fill="rgb(231,177,25)" fg:x="400" fg:w="1"/><text x="11.8140%" y="1903.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="11.5640%" y="1877" width="0.0289%" height="15" fill="rgb(219,179,1)" fg:x="400" fg:w="1"/><text x="11.8140%" y="1887.50"></text></g><g><title>combine::stream::decode (1 samples, 0.03%)</title><rect x="11.5929%" y="1893" width="0.0289%" height="15" fill="rgb(238,219,53)" fg:x="401" fg:w="1"/><text x="11.8429%" y="1903.50"></text></g><g><title>core::ptr::drop_in_place&lt;combine::stream::easy::Errors&lt;u8,&amp;[u8],combine::stream::PointerOffset&lt;[u8]&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="11.5929%" y="1877" width="0.0289%" height="15" fill="rgb(232,167,36)" fg:x="401" fg:w="1"/><text x="11.8429%" y="1887.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;combine::stream::easy::Error&lt;u8,&amp;[u8]&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="11.5929%" y="1861" width="0.0289%" height="15" fill="rgb(244,19,51)" fg:x="401" fg:w="1"/><text x="11.8429%" y="1871.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="11.5929%" y="1845" width="0.0289%" height="15" fill="rgb(224,6,22)" fg:x="401" fg:w="1"/><text x="11.8429%" y="1855.50"></text></g><g><title>core::ptr::drop_in_place&lt;[combine::stream::easy::Error&lt;u8,&amp;[u8]&gt;]&gt; (1 samples, 0.03%)</title><rect x="11.5929%" y="1829" width="0.0289%" height="15" fill="rgb(224,145,5)" fg:x="401" fg:w="1"/><text x="11.8429%" y="1839.50"></text></g><g><title>[exchange-matching-engine] (3 samples, 0.09%)</title><rect x="11.5640%" y="1909" width="0.0867%" height="15" fill="rgb(234,130,49)" fg:x="400" fg:w="3"/><text x="11.8140%" y="1919.50"></text></g><g><title>redis::parser::Parser::parse_value (1 samples, 0.03%)</title><rect x="11.6219%" y="1893" width="0.0289%" height="15" fill="rgb(254,6,2)" fg:x="402" fg:w="1"/><text x="11.8719%" y="1903.50"></text></g><g><title>[libc.so.6] (29 samples, 0.84%)</title><rect x="11.6508%" y="1909" width="0.8384%" height="15" fill="rgb(208,96,46)" fg:x="403" fg:w="29"/><text x="11.9008%" y="1919.50"></text></g><g><title>__rdl_alloc (7 samples, 0.20%)</title><rect x="12.4892%" y="1909" width="0.2024%" height="15" fill="rgb(239,3,39)" fg:x="432" fg:w="7"/><text x="12.7392%" y="1919.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.09%)</title><rect x="12.6048%" y="1893" width="0.0867%" height="15" fill="rgb(233,210,1)" fg:x="436" fg:w="3"/><text x="12.8548%" y="1903.50"></text></g><g><title>__rdl_realloc (1 samples, 0.03%)</title><rect x="12.6915%" y="1909" width="0.0289%" height="15" fill="rgb(244,137,37)" fg:x="439" fg:w="1"/><text x="12.9415%" y="1919.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.06%)</title><rect x="12.7204%" y="1909" width="0.0578%" height="15" fill="rgb(240,136,2)" fg:x="440" fg:w="2"/><text x="12.9704%" y="1919.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.06%)</title><rect x="12.7204%" y="1893" width="0.0578%" height="15" fill="rgb(239,18,37)" fg:x="440" fg:w="2"/><text x="12.9704%" y="1903.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.03%)</title><rect x="12.7493%" y="1877" width="0.0289%" height="15" fill="rgb(218,185,22)" fg:x="441" fg:w="1"/><text x="12.9993%" y="1887.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.03%)</title><rect x="12.7493%" y="1861" width="0.0289%" height="15" fill="rgb(225,218,4)" fg:x="441" fg:w="1"/><text x="12.9993%" y="1871.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="12.7783%" y="1909" width="0.0289%" height="15" fill="rgb(230,182,32)" fg:x="442" fg:w="1"/><text x="13.0283%" y="1919.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="12.7783%" y="1893" width="0.0289%" height="15" fill="rgb(242,56,43)" fg:x="442" fg:w="1"/><text x="13.0283%" y="1903.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.03%)</title><rect x="12.7783%" y="1877" width="0.0289%" height="15" fill="rgb(233,99,24)" fg:x="442" fg:w="1"/><text x="13.0283%" y="1887.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.03%)</title><rect x="12.7783%" y="1861" width="0.0289%" height="15" fill="rgb(234,209,42)" fg:x="442" fg:w="1"/><text x="13.0283%" y="1871.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.09%)</title><rect x="12.8072%" y="1909" width="0.0867%" height="15" fill="rgb(227,7,12)" fg:x="443" fg:w="3"/><text x="13.0572%" y="1919.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.06%)</title><rect x="12.8361%" y="1893" width="0.0578%" height="15" fill="rgb(245,203,43)" fg:x="444" fg:w="2"/><text x="13.0861%" y="1903.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.06%)</title><rect x="12.8361%" y="1877" width="0.0578%" height="15" fill="rgb(238,205,33)" fg:x="444" fg:w="2"/><text x="13.0861%" y="1887.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.06%)</title><rect x="12.8361%" y="1861" width="0.0578%" height="15" fill="rgb(231,56,7)" fg:x="444" fg:w="2"/><text x="13.0861%" y="1871.50"></text></g><g><title>cfree (3 samples, 0.09%)</title><rect x="12.8939%" y="1909" width="0.0867%" height="15" fill="rgb(244,186,29)" fg:x="446" fg:w="3"/><text x="13.1439%" y="1919.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.03%)</title><rect x="13.4432%" y="1733" width="0.0289%" height="15" fill="rgb(234,111,31)" fg:x="465" fg:w="1"/><text x="13.6932%" y="1743.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (1 samples, 0.03%)</title><rect x="13.4432%" y="1717" width="0.0289%" height="15" fill="rgb(241,149,10)" fg:x="465" fg:w="1"/><text x="13.6932%" y="1727.50"></text></g><g><title>combine::parser::Parser::parse_mode_impl (1 samples, 0.03%)</title><rect x="13.4432%" y="1701" width="0.0289%" height="15" fill="rgb(249,206,44)" fg:x="465" fg:w="1"/><text x="13.6932%" y="1711.50"></text></g><g><title>combine::parser::Parser::parse_first (1 samples, 0.03%)</title><rect x="13.4432%" y="1685" width="0.0289%" height="15" fill="rgb(251,153,30)" fg:x="465" fg:w="1"/><text x="13.6932%" y="1695.50"></text></g><g><title>combine::parser::Parser::parse_partial (1 samples, 0.03%)</title><rect x="13.4432%" y="1669" width="0.0289%" height="15" fill="rgb(239,152,38)" fg:x="465" fg:w="1"/><text x="13.6932%" y="1679.50"></text></g><g><title>&lt;combine::parser::range::Take&lt;Input&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_lazy (1 samples, 0.03%)</title><rect x="13.4432%" y="1653" width="0.0289%" height="15" fill="rgb(249,139,47)" fg:x="465" fg:w="1"/><text x="13.6932%" y="1663.50"></text></g><g><title>combine::stream::uncons_range (1 samples, 0.03%)</title><rect x="13.4432%" y="1637" width="0.0289%" height="15" fill="rgb(244,64,35)" fg:x="465" fg:w="1"/><text x="13.6932%" y="1647.50"></text></g><g><title>combine::stream::wrap_stream_error (1 samples, 0.03%)</title><rect x="13.4432%" y="1621" width="0.0289%" height="15" fill="rgb(216,46,15)" fg:x="465" fg:w="1"/><text x="13.6932%" y="1631.50"></text></g><g><title>&lt;combine::stream::easy::Errors&lt;Item,Range,Position&gt; as combine::error::ParseError&lt;Item,Range,Position&gt;&gt;::from_error (1 samples, 0.03%)</title><rect x="13.4432%" y="1605" width="0.0289%" height="15" fill="rgb(250,74,19)" fg:x="465" fg:w="1"/><text x="13.6932%" y="1615.50"></text></g><g><title>combine::stream::easy::Errors&lt;T,R,P&gt;::new (1 samples, 0.03%)</title><rect x="13.4432%" y="1589" width="0.0289%" height="15" fill="rgb(249,42,33)" fg:x="465" fg:w="1"/><text x="13.6932%" y="1599.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.03%)</title><rect x="13.4432%" y="1573" width="0.0289%" height="15" fill="rgb(242,149,17)" fg:x="465" fg:w="1"/><text x="13.6932%" y="1583.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="13.4432%" y="1557" width="0.0289%" height="15" fill="rgb(244,29,21)" fg:x="465" fg:w="1"/><text x="13.6932%" y="1567.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="13.4432%" y="1541" width="0.0289%" height="15" fill="rgb(220,130,37)" fg:x="465" fg:w="1"/><text x="13.6932%" y="1551.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="13.4432%" y="1525" width="0.0289%" height="15" fill="rgb(211,67,2)" fg:x="465" fg:w="1"/><text x="13.6932%" y="1535.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (18 samples, 0.52%)</title><rect x="12.9806%" y="1909" width="0.5204%" height="15" fill="rgb(235,68,52)" fg:x="449" fg:w="18"/><text x="13.2306%" y="1919.50"></text></g><g><title>&lt;combine::parser::combinator::Either&lt;L,R&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (2 samples, 0.06%)</title><rect x="13.4432%" y="1893" width="0.0578%" height="15" fill="rgb(246,142,3)" fg:x="465" fg:w="2"/><text x="13.6932%" y="1903.50"></text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.06%)</title><rect x="13.4432%" y="1877" width="0.0578%" height="15" fill="rgb(241,25,7)" fg:x="465" fg:w="2"/><text x="13.6932%" y="1887.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (2 samples, 0.06%)</title><rect x="13.4432%" y="1861" width="0.0578%" height="15" fill="rgb(242,119,39)" fg:x="465" fg:w="2"/><text x="13.6932%" y="1871.50"></text></g><g><title>&lt;combine::parser::sequence::Skip&lt;P1,P2&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (2 samples, 0.06%)</title><rect x="13.4432%" y="1845" width="0.0578%" height="15" fill="rgb(241,98,45)" fg:x="465" fg:w="2"/><text x="13.6932%" y="1855.50"></text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.06%)</title><rect x="13.4432%" y="1829" width="0.0578%" height="15" fill="rgb(254,28,30)" fg:x="465" fg:w="2"/><text x="13.6932%" y="1839.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (2 samples, 0.06%)</title><rect x="13.4432%" y="1813" width="0.0578%" height="15" fill="rgb(241,142,54)" fg:x="465" fg:w="2"/><text x="13.6932%" y="1823.50"></text></g><g><title>combine::parser::sequence::&lt;impl combine::parser::Parser&lt;Input&gt; for (A,B)&gt;::parse_mode_impl (2 samples, 0.06%)</title><rect x="13.4432%" y="1797" width="0.0578%" height="15" fill="rgb(222,85,15)" fg:x="465" fg:w="2"/><text x="13.6932%" y="1807.50"></text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.06%)</title><rect x="13.4432%" y="1781" width="0.0578%" height="15" fill="rgb(210,85,47)" fg:x="465" fg:w="2"/><text x="13.6932%" y="1791.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (2 samples, 0.06%)</title><rect x="13.4432%" y="1765" width="0.0578%" height="15" fill="rgb(224,206,25)" fg:x="465" fg:w="2"/><text x="13.6932%" y="1775.50"></text></g><g><title>&lt;combine::parser::combinator::Map&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (2 samples, 0.06%)</title><rect x="13.4432%" y="1749" width="0.0578%" height="15" fill="rgb(243,201,19)" fg:x="465" fg:w="2"/><text x="13.6932%" y="1759.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (1 samples, 0.03%)</title><rect x="13.4721%" y="1733" width="0.0289%" height="15" fill="rgb(236,59,4)" fg:x="466" fg:w="1"/><text x="13.7221%" y="1743.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.03%)</title><rect x="13.4721%" y="1717" width="0.0289%" height="15" fill="rgb(254,179,45)" fg:x="466" fg:w="1"/><text x="13.7221%" y="1727.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.03%)</title><rect x="13.4721%" y="1701" width="0.0289%" height="15" fill="rgb(226,14,10)" fg:x="466" fg:w="1"/><text x="13.7221%" y="1711.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.03%)</title><rect x="13.4721%" y="1685" width="0.0289%" height="15" fill="rgb(244,27,41)" fg:x="466" fg:w="1"/><text x="13.7221%" y="1695.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.03%)</title><rect x="13.4721%" y="1669" width="0.0289%" height="15" fill="rgb(235,35,32)" fg:x="466" fg:w="1"/><text x="13.7221%" y="1679.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.03%)</title><rect x="13.4721%" y="1653" width="0.0289%" height="15" fill="rgb(218,68,31)" fg:x="466" fg:w="1"/><text x="13.7221%" y="1663.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="13.4721%" y="1637" width="0.0289%" height="15" fill="rgb(207,120,37)" fg:x="466" fg:w="1"/><text x="13.7221%" y="1647.50"></text></g><g><title>combine::parser::Parser::parse_with_state (8 samples, 0.23%)</title><rect x="13.5010%" y="1909" width="0.2313%" height="15" fill="rgb(227,98,0)" fg:x="467" fg:w="8"/><text x="13.7510%" y="1919.50"></text></g><g><title>combine::parser::byte::memslice (2 samples, 0.06%)</title><rect x="13.7323%" y="1909" width="0.0578%" height="15" fill="rgb(207,7,3)" fg:x="475" fg:w="2"/><text x="13.9823%" y="1919.50"></text></g><g><title>&lt;memchr::memchr::Memchr as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="13.7612%" y="1893" width="0.0289%" height="15" fill="rgb(206,98,19)" fg:x="476" fg:w="1"/><text x="14.0112%" y="1903.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (1 samples, 0.03%)</title><rect x="13.7612%" y="1877" width="0.0289%" height="15" fill="rgb(217,5,26)" fg:x="476" fg:w="1"/><text x="14.0112%" y="1887.50"></text></g><g><title>&lt;memchr::memchr::Memchr as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (1 samples, 0.03%)</title><rect x="13.7612%" y="1861" width="0.0289%" height="15" fill="rgb(235,190,38)" fg:x="476" fg:w="1"/><text x="14.0112%" y="1871.50"></text></g><g><title>memchr::memchr::memchr_raw (1 samples, 0.03%)</title><rect x="13.7612%" y="1845" width="0.0289%" height="15" fill="rgb(247,86,24)" fg:x="476" fg:w="1"/><text x="14.0112%" y="1855.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (1 samples, 0.03%)</title><rect x="13.7612%" y="1829" width="0.0289%" height="15" fill="rgb(205,101,16)" fg:x="476" fg:w="1"/><text x="14.0112%" y="1839.50"></text></g><g><title>[exchange-matching-engine] (1 samples, 0.03%)</title><rect x="13.7612%" y="1813" width="0.0289%" height="15" fill="rgb(246,168,33)" fg:x="476" fg:w="1"/><text x="14.0112%" y="1823.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (1 samples, 0.03%)</title><rect x="13.7612%" y="1797" width="0.0289%" height="15" fill="rgb(231,114,1)" fg:x="476" fg:w="1"/><text x="14.0112%" y="1807.50"></text></g><g><title>combine::parser::sequence::&lt;impl combine::parser::Parser&lt;Input&gt; for (A,B)&gt;::parse_first (13 samples, 0.38%)</title><rect x="13.7901%" y="1909" width="0.3758%" height="15" fill="rgb(207,184,53)" fg:x="477" fg:w="13"/><text x="14.0401%" y="1919.50"></text></g><g><title>combine::stream::easy::Errors&lt;T,R,P&gt;::add_error (3 samples, 0.09%)</title><rect x="14.1659%" y="1909" width="0.0867%" height="15" fill="rgb(224,95,51)" fg:x="490" fg:w="3"/><text x="14.4159%" y="1919.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (3 samples, 0.09%)</title><rect x="14.1659%" y="1893" width="0.0867%" height="15" fill="rgb(212,188,45)" fg:x="490" fg:w="3"/><text x="14.4159%" y="1903.50"></text></g><g><title>combine::stream::easy::Errors&lt;T,R,P&gt;::add_error::{{closure}} (3 samples, 0.09%)</title><rect x="14.1659%" y="1877" width="0.0867%" height="15" fill="rgb(223,154,38)" fg:x="490" fg:w="3"/><text x="14.4159%" y="1887.50"></text></g><g><title>core::cmp::PartialEq::ne (3 samples, 0.09%)</title><rect x="14.1659%" y="1861" width="0.0867%" height="15" fill="rgb(251,22,52)" fg:x="490" fg:w="3"/><text x="14.4159%" y="1871.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.03%)</title><rect x="14.2527%" y="1909" width="0.0289%" height="15" fill="rgb(229,209,22)" fg:x="493" fg:w="1"/><text x="14.5027%" y="1919.50"></text></g><g><title>core::fmt::write (4 samples, 0.12%)</title><rect x="14.2816%" y="1909" width="0.1156%" height="15" fill="rgb(234,138,34)" fg:x="494" fg:w="4"/><text x="14.5316%" y="1919.50"></text></g><g><title>core::num::from_str_radix (1 samples, 0.03%)</title><rect x="14.3972%" y="1909" width="0.0289%" height="15" fill="rgb(212,95,11)" fg:x="498" fg:w="1"/><text x="14.6472%" y="1919.50"></text></g><g><title>core::ptr::drop_in_place&lt;combine::parser::repeat::State&lt;combine::stream::easy::Errors&lt;u8,&amp;[u8],combine::stream::PointerOffset&lt;[u8]&gt;&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="14.4261%" y="1909" width="0.0289%" height="15" fill="rgb(240,179,47)" fg:x="499" fg:w="1"/><text x="14.6761%" y="1919.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redis::types::Value&gt;&gt; (1 samples, 0.03%)</title><rect x="14.4550%" y="1909" width="0.0289%" height="15" fill="rgb(240,163,11)" fg:x="500" fg:w="1"/><text x="14.7050%" y="1919.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (2 samples, 0.06%)</title><rect x="14.4840%" y="1909" width="0.0578%" height="15" fill="rgb(236,37,12)" fg:x="501" fg:w="2"/><text x="14.7340%" y="1919.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (4 samples, 0.12%)</title><rect x="14.5418%" y="1909" width="0.1156%" height="15" fill="rgb(232,164,16)" fg:x="503" fg:w="4"/><text x="14.7918%" y="1919.50"></text></g><g><title>core::str::converts::from_utf8 (3 samples, 0.09%)</title><rect x="14.6574%" y="1909" width="0.0867%" height="15" fill="rgb(244,205,15)" fg:x="507" fg:w="3"/><text x="14.9074%" y="1919.50"></text></g><g><title>exchange_lib::commands::_::&lt;impl serde::de::Deserialize for exchange_lib::commands::OrderCommand&gt;::deserialize (2 samples, 0.06%)</title><rect x="14.7441%" y="1909" width="0.0578%" height="15" fill="rgb(223,117,47)" fg:x="510" fg:w="2"/><text x="14.9941%" y="1919.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_enum (1 samples, 0.03%)</title><rect x="14.7731%" y="1893" width="0.0289%" height="15" fill="rgb(244,107,35)" fg:x="511" fg:w="1"/><text x="15.0231%" y="1903.50"></text></g><g><title>&lt;exchange_lib::commands::_::&lt;impl serde::de::Deserialize for exchange_lib::commands::OrderCommand&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (1 samples, 0.03%)</title><rect x="14.7731%" y="1877" width="0.0289%" height="15" fill="rgb(205,140,8)" fg:x="511" fg:w="1"/><text x="15.0231%" y="1887.50"></text></g><g><title>serde::de::VariantAccess::newtype_variant (1 samples, 0.03%)</title><rect x="14.7731%" y="1861" width="0.0289%" height="15" fill="rgb(228,84,46)" fg:x="511" fg:w="1"/><text x="15.0231%" y="1871.50"></text></g><g><title>&lt;serde_json::de::VariantAccess&lt;R&gt; as serde::de::VariantAccess&gt;::newtype_variant_seed (1 samples, 0.03%)</title><rect x="14.7731%" y="1845" width="0.0289%" height="15" fill="rgb(254,188,9)" fg:x="511" fg:w="1"/><text x="15.0231%" y="1855.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.03%)</title><rect x="14.7731%" y="1829" width="0.0289%" height="15" fill="rgb(206,112,54)" fg:x="511" fg:w="1"/><text x="15.0231%" y="1839.50"></text></g><g><title>exchange_lib::commands::_::&lt;impl serde::de::Deserialize for exchange_lib::commands::TradeCommand&gt;::deserialize (1 samples, 0.03%)</title><rect x="14.7731%" y="1813" width="0.0289%" height="15" fill="rgb(216,84,49)" fg:x="511" fg:w="1"/><text x="15.0231%" y="1823.50"></text></g><g><title>exchange_matching_engine::order_book_processor::OrderBookProcessor::run::{{closure}} (1 samples, 0.03%)</title><rect x="14.8598%" y="1893" width="0.0289%" height="15" fill="rgb(214,194,35)" fg:x="514" fg:w="1"/><text x="15.1098%" y="1903.50"></text></g><g><title>core::ptr::drop_in_place&lt;exchange_lib::message_queue::Message&gt; (1 samples, 0.03%)</title><rect x="14.8598%" y="1877" width="0.0289%" height="15" fill="rgb(249,28,3)" fg:x="514" fg:w="1"/><text x="15.1098%" y="1887.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.03%)</title><rect x="14.8598%" y="1861" width="0.0289%" height="15" fill="rgb(222,56,52)" fg:x="514" fg:w="1"/><text x="15.1098%" y="1871.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="14.8598%" y="1845" width="0.0289%" height="15" fill="rgb(245,217,50)" fg:x="514" fg:w="1"/><text x="15.1098%" y="1855.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="14.8598%" y="1829" width="0.0289%" height="15" fill="rgb(213,201,24)" fg:x="514" fg:w="1"/><text x="15.1098%" y="1839.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="14.8598%" y="1813" width="0.0289%" height="15" fill="rgb(248,116,28)" fg:x="514" fg:w="1"/><text x="15.1098%" y="1823.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="14.8598%" y="1797" width="0.0289%" height="15" fill="rgb(219,72,43)" fg:x="514" fg:w="1"/><text x="15.1098%" y="1807.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="14.8598%" y="1781" width="0.0289%" height="15" fill="rgb(209,138,14)" fg:x="514" fg:w="1"/><text x="15.1098%" y="1791.50"></text></g><g><title>exchange_lib::message_queue::pubsub_batching (5 samples, 0.14%)</title><rect x="14.8020%" y="1909" width="0.1446%" height="15" fill="rgb(222,18,33)" fg:x="512" fg:w="5"/><text x="15.0520%" y="1919.50"></text></g><g><title>serde_json::de::from_str (2 samples, 0.06%)</title><rect x="14.8887%" y="1893" width="0.0578%" height="15" fill="rgb(213,199,7)" fg:x="515" fg:w="2"/><text x="15.1387%" y="1903.50"></text></g><g><title>exchange_matching_engine::order_book::OrderBook::new (1 samples, 0.03%)</title><rect x="14.9465%" y="1909" width="0.0289%" height="15" fill="rgb(250,110,10)" fg:x="517" fg:w="1"/><text x="15.1965%" y="1919.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (1 samples, 0.03%)</title><rect x="14.9465%" y="1893" width="0.0289%" height="15" fill="rgb(248,123,6)" fg:x="517" fg:w="1"/><text x="15.1965%" y="1903.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (1 samples, 0.03%)</title><rect x="14.9465%" y="1877" width="0.0289%" height="15" fill="rgb(206,91,31)" fg:x="517" fg:w="1"/><text x="15.1965%" y="1887.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (1 samples, 0.03%)</title><rect x="14.9465%" y="1861" width="0.0289%" height="15" fill="rgb(211,154,13)" fg:x="517" fg:w="1"/><text x="15.1965%" y="1871.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="14.9465%" y="1845" width="0.0289%" height="15" fill="rgb(225,148,7)" fg:x="517" fg:w="1"/><text x="15.1965%" y="1855.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::fallible_with_capacity (1 samples, 0.03%)</title><rect x="14.9465%" y="1829" width="0.0289%" height="15" fill="rgb(220,160,43)" fg:x="517" fg:w="1"/><text x="15.1965%" y="1839.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1 samples, 0.03%)</title><rect x="14.9465%" y="1813" width="0.0289%" height="15" fill="rgb(213,52,39)" fg:x="517" fg:w="1"/><text x="15.1965%" y="1823.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1 samples, 0.03%)</title><rect x="14.9465%" y="1797" width="0.0289%" height="15" fill="rgb(243,137,7)" fg:x="517" fg:w="1"/><text x="15.1965%" y="1807.50"></text></g><g><title>core::intrinsics::write_bytes (1 samples, 0.03%)</title><rect x="14.9465%" y="1781" width="0.0289%" height="15" fill="rgb(230,79,13)" fg:x="517" fg:w="1"/><text x="15.1965%" y="1791.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="14.9465%" y="1765" width="0.0289%" height="15" fill="rgb(247,105,23)" fg:x="517" fg:w="1"/><text x="15.1965%" y="1775.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (8 samples, 0.23%)</title><rect x="15.0911%" y="1877" width="0.2313%" height="15" fill="rgb(223,179,41)" fg:x="522" fg:w="8"/><text x="15.3411%" y="1887.50"></text></g><g><title>__rust_dealloc (1 samples, 0.03%)</title><rect x="15.3513%" y="1781" width="0.0289%" height="15" fill="rgb(218,9,34)" fg:x="531" fg:w="1"/><text x="15.6013%" y="1791.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (13 samples, 0.38%)</title><rect x="15.3223%" y="1877" width="0.3758%" height="15" fill="rgb(222,106,8)" fg:x="530" fg:w="13"/><text x="15.5723%" y="1887.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (13 samples, 0.38%)</title><rect x="15.3223%" y="1861" width="0.3758%" height="15" fill="rgb(211,220,0)" fg:x="530" fg:w="13"/><text x="15.5723%" y="1871.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (13 samples, 0.38%)</title><rect x="15.3223%" y="1845" width="0.3758%" height="15" fill="rgb(229,52,16)" fg:x="530" fg:w="13"/><text x="15.5723%" y="1855.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.38%)</title><rect x="15.3223%" y="1829" width="0.3758%" height="15" fill="rgb(212,155,18)" fg:x="530" fg:w="13"/><text x="15.5723%" y="1839.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.38%)</title><rect x="15.3223%" y="1813" width="0.3758%" height="15" fill="rgb(242,21,14)" fg:x="530" fg:w="13"/><text x="15.5723%" y="1823.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.38%)</title><rect x="15.3223%" y="1797" width="0.3758%" height="15" fill="rgb(222,19,48)" fg:x="530" fg:w="13"/><text x="15.5723%" y="1807.50"></text></g><g><title>cfree (11 samples, 0.32%)</title><rect x="15.3802%" y="1781" width="0.3180%" height="15" fill="rgb(232,45,27)" fg:x="532" fg:w="11"/><text x="15.6302%" y="1791.50"></text></g><g><title>[libc.so.6] (7 samples, 0.20%)</title><rect x="15.4958%" y="1765" width="0.2024%" height="15" fill="rgb(249,103,42)" fg:x="536" fg:w="7"/><text x="15.7458%" y="1775.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="15.7271%" y="1861" width="0.0289%" height="15" fill="rgb(246,81,33)" fg:x="544" fg:w="1"/><text x="15.9771%" y="1871.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="15.7271%" y="1845" width="0.0289%" height="15" fill="rgb(252,33,42)" fg:x="544" fg:w="1"/><text x="15.9771%" y="1855.50"></text></g><g><title>__rust_dealloc (1 samples, 0.03%)</title><rect x="15.7560%" y="1861" width="0.0289%" height="15" fill="rgb(209,212,41)" fg:x="545" fg:w="1"/><text x="16.0060%" y="1871.50"></text></g><g><title>cfree (15 samples, 0.43%)</title><rect x="15.7849%" y="1861" width="0.4337%" height="15" fill="rgb(207,154,6)" fg:x="546" fg:w="15"/><text x="16.0349%" y="1871.50"></text></g><g><title>[libc.so.6] (7 samples, 0.20%)</title><rect x="16.0162%" y="1845" width="0.2024%" height="15" fill="rgb(223,64,47)" fg:x="554" fg:w="7"/><text x="16.2662%" y="1855.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::connection::Msg&gt; (21 samples, 0.61%)</title><rect x="15.6982%" y="1877" width="0.6071%" height="15" fill="rgb(211,161,38)" fg:x="543" fg:w="21"/><text x="15.9482%" y="1887.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (3 samples, 0.09%)</title><rect x="16.2186%" y="1861" width="0.0867%" height="15" fill="rgb(219,138,40)" fg:x="561" fg:w="3"/><text x="16.4686%" y="1871.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;redis::cmd::Arg&lt;usize&gt;&gt;&gt; (6 samples, 0.17%)</title><rect x="16.3053%" y="1797" width="0.1735%" height="15" fill="rgb(241,228,46)" fg:x="564" fg:w="6"/><text x="16.5553%" y="1807.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;redis::cmd::Arg&lt;usize&gt;&gt;&gt; (6 samples, 0.17%)</title><rect x="16.3053%" y="1781" width="0.1735%" height="15" fill="rgb(223,209,38)" fg:x="564" fg:w="6"/><text x="16.5553%" y="1791.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.17%)</title><rect x="16.3053%" y="1765" width="0.1735%" height="15" fill="rgb(236,164,45)" fg:x="564" fg:w="6"/><text x="16.5553%" y="1775.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.17%)</title><rect x="16.3053%" y="1749" width="0.1735%" height="15" fill="rgb(231,15,5)" fg:x="564" fg:w="6"/><text x="16.5553%" y="1759.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.17%)</title><rect x="16.3053%" y="1733" width="0.1735%" height="15" fill="rgb(252,35,15)" fg:x="564" fg:w="6"/><text x="16.5553%" y="1743.50"></text></g><g><title>cfree (6 samples, 0.17%)</title><rect x="16.3053%" y="1717" width="0.1735%" height="15" fill="rgb(248,181,18)" fg:x="564" fg:w="6"/><text x="16.5553%" y="1727.50"></text></g><g><title>[libc.so.6] (4 samples, 0.12%)</title><rect x="16.3631%" y="1701" width="0.1156%" height="15" fill="rgb(233,39,42)" fg:x="566" fg:w="4"/><text x="16.6131%" y="1711.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.61%)</title><rect x="16.3053%" y="1845" width="0.6071%" height="15" fill="rgb(238,110,33)" fg:x="564" fg:w="21"/><text x="16.5553%" y="1855.50"></text></g><g><title>core::ptr::drop_in_place&lt;[redis::cmd::Cmd]&gt; (21 samples, 0.61%)</title><rect x="16.3053%" y="1829" width="0.6071%" height="15" fill="rgb(233,195,10)" fg:x="564" fg:w="21"/><text x="16.5553%" y="1839.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::cmd::Cmd&gt; (21 samples, 0.61%)</title><rect x="16.3053%" y="1813" width="0.6071%" height="15" fill="rgb(254,105,3)" fg:x="564" fg:w="21"/><text x="16.5553%" y="1823.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (15 samples, 0.43%)</title><rect x="16.4788%" y="1797" width="0.4337%" height="15" fill="rgb(221,225,9)" fg:x="570" fg:w="15"/><text x="16.7288%" y="1807.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (15 samples, 0.43%)</title><rect x="16.4788%" y="1781" width="0.4337%" height="15" fill="rgb(224,227,45)" fg:x="570" fg:w="15"/><text x="16.7288%" y="1791.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.43%)</title><rect x="16.4788%" y="1765" width="0.4337%" height="15" fill="rgb(229,198,43)" fg:x="570" fg:w="15"/><text x="16.7288%" y="1775.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15 samples, 0.43%)</title><rect x="16.4788%" y="1749" width="0.4337%" height="15" fill="rgb(206,209,35)" fg:x="570" fg:w="15"/><text x="16.7288%" y="1759.50"></text></g><g><title>alloc::alloc::dealloc (15 samples, 0.43%)</title><rect x="16.4788%" y="1733" width="0.4337%" height="15" fill="rgb(245,195,53)" fg:x="570" fg:w="15"/><text x="16.7288%" y="1743.50"></text></g><g><title>cfree (15 samples, 0.43%)</title><rect x="16.4788%" y="1717" width="0.4337%" height="15" fill="rgb(240,92,26)" fg:x="570" fg:w="15"/><text x="16.7288%" y="1727.50"></text></g><g><title>[libc.so.6] (12 samples, 0.35%)</title><rect x="16.5655%" y="1701" width="0.3469%" height="15" fill="rgb(207,40,23)" fg:x="573" fg:w="12"/><text x="16.8155%" y="1711.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::pipeline::Pipeline&gt; (43 samples, 1.24%)</title><rect x="16.3053%" y="1877" width="1.2431%" height="15" fill="rgb(223,111,35)" fg:x="564" fg:w="43"/><text x="16.5553%" y="1887.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;redis::cmd::Cmd&gt;&gt; (43 samples, 1.24%)</title><rect x="16.3053%" y="1861" width="1.2431%" height="15" fill="rgb(229,147,28)" fg:x="564" fg:w="43"/><text x="16.5553%" y="1871.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;redis::cmd::Cmd&gt;&gt; (22 samples, 0.64%)</title><rect x="16.9124%" y="1845" width="0.6360%" height="15" fill="rgb(211,29,28)" fg:x="585" fg:w="22"/><text x="17.1624%" y="1855.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.64%)</title><rect x="16.9124%" y="1829" width="0.6360%" height="15" fill="rgb(228,72,33)" fg:x="585" fg:w="22"/><text x="17.1624%" y="1839.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (22 samples, 0.64%)</title><rect x="16.9124%" y="1813" width="0.6360%" height="15" fill="rgb(205,214,31)" fg:x="585" fg:w="22"/><text x="17.1624%" y="1823.50"></text></g><g><title>alloc::alloc::dealloc (22 samples, 0.64%)</title><rect x="16.9124%" y="1797" width="0.6360%" height="15" fill="rgb(224,111,15)" fg:x="585" fg:w="22"/><text x="17.1624%" y="1807.50"></text></g><g><title>cfree (22 samples, 0.64%)</title><rect x="16.9124%" y="1781" width="0.6360%" height="15" fill="rgb(253,21,26)" fg:x="585" fg:w="22"/><text x="17.1624%" y="1791.50"></text></g><g><title>[libc.so.6] (22 samples, 0.64%)</title><rect x="16.9124%" y="1765" width="0.6360%" height="15" fill="rgb(245,139,43)" fg:x="585" fg:w="22"/><text x="17.1624%" y="1775.50"></text></g><g><title>[libc.so.6] (22 samples, 0.64%)</title><rect x="16.9124%" y="1749" width="0.6360%" height="15" fill="rgb(252,170,7)" fg:x="585" fg:w="22"/><text x="17.1624%" y="1759.50"></text></g><g><title>[libc.so.6] (11 samples, 0.32%)</title><rect x="17.2304%" y="1733" width="0.3180%" height="15" fill="rgb(231,118,14)" fg:x="596" fg:w="11"/><text x="17.4804%" y="1743.50"></text></g><g><title>core::ptr::drop_in_place&lt;exchange_lib::message_queue::Message&gt; (6 samples, 0.17%)</title><rect x="18.0399%" y="1861" width="0.1735%" height="15" fill="rgb(238,83,0)" fg:x="624" fg:w="6"/><text x="18.2899%" y="1871.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (6 samples, 0.17%)</title><rect x="18.0399%" y="1845" width="0.1735%" height="15" fill="rgb(221,39,39)" fg:x="624" fg:w="6"/><text x="18.2899%" y="1855.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (6 samples, 0.17%)</title><rect x="18.0399%" y="1829" width="0.1735%" height="15" fill="rgb(222,119,46)" fg:x="624" fg:w="6"/><text x="18.2899%" y="1839.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (6 samples, 0.17%)</title><rect x="18.0399%" y="1813" width="0.1735%" height="15" fill="rgb(222,165,49)" fg:x="624" fg:w="6"/><text x="18.2899%" y="1823.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.17%)</title><rect x="18.0399%" y="1797" width="0.1735%" height="15" fill="rgb(219,113,52)" fg:x="624" fg:w="6"/><text x="18.2899%" y="1807.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.17%)</title><rect x="18.0399%" y="1781" width="0.1735%" height="15" fill="rgb(214,7,15)" fg:x="624" fg:w="6"/><text x="18.2899%" y="1791.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.17%)</title><rect x="18.0399%" y="1765" width="0.1735%" height="15" fill="rgb(235,32,4)" fg:x="624" fg:w="6"/><text x="18.2899%" y="1775.50"></text></g><g><title>cfree (6 samples, 0.17%)</title><rect x="18.0399%" y="1749" width="0.1735%" height="15" fill="rgb(238,90,54)" fg:x="624" fg:w="6"/><text x="18.2899%" y="1759.50"></text></g><g><title>[libc.so.6] (4 samples, 0.12%)</title><rect x="18.0977%" y="1733" width="0.1156%" height="15" fill="rgb(213,208,19)" fg:x="626" fg:w="4"/><text x="18.3477%" y="1743.50"></text></g><g><title>__rdl_alloc (2 samples, 0.06%)</title><rect x="18.2423%" y="1765" width="0.0578%" height="15" fill="rgb(233,156,4)" fg:x="631" fg:w="2"/><text x="18.4923%" y="1775.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.06%)</title><rect x="18.2423%" y="1749" width="0.0578%" height="15" fill="rgb(207,194,5)" fg:x="631" fg:w="2"/><text x="18.4923%" y="1759.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (4 samples, 0.12%)</title><rect x="18.2423%" y="1845" width="0.1156%" height="15" fill="rgb(206,111,30)" fg:x="631" fg:w="4"/><text x="18.4923%" y="1855.50"></text></g><g><title>alloc::alloc::exchange_malloc (4 samples, 0.12%)</title><rect x="18.2423%" y="1829" width="0.1156%" height="15" fill="rgb(243,70,54)" fg:x="631" fg:w="4"/><text x="18.4923%" y="1839.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.12%)</title><rect x="18.2423%" y="1813" width="0.1156%" height="15" fill="rgb(242,28,8)" fg:x="631" fg:w="4"/><text x="18.4923%" y="1823.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.12%)</title><rect x="18.2423%" y="1797" width="0.1156%" height="15" fill="rgb(219,106,18)" fg:x="631" fg:w="4"/><text x="18.4923%" y="1807.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.12%)</title><rect x="18.2423%" y="1781" width="0.1156%" height="15" fill="rgb(244,222,10)" fg:x="631" fg:w="4"/><text x="18.4923%" y="1791.50"></text></g><g><title>malloc (2 samples, 0.06%)</title><rect x="18.3001%" y="1765" width="0.0578%" height="15" fill="rgb(236,179,52)" fg:x="633" fg:w="2"/><text x="18.5501%" y="1775.50"></text></g><g><title>core::cmp::max (1 samples, 0.03%)</title><rect x="18.3579%" y="1845" width="0.0289%" height="15" fill="rgb(213,23,39)" fg:x="635" fg:w="1"/><text x="18.6079%" y="1855.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.03%)</title><rect x="18.3579%" y="1829" width="0.0289%" height="15" fill="rgb(238,48,10)" fg:x="635" fg:w="1"/><text x="18.6079%" y="1839.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.03%)</title><rect x="18.3579%" y="1813" width="0.0289%" height="15" fill="rgb(251,196,23)" fg:x="635" fg:w="1"/><text x="18.6079%" y="1823.50"></text></g><g><title>exchange_matching_engine::order::StandingOrder::is_filled (1 samples, 0.03%)</title><rect x="18.3868%" y="1845" width="0.0289%" height="15" fill="rgb(250,152,24)" fg:x="636" fg:w="1"/><text x="18.6368%" y="1855.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="18.5314%" y="1589" width="0.0289%" height="15" fill="rgb(209,150,17)" fg:x="641" fg:w="1"/><text x="18.7814%" y="1599.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (3 samples, 0.09%)</title><rect x="18.5314%" y="1813" width="0.0867%" height="15" fill="rgb(234,202,34)" fg:x="641" fg:w="3"/><text x="18.7814%" y="1823.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (3 samples, 0.09%)</title><rect x="18.5314%" y="1797" width="0.0867%" height="15" fill="rgb(253,148,53)" fg:x="641" fg:w="3"/><text x="18.7814%" y="1807.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (3 samples, 0.09%)</title><rect x="18.5314%" y="1781" width="0.0867%" height="15" fill="rgb(218,129,16)" fg:x="641" fg:w="3"/><text x="18.7814%" y="1791.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (3 samples, 0.09%)</title><rect x="18.5314%" y="1765" width="0.0867%" height="15" fill="rgb(216,85,19)" fg:x="641" fg:w="3"/><text x="18.7814%" y="1775.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3 samples, 0.09%)</title><rect x="18.5314%" y="1749" width="0.0867%" height="15" fill="rgb(235,228,7)" fg:x="641" fg:w="3"/><text x="18.7814%" y="1759.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.09%)</title><rect x="18.5314%" y="1733" width="0.0867%" height="15" fill="rgb(245,175,0)" fg:x="641" fg:w="3"/><text x="18.7814%" y="1743.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.09%)</title><rect x="18.5314%" y="1717" width="0.0867%" height="15" fill="rgb(208,168,36)" fg:x="641" fg:w="3"/><text x="18.7814%" y="1727.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.09%)</title><rect x="18.5314%" y="1701" width="0.0867%" height="15" fill="rgb(246,171,24)" fg:x="641" fg:w="3"/><text x="18.7814%" y="1711.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.09%)</title><rect x="18.5314%" y="1685" width="0.0867%" height="15" fill="rgb(215,142,24)" fg:x="641" fg:w="3"/><text x="18.7814%" y="1695.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.09%)</title><rect x="18.5314%" y="1669" width="0.0867%" height="15" fill="rgb(250,187,7)" fg:x="641" fg:w="3"/><text x="18.7814%" y="1679.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.09%)</title><rect x="18.5314%" y="1653" width="0.0867%" height="15" fill="rgb(228,66,33)" fg:x="641" fg:w="3"/><text x="18.7814%" y="1663.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.09%)</title><rect x="18.5314%" y="1637" width="0.0867%" height="15" fill="rgb(234,215,21)" fg:x="641" fg:w="3"/><text x="18.7814%" y="1647.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.09%)</title><rect x="18.5314%" y="1621" width="0.0867%" height="15" fill="rgb(222,191,20)" fg:x="641" fg:w="3"/><text x="18.7814%" y="1631.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.09%)</title><rect x="18.5314%" y="1605" width="0.0867%" height="15" fill="rgb(245,79,54)" fg:x="641" fg:w="3"/><text x="18.7814%" y="1615.50"></text></g><g><title>malloc (2 samples, 0.06%)</title><rect x="18.5603%" y="1589" width="0.0578%" height="15" fill="rgb(240,10,37)" fg:x="642" fg:w="2"/><text x="18.8103%" y="1599.50"></text></g><g><title>core::cmp::PartialOrd::le (1 samples, 0.03%)</title><rect x="18.6181%" y="1813" width="0.0289%" height="15" fill="rgb(214,192,32)" fg:x="644" fg:w="1"/><text x="18.8681%" y="1823.50"></text></g><g><title>exchange_lib::message_queue::Message::new (5 samples, 0.14%)</title><rect x="18.6470%" y="1813" width="0.1446%" height="15" fill="rgb(209,36,54)" fg:x="645" fg:w="5"/><text x="18.8970%" y="1823.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="18.8494%" y="1765" width="0.0289%" height="15" fill="rgb(220,10,11)" fg:x="652" fg:w="1"/><text x="19.0994%" y="1775.50"></text></g><g><title>core::mem::replace (3 samples, 0.09%)</title><rect x="18.8494%" y="1781" width="0.0867%" height="15" fill="rgb(221,106,17)" fg:x="652" fg:w="3"/><text x="19.0994%" y="1791.50"></text></g><g><title>core::ptr::write (2 samples, 0.06%)</title><rect x="18.8783%" y="1765" width="0.0578%" height="15" fill="rgb(251,142,44)" fg:x="653" fg:w="2"/><text x="19.1283%" y="1775.50"></text></g><g><title>__rdl_realloc (3 samples, 0.09%)</title><rect x="18.9939%" y="1557" width="0.0867%" height="15" fill="rgb(238,13,15)" fg:x="657" fg:w="3"/><text x="19.2439%" y="1567.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.09%)</title><rect x="18.9939%" y="1541" width="0.0867%" height="15" fill="rgb(208,107,27)" fg:x="657" fg:w="3"/><text x="19.2439%" y="1551.50"></text></g><g><title>__rust_realloc (1 samples, 0.03%)</title><rect x="19.0807%" y="1557" width="0.0289%" height="15" fill="rgb(205,136,37)" fg:x="660" fg:w="1"/><text x="19.3307%" y="1567.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (24 samples, 0.69%)</title><rect x="18.9939%" y="1605" width="0.6938%" height="15" fill="rgb(250,205,27)" fg:x="657" fg:w="24"/><text x="19.2439%" y="1615.50"></text></g><g><title>alloc::alloc::Global::grow_impl (24 samples, 0.69%)</title><rect x="18.9939%" y="1589" width="0.6938%" height="15" fill="rgb(210,80,43)" fg:x="657" fg:w="24"/><text x="19.2439%" y="1599.50"></text></g><g><title>alloc::alloc::realloc (24 samples, 0.69%)</title><rect x="18.9939%" y="1573" width="0.6938%" height="15" fill="rgb(247,160,36)" fg:x="657" fg:w="24"/><text x="19.2439%" y="1583.50"></text></g><g><title>realloc (20 samples, 0.58%)</title><rect x="19.1096%" y="1557" width="0.5782%" height="15" fill="rgb(234,13,49)" fg:x="661" fg:w="20"/><text x="19.3596%" y="1567.50"></text></g><g><title>[libc.so.6] (17 samples, 0.49%)</title><rect x="19.1963%" y="1541" width="0.4915%" height="15" fill="rgb(234,122,0)" fg:x="664" fg:w="17"/><text x="19.4463%" y="1551.50"></text></g><g><title>[libc.so.6] (13 samples, 0.38%)</title><rect x="19.3119%" y="1525" width="0.3758%" height="15" fill="rgb(207,146,38)" fg:x="668" fg:w="13"/><text x="19.5619%" y="1535.50"></text></g><g><title>alloc::raw_vec::finish_grow (26 samples, 0.75%)</title><rect x="18.9650%" y="1621" width="0.7517%" height="15" fill="rgb(207,177,25)" fg:x="656" fg:w="26"/><text x="19.2150%" y="1631.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.03%)</title><rect x="19.6878%" y="1605" width="0.0289%" height="15" fill="rgb(211,178,42)" fg:x="681" fg:w="1"/><text x="19.9378%" y="1615.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (28 samples, 0.81%)</title><rect x="18.9361%" y="1685" width="0.8095%" height="15" fill="rgb(230,69,54)" fg:x="655" fg:w="28"/><text x="19.1861%" y="1695.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (27 samples, 0.78%)</title><rect x="18.9650%" y="1669" width="0.7806%" height="15" fill="rgb(214,135,41)" fg:x="656" fg:w="27"/><text x="19.2150%" y="1679.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (27 samples, 0.78%)</title><rect x="18.9650%" y="1653" width="0.7806%" height="15" fill="rgb(237,67,25)" fg:x="656" fg:w="27"/><text x="19.2150%" y="1663.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (27 samples, 0.78%)</title><rect x="18.9650%" y="1637" width="0.7806%" height="15" fill="rgb(222,189,50)" fg:x="656" fg:w="27"/><text x="19.2150%" y="1647.50"></text></g><g><title>core::cmp::max (1 samples, 0.03%)</title><rect x="19.7167%" y="1621" width="0.0289%" height="15" fill="rgb(245,148,34)" fg:x="682" fg:w="1"/><text x="19.9667%" y="1631.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.03%)</title><rect x="19.7167%" y="1605" width="0.0289%" height="15" fill="rgb(222,29,6)" fg:x="682" fg:w="1"/><text x="19.9667%" y="1615.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.03%)</title><rect x="19.7167%" y="1589" width="0.0289%" height="15" fill="rgb(221,189,43)" fg:x="682" fg:w="1"/><text x="19.9667%" y="1599.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.14%)</title><rect x="19.7456%" y="1685" width="0.1446%" height="15" fill="rgb(207,36,27)" fg:x="683" fg:w="5"/><text x="19.9956%" y="1695.50"></text></g><g><title>[libc.so.6] (5 samples, 0.14%)</title><rect x="19.7456%" y="1669" width="0.1446%" height="15" fill="rgb(217,90,24)" fg:x="683" fg:w="5"/><text x="19.9956%" y="1679.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (34 samples, 0.98%)</title><rect x="18.9361%" y="1733" width="0.9829%" height="15" fill="rgb(224,66,35)" fg:x="655" fg:w="34"/><text x="19.1861%" y="1743.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (34 samples, 0.98%)</title><rect x="18.9361%" y="1717" width="0.9829%" height="15" fill="rgb(221,13,50)" fg:x="655" fg:w="34"/><text x="19.1861%" y="1727.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (34 samples, 0.98%)</title><rect x="18.9361%" y="1701" width="0.9829%" height="15" fill="rgb(236,68,49)" fg:x="655" fg:w="34"/><text x="19.1861%" y="1711.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="19.8901%" y="1685" width="0.0289%" height="15" fill="rgb(229,146,28)" fg:x="688" fg:w="1"/><text x="20.1401%" y="1695.50"></text></g><g><title>&lt;redis::cmd::Cmd as redis::types::RedisWrite&gt;::write_arg (36 samples, 1.04%)</title><rect x="18.9361%" y="1749" width="1.0408%" height="15" fill="rgb(225,31,38)" fg:x="655" fg:w="36"/><text x="19.1861%" y="1759.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.06%)</title><rect x="19.9191%" y="1733" width="0.0578%" height="15" fill="rgb(250,208,3)" fg:x="689" fg:w="2"/><text x="20.1691%" y="1743.50"></text></g><g><title>&lt;alloc::string::String as redis::types::ToRedisArgs&gt;::write_redis_args (38 samples, 1.10%)</title><rect x="18.9361%" y="1765" width="1.0986%" height="15" fill="rgb(246,54,23)" fg:x="655" fg:w="38"/><text x="19.1861%" y="1775.50"></text></g><g><title>alloc::string::String::as_bytes (2 samples, 0.06%)</title><rect x="19.9769%" y="1749" width="0.0578%" height="15" fill="rgb(243,76,11)" fg:x="691" fg:w="2"/><text x="20.2269%" y="1759.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.06%)</title><rect x="19.9769%" y="1733" width="0.0578%" height="15" fill="rgb(245,21,50)" fg:x="691" fg:w="2"/><text x="20.2269%" y="1743.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.06%)</title><rect x="19.9769%" y="1717" width="0.0578%" height="15" fill="rgb(228,9,43)" fg:x="691" fg:w="2"/><text x="20.2269%" y="1727.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.06%)</title><rect x="19.9769%" y="1701" width="0.0578%" height="15" fill="rgb(208,100,47)" fg:x="691" fg:w="2"/><text x="20.2269%" y="1711.50"></text></g><g><title>redis::cmd::Cmd::arg (46 samples, 1.33%)</title><rect x="18.9361%" y="1781" width="1.3299%" height="15" fill="rgb(232,26,8)" fg:x="655" fg:w="46"/><text x="19.1861%" y="1791.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (8 samples, 0.23%)</title><rect x="20.0347%" y="1765" width="0.2313%" height="15" fill="rgb(216,166,38)" fg:x="693" fg:w="8"/><text x="20.2847%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (8 samples, 0.23%)</title><rect x="20.0347%" y="1749" width="0.2313%" height="15" fill="rgb(251,202,51)" fg:x="693" fg:w="8"/><text x="20.2847%" y="1759.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (8 samples, 0.23%)</title><rect x="20.0347%" y="1733" width="0.2313%" height="15" fill="rgb(254,216,34)" fg:x="693" fg:w="8"/><text x="20.2847%" y="1743.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.23%)</title><rect x="20.0347%" y="1717" width="0.2313%" height="15" fill="rgb(251,32,27)" fg:x="693" fg:w="8"/><text x="20.2847%" y="1727.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.20%)</title><rect x="20.0636%" y="1701" width="0.2024%" height="15" fill="rgb(208,127,28)" fg:x="694" fg:w="7"/><text x="20.3136%" y="1711.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.20%)</title><rect x="20.0636%" y="1685" width="0.2024%" height="15" fill="rgb(224,137,22)" fg:x="694" fg:w="7"/><text x="20.3136%" y="1695.50"></text></g><g><title>cfree (7 samples, 0.20%)</title><rect x="20.0636%" y="1669" width="0.2024%" height="15" fill="rgb(254,70,32)" fg:x="694" fg:w="7"/><text x="20.3136%" y="1679.50"></text></g><g><title>[libc.so.6] (3 samples, 0.09%)</title><rect x="20.1792%" y="1653" width="0.0867%" height="15" fill="rgb(229,75,37)" fg:x="698" fg:w="3"/><text x="20.4292%" y="1663.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="20.4973%" y="1589" width="0.0289%" height="15" fill="rgb(252,64,23)" fg:x="709" fg:w="1"/><text x="20.7473%" y="1599.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.03%)</title><rect x="20.5262%" y="1589" width="0.0289%" height="15" fill="rgb(232,162,48)" fg:x="710" fg:w="1"/><text x="20.7762%" y="1599.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.14%)</title><rect x="20.4973%" y="1605" width="0.1446%" height="15" fill="rgb(246,160,12)" fg:x="709" fg:w="5"/><text x="20.7473%" y="1615.50"></text></g><g><title>malloc (3 samples, 0.09%)</title><rect x="20.5551%" y="1589" width="0.0867%" height="15" fill="rgb(247,166,0)" fg:x="711" fg:w="3"/><text x="20.8051%" y="1599.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (7 samples, 0.20%)</title><rect x="20.4683%" y="1669" width="0.2024%" height="15" fill="rgb(249,219,21)" fg:x="708" fg:w="7"/><text x="20.7183%" y="1679.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.20%)</title><rect x="20.4683%" y="1653" width="0.2024%" height="15" fill="rgb(205,209,3)" fg:x="708" fg:w="7"/><text x="20.7183%" y="1663.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.20%)</title><rect x="20.4683%" y="1637" width="0.2024%" height="15" fill="rgb(243,44,1)" fg:x="708" fg:w="7"/><text x="20.7183%" y="1647.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (7 samples, 0.20%)</title><rect x="20.4683%" y="1621" width="0.2024%" height="15" fill="rgb(206,159,16)" fg:x="708" fg:w="7"/><text x="20.7183%" y="1631.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.03%)</title><rect x="20.6418%" y="1605" width="0.0289%" height="15" fill="rgb(244,77,30)" fg:x="714" fg:w="1"/><text x="20.8918%" y="1615.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.03%)</title><rect x="20.6418%" y="1589" width="0.0289%" height="15" fill="rgb(218,69,12)" fg:x="714" fg:w="1"/><text x="20.8918%" y="1599.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (9 samples, 0.26%)</title><rect x="20.4683%" y="1717" width="0.2602%" height="15" fill="rgb(212,87,7)" fg:x="708" fg:w="9"/><text x="20.7183%" y="1727.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (9 samples, 0.26%)</title><rect x="20.4683%" y="1701" width="0.2602%" height="15" fill="rgb(245,114,25)" fg:x="708" fg:w="9"/><text x="20.7183%" y="1711.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (9 samples, 0.26%)</title><rect x="20.4683%" y="1685" width="0.2602%" height="15" fill="rgb(210,61,42)" fg:x="708" fg:w="9"/><text x="20.7183%" y="1695.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="20.6707%" y="1669" width="0.0578%" height="15" fill="rgb(211,52,33)" fg:x="715" fg:w="2"/><text x="20.9207%" y="1679.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="20.6996%" y="1653" width="0.0289%" height="15" fill="rgb(234,58,33)" fg:x="716" fg:w="1"/><text x="20.9496%" y="1663.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="20.7574%" y="1669" width="0.0289%" height="15" fill="rgb(220,115,36)" fg:x="718" fg:w="1"/><text x="21.0074%" y="1679.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.12%)</title><rect x="20.7864%" y="1669" width="0.1156%" height="15" fill="rgb(243,153,54)" fg:x="719" fg:w="4"/><text x="21.0364%" y="1679.50"></text></g><g><title>malloc (4 samples, 0.12%)</title><rect x="20.7864%" y="1653" width="0.1156%" height="15" fill="rgb(251,47,18)" fg:x="719" fg:w="4"/><text x="21.0364%" y="1663.50"></text></g><g><title>[libc.so.6] (2 samples, 0.06%)</title><rect x="20.8442%" y="1637" width="0.0578%" height="15" fill="rgb(242,102,42)" fg:x="721" fg:w="2"/><text x="21.0942%" y="1647.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.20%)</title><rect x="20.7285%" y="1701" width="0.2024%" height="15" fill="rgb(234,31,38)" fg:x="717" fg:w="7"/><text x="20.9785%" y="1711.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (7 samples, 0.20%)</title><rect x="20.7285%" y="1685" width="0.2024%" height="15" fill="rgb(221,117,51)" fg:x="717" fg:w="7"/><text x="20.9785%" y="1695.50"></text></g><g><title>core::cmp::max (1 samples, 0.03%)</title><rect x="20.9020%" y="1669" width="0.0289%" height="15" fill="rgb(212,20,18)" fg:x="723" fg:w="1"/><text x="21.1520%" y="1679.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.03%)</title><rect x="20.9020%" y="1653" width="0.0289%" height="15" fill="rgb(245,133,36)" fg:x="723" fg:w="1"/><text x="21.1520%" y="1663.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.03%)</title><rect x="20.9020%" y="1637" width="0.0289%" height="15" fill="rgb(212,6,19)" fg:x="723" fg:w="1"/><text x="21.1520%" y="1647.50"></text></g><g><title>redis::cmd::cmd (25 samples, 0.72%)</title><rect x="20.2660%" y="1781" width="0.7228%" height="15" fill="rgb(218,1,36)" fg:x="701" fg:w="25"/><text x="20.5160%" y="1791.50"></text></g><g><title>redis::cmd::Cmd::arg (18 samples, 0.52%)</title><rect x="20.4683%" y="1765" width="0.5204%" height="15" fill="rgb(246,84,54)" fg:x="708" fg:w="18"/><text x="20.7183%" y="1775.50"></text></g><g><title>&lt;&amp;str as redis::types::ToRedisArgs&gt;::write_redis_args (18 samples, 0.52%)</title><rect x="20.4683%" y="1749" width="0.5204%" height="15" fill="rgb(242,110,6)" fg:x="708" fg:w="18"/><text x="20.7183%" y="1759.50"></text></g><g><title>&lt;redis::cmd::Cmd as redis::types::RedisWrite&gt;::write_arg (18 samples, 0.52%)</title><rect x="20.4683%" y="1733" width="0.5204%" height="15" fill="rgb(214,47,5)" fg:x="708" fg:w="18"/><text x="20.7183%" y="1743.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9 samples, 0.26%)</title><rect x="20.7285%" y="1717" width="0.2602%" height="15" fill="rgb(218,159,25)" fg:x="717" fg:w="9"/><text x="20.9785%" y="1727.50"></text></g><g><title>core::ptr::write (2 samples, 0.06%)</title><rect x="20.9309%" y="1701" width="0.0578%" height="15" fill="rgb(215,211,28)" fg:x="724" fg:w="2"/><text x="21.1809%" y="1711.50"></text></g><g><title>redis::commands::&lt;impl redis::pipeline::Pipeline&gt;::publish (76 samples, 2.20%)</title><rect x="18.8205%" y="1797" width="2.1972%" height="15" fill="rgb(238,59,32)" fg:x="651" fg:w="76"/><text x="19.0705%" y="1807.50">r..</text></g><g><title>redis::pipeline::Pipeline::add_command (1 samples, 0.03%)</title><rect x="20.9887%" y="1781" width="0.0289%" height="15" fill="rgb(226,82,3)" fg:x="726" fg:w="1"/><text x="21.2387%" y="1791.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="20.9887%" y="1765" width="0.0289%" height="15" fill="rgb(240,164,32)" fg:x="726" fg:w="1"/><text x="21.2387%" y="1775.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="20.9887%" y="1749" width="0.0289%" height="15" fill="rgb(232,46,7)" fg:x="726" fg:w="1"/><text x="21.2387%" y="1759.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="21.2489%" y="1653" width="0.0289%" height="15" fill="rgb(229,129,53)" fg:x="735" fg:w="1"/><text x="21.4989%" y="1663.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4 samples, 0.12%)</title><rect x="21.2200%" y="1765" width="0.1156%" height="15" fill="rgb(234,188,29)" fg:x="734" fg:w="4"/><text x="21.4700%" y="1775.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.12%)</title><rect x="21.2200%" y="1749" width="0.1156%" height="15" fill="rgb(246,141,4)" fg:x="734" fg:w="4"/><text x="21.4700%" y="1759.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.12%)</title><rect x="21.2200%" y="1733" width="0.1156%" height="15" fill="rgb(229,23,39)" fg:x="734" fg:w="4"/><text x="21.4700%" y="1743.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.12%)</title><rect x="21.2200%" y="1717" width="0.1156%" height="15" fill="rgb(206,12,3)" fg:x="734" fg:w="4"/><text x="21.4700%" y="1727.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.09%)</title><rect x="21.2489%" y="1701" width="0.0867%" height="15" fill="rgb(252,226,20)" fg:x="735" fg:w="3"/><text x="21.4989%" y="1711.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.09%)</title><rect x="21.2489%" y="1685" width="0.0867%" height="15" fill="rgb(216,123,35)" fg:x="735" fg:w="3"/><text x="21.4989%" y="1695.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.09%)</title><rect x="21.2489%" y="1669" width="0.0867%" height="15" fill="rgb(212,68,40)" fg:x="735" fg:w="3"/><text x="21.4989%" y="1679.50"></text></g><g><title>malloc (2 samples, 0.06%)</title><rect x="21.2778%" y="1653" width="0.0578%" height="15" fill="rgb(254,125,32)" fg:x="736" fg:w="2"/><text x="21.5278%" y="1663.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::end (2 samples, 0.06%)</title><rect x="21.3356%" y="1733" width="0.0578%" height="15" fill="rgb(253,97,22)" fg:x="738" fg:w="2"/><text x="21.5856%" y="1743.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::end (2 samples, 0.06%)</title><rect x="21.3356%" y="1717" width="0.0578%" height="15" fill="rgb(241,101,14)" fg:x="738" fg:w="2"/><text x="21.5856%" y="1727.50"></text></g><g><title>serde_json::ser::Formatter::end_object (2 samples, 0.06%)</title><rect x="21.3356%" y="1701" width="0.0578%" height="15" fill="rgb(238,103,29)" fg:x="738" fg:w="2"/><text x="21.5856%" y="1711.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (2 samples, 0.06%)</title><rect x="21.3356%" y="1685" width="0.0578%" height="15" fill="rgb(233,195,47)" fg:x="738" fg:w="2"/><text x="21.5856%" y="1695.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (2 samples, 0.06%)</title><rect x="21.3356%" y="1669" width="0.0578%" height="15" fill="rgb(246,218,30)" fg:x="738" fg:w="2"/><text x="21.5856%" y="1679.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.06%)</title><rect x="21.3356%" y="1653" width="0.0578%" height="15" fill="rgb(219,145,47)" fg:x="738" fg:w="2"/><text x="21.5856%" y="1663.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.06%)</title><rect x="21.3356%" y="1637" width="0.0578%" height="15" fill="rgb(243,12,26)" fg:x="738" fg:w="2"/><text x="21.5856%" y="1647.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.06%)</title><rect x="21.3356%" y="1621" width="0.0578%" height="15" fill="rgb(214,87,16)" fg:x="738" fg:w="2"/><text x="21.5856%" y="1631.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="21.3356%" y="1605" width="0.0578%" height="15" fill="rgb(208,99,42)" fg:x="738" fg:w="2"/><text x="21.5856%" y="1615.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="21.3935%" y="1557" width="0.0289%" height="15" fill="rgb(253,99,2)" fg:x="740" fg:w="1"/><text x="21.6435%" y="1567.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="21.3935%" y="1541" width="0.0289%" height="15" fill="rgb(220,168,23)" fg:x="740" fg:w="1"/><text x="21.6435%" y="1551.50"></text></g><g><title>serde_json::ser::Formatter::begin_string (2 samples, 0.06%)</title><rect x="21.3935%" y="1653" width="0.0578%" height="15" fill="rgb(242,38,24)" fg:x="740" fg:w="2"/><text x="21.6435%" y="1663.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (2 samples, 0.06%)</title><rect x="21.3935%" y="1637" width="0.0578%" height="15" fill="rgb(225,182,9)" fg:x="740" fg:w="2"/><text x="21.6435%" y="1647.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (2 samples, 0.06%)</title><rect x="21.3935%" y="1621" width="0.0578%" height="15" fill="rgb(243,178,37)" fg:x="740" fg:w="2"/><text x="21.6435%" y="1631.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.06%)</title><rect x="21.3935%" y="1605" width="0.0578%" height="15" fill="rgb(232,139,19)" fg:x="740" fg:w="2"/><text x="21.6435%" y="1615.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.06%)</title><rect x="21.3935%" y="1589" width="0.0578%" height="15" fill="rgb(225,201,24)" fg:x="740" fg:w="2"/><text x="21.6435%" y="1599.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.06%)</title><rect x="21.3935%" y="1573" width="0.0578%" height="15" fill="rgb(221,47,46)" fg:x="740" fg:w="2"/><text x="21.6435%" y="1583.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="21.4224%" y="1557" width="0.0289%" height="15" fill="rgb(249,23,13)" fg:x="741" fg:w="1"/><text x="21.6724%" y="1567.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.12%)</title><rect x="21.5380%" y="1637" width="0.1156%" height="15" fill="rgb(219,9,5)" fg:x="745" fg:w="4"/><text x="21.7880%" y="1647.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.12%)</title><rect x="21.5380%" y="1621" width="0.1156%" height="15" fill="rgb(254,171,16)" fg:x="745" fg:w="4"/><text x="21.7880%" y="1631.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (13 samples, 0.38%)</title><rect x="21.3935%" y="1685" width="0.3758%" height="15" fill="rgb(230,171,20)" fg:x="740" fg:w="13"/><text x="21.6435%" y="1695.50"></text></g><g><title>serde_json::ser::format_escaped_str (13 samples, 0.38%)</title><rect x="21.3935%" y="1669" width="0.3758%" height="15" fill="rgb(210,71,41)" fg:x="740" fg:w="13"/><text x="21.6435%" y="1679.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (11 samples, 0.32%)</title><rect x="21.4513%" y="1653" width="0.3180%" height="15" fill="rgb(206,173,20)" fg:x="742" fg:w="11"/><text x="21.7013%" y="1663.50"></text></g><g><title>serde_json::ser::Formatter::write_string_fragment (4 samples, 0.12%)</title><rect x="21.6537%" y="1637" width="0.1156%" height="15" fill="rgb(233,88,34)" fg:x="749" fg:w="4"/><text x="21.9037%" y="1647.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (4 samples, 0.12%)</title><rect x="21.6537%" y="1621" width="0.1156%" height="15" fill="rgb(223,209,46)" fg:x="749" fg:w="4"/><text x="21.9037%" y="1631.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (4 samples, 0.12%)</title><rect x="21.6537%" y="1605" width="0.1156%" height="15" fill="rgb(250,43,18)" fg:x="749" fg:w="4"/><text x="21.9037%" y="1615.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4 samples, 0.12%)</title><rect x="21.6537%" y="1589" width="0.1156%" height="15" fill="rgb(208,13,10)" fg:x="749" fg:w="4"/><text x="21.9037%" y="1599.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.12%)</title><rect x="21.6537%" y="1573" width="0.1156%" height="15" fill="rgb(212,200,36)" fg:x="749" fg:w="4"/><text x="21.9037%" y="1583.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4 samples, 0.12%)</title><rect x="21.6537%" y="1557" width="0.1156%" height="15" fill="rgb(225,90,30)" fg:x="749" fg:w="4"/><text x="21.9037%" y="1567.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.12%)</title><rect x="21.6537%" y="1541" width="0.1156%" height="15" fill="rgb(236,182,39)" fg:x="749" fg:w="4"/><text x="21.9037%" y="1551.50"></text></g><g><title>[libc.so.6] (2 samples, 0.06%)</title><rect x="21.7115%" y="1525" width="0.0578%" height="15" fill="rgb(212,144,35)" fg:x="751" fg:w="2"/><text x="21.9615%" y="1535.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_seq (2 samples, 0.06%)</title><rect x="21.8271%" y="1653" width="0.0578%" height="15" fill="rgb(228,63,44)" fg:x="755" fg:w="2"/><text x="22.0771%" y="1663.50"></text></g><g><title>serde_json::ser::Formatter::begin_array (2 samples, 0.06%)</title><rect x="21.8271%" y="1637" width="0.0578%" height="15" fill="rgb(228,109,6)" fg:x="755" fg:w="2"/><text x="22.0771%" y="1647.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (2 samples, 0.06%)</title><rect x="21.8271%" y="1621" width="0.0578%" height="15" fill="rgb(238,117,24)" fg:x="755" fg:w="2"/><text x="22.0771%" y="1631.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (2 samples, 0.06%)</title><rect x="21.8271%" y="1605" width="0.0578%" height="15" fill="rgb(242,26,26)" fg:x="755" fg:w="2"/><text x="22.0771%" y="1615.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.06%)</title><rect x="21.8271%" y="1589" width="0.0578%" height="15" fill="rgb(221,92,48)" fg:x="755" fg:w="2"/><text x="22.0771%" y="1599.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.06%)</title><rect x="21.8271%" y="1573" width="0.0578%" height="15" fill="rgb(209,209,32)" fg:x="755" fg:w="2"/><text x="22.0771%" y="1583.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.06%)</title><rect x="21.8271%" y="1557" width="0.0578%" height="15" fill="rgb(221,70,22)" fg:x="755" fg:w="2"/><text x="22.0771%" y="1567.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="21.8271%" y="1541" width="0.0578%" height="15" fill="rgb(248,145,5)" fg:x="755" fg:w="2"/><text x="22.0771%" y="1551.50"></text></g><g><title>serde_json::ser::Formatter::begin_string (1 samples, 0.03%)</title><rect x="21.8849%" y="1621" width="0.0289%" height="15" fill="rgb(226,116,26)" fg:x="757" fg:w="1"/><text x="22.1349%" y="1631.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.03%)</title><rect x="21.8849%" y="1605" width="0.0289%" height="15" fill="rgb(244,5,17)" fg:x="757" fg:w="1"/><text x="22.1349%" y="1615.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.03%)</title><rect x="21.8849%" y="1589" width="0.0289%" height="15" fill="rgb(252,159,33)" fg:x="757" fg:w="1"/><text x="22.1349%" y="1599.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="21.8849%" y="1573" width="0.0289%" height="15" fill="rgb(206,71,0)" fg:x="757" fg:w="1"/><text x="22.1349%" y="1583.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="21.8849%" y="1557" width="0.0289%" height="15" fill="rgb(233,118,54)" fg:x="757" fg:w="1"/><text x="22.1349%" y="1567.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="21.8849%" y="1541" width="0.0289%" height="15" fill="rgb(234,83,48)" fg:x="757" fg:w="1"/><text x="22.1349%" y="1551.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="21.8849%" y="1525" width="0.0289%" height="15" fill="rgb(228,3,54)" fg:x="757" fg:w="1"/><text x="22.1349%" y="1535.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (2 samples, 0.06%)</title><rect x="22.0006%" y="1605" width="0.0578%" height="15" fill="rgb(226,155,13)" fg:x="761" fg:w="2"/><text x="22.2506%" y="1615.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (2 samples, 0.06%)</title><rect x="22.0006%" y="1589" width="0.0578%" height="15" fill="rgb(241,28,37)" fg:x="761" fg:w="2"/><text x="22.2506%" y="1599.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (2 samples, 0.06%)</title><rect x="22.0006%" y="1573" width="0.0578%" height="15" fill="rgb(233,93,10)" fg:x="761" fg:w="2"/><text x="22.2506%" y="1583.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (2 samples, 0.06%)</title><rect x="22.0006%" y="1557" width="0.0578%" height="15" fill="rgb(225,113,19)" fg:x="761" fg:w="2"/><text x="22.2506%" y="1567.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (7 samples, 0.20%)</title><rect x="21.8849%" y="1653" width="0.2024%" height="15" fill="rgb(241,2,18)" fg:x="757" fg:w="7"/><text x="22.1349%" y="1663.50"></text></g><g><title>serde_json::ser::format_escaped_str (7 samples, 0.20%)</title><rect x="21.8849%" y="1637" width="0.2024%" height="15" fill="rgb(228,207,21)" fg:x="757" fg:w="7"/><text x="22.1349%" y="1647.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (6 samples, 0.17%)</title><rect x="21.9138%" y="1621" width="0.1735%" height="15" fill="rgb(213,211,35)" fg:x="758" fg:w="6"/><text x="22.1638%" y="1631.50"></text></g><g><title>serde_json::ser::Formatter::write_string_fragment (1 samples, 0.03%)</title><rect x="22.0584%" y="1605" width="0.0289%" height="15" fill="rgb(209,83,10)" fg:x="763" fg:w="1"/><text x="22.3084%" y="1615.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.03%)</title><rect x="22.0584%" y="1589" width="0.0289%" height="15" fill="rgb(209,164,1)" fg:x="763" fg:w="1"/><text x="22.3084%" y="1599.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.03%)</title><rect x="22.0584%" y="1573" width="0.0289%" height="15" fill="rgb(213,184,43)" fg:x="763" fg:w="1"/><text x="22.3084%" y="1583.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="22.0584%" y="1557" width="0.0289%" height="15" fill="rgb(231,61,34)" fg:x="763" fg:w="1"/><text x="22.3084%" y="1567.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="22.0584%" y="1541" width="0.0289%" height="15" fill="rgb(235,75,3)" fg:x="763" fg:w="1"/><text x="22.3084%" y="1551.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="22.0584%" y="1525" width="0.0289%" height="15" fill="rgb(220,106,47)" fg:x="763" fg:w="1"/><text x="22.3084%" y="1535.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_tuple_variant (10 samples, 0.29%)</title><rect x="21.8271%" y="1669" width="0.2891%" height="15" fill="rgb(210,196,33)" fg:x="755" fg:w="10"/><text x="22.0771%" y="1679.50"></text></g><g><title>serde_json::ser::Formatter::begin_object_value (1 samples, 0.03%)</title><rect x="22.0873%" y="1653" width="0.0289%" height="15" fill="rgb(229,154,42)" fg:x="764" fg:w="1"/><text x="22.3373%" y="1663.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.03%)</title><rect x="22.0873%" y="1637" width="0.0289%" height="15" fill="rgb(228,114,26)" fg:x="764" fg:w="1"/><text x="22.3373%" y="1647.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.03%)</title><rect x="22.0873%" y="1621" width="0.0289%" height="15" fill="rgb(208,144,1)" fg:x="764" fg:w="1"/><text x="22.3373%" y="1631.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="22.0873%" y="1605" width="0.0289%" height="15" fill="rgb(239,112,37)" fg:x="764" fg:w="1"/><text x="22.3373%" y="1615.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="22.0873%" y="1589" width="0.0289%" height="15" fill="rgb(210,96,50)" fg:x="764" fg:w="1"/><text x="22.3373%" y="1599.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="22.0873%" y="1573" width="0.0289%" height="15" fill="rgb(222,178,2)" fg:x="764" fg:w="1"/><text x="22.3373%" y="1583.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="22.0873%" y="1557" width="0.0289%" height="15" fill="rgb(226,74,18)" fg:x="764" fg:w="1"/><text x="22.3373%" y="1567.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="22.0873%" y="1541" width="0.0289%" height="15" fill="rgb(225,67,54)" fg:x="764" fg:w="1"/><text x="22.3373%" y="1551.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.03%)</title><rect x="22.0873%" y="1525" width="0.0289%" height="15" fill="rgb(251,92,32)" fg:x="764" fg:w="1"/><text x="22.3373%" y="1535.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeTupleVariant&gt;::end (2 samples, 0.06%)</title><rect x="22.1162%" y="1669" width="0.0578%" height="15" fill="rgb(228,149,22)" fg:x="765" fg:w="2"/><text x="22.3662%" y="1679.50"></text></g><g><title>serde_json::ser::Formatter::end_array (2 samples, 0.06%)</title><rect x="22.1162%" y="1653" width="0.0578%" height="15" fill="rgb(243,54,13)" fg:x="765" fg:w="2"/><text x="22.3662%" y="1663.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (2 samples, 0.06%)</title><rect x="22.1162%" y="1637" width="0.0578%" height="15" fill="rgb(243,180,28)" fg:x="765" fg:w="2"/><text x="22.3662%" y="1647.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (2 samples, 0.06%)</title><rect x="22.1162%" y="1621" width="0.0578%" height="15" fill="rgb(208,167,24)" fg:x="765" fg:w="2"/><text x="22.3662%" y="1631.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.06%)</title><rect x="22.1162%" y="1605" width="0.0578%" height="15" fill="rgb(245,73,45)" fg:x="765" fg:w="2"/><text x="22.3662%" y="1615.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.06%)</title><rect x="22.1162%" y="1589" width="0.0578%" height="15" fill="rgb(237,203,48)" fg:x="765" fg:w="2"/><text x="22.3662%" y="1599.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.06%)</title><rect x="22.1162%" y="1573" width="0.0578%" height="15" fill="rgb(211,197,16)" fg:x="765" fg:w="2"/><text x="22.3662%" y="1583.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="22.1162%" y="1557" width="0.0578%" height="15" fill="rgb(243,99,51)" fg:x="765" fg:w="2"/><text x="22.3662%" y="1567.50"></text></g><g><title>itoa::Buffer::format (2 samples, 0.06%)</title><rect x="22.1740%" y="1589" width="0.0578%" height="15" fill="rgb(215,123,29)" fg:x="767" fg:w="2"/><text x="22.4240%" y="1599.50"></text></g><g><title>itoa::&lt;impl itoa::private::Sealed for u64&gt;::write (2 samples, 0.06%)</title><rect x="22.1740%" y="1573" width="0.0578%" height="15" fill="rgb(239,186,37)" fg:x="767" fg:w="2"/><text x="22.4240%" y="1583.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="22.2319%" y="1509" width="0.0289%" height="15" fill="rgb(252,136,39)" fg:x="769" fg:w="1"/><text x="22.4819%" y="1519.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="22.2319%" y="1493" width="0.0289%" height="15" fill="rgb(223,213,32)" fg:x="769" fg:w="1"/><text x="22.4819%" y="1503.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.03%)</title><rect x="22.2319%" y="1477" width="0.0289%" height="15" fill="rgb(233,115,5)" fg:x="769" fg:w="1"/><text x="22.4819%" y="1487.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.03%)</title><rect x="22.2319%" y="1461" width="0.0289%" height="15" fill="rgb(207,226,44)" fg:x="769" fg:w="1"/><text x="22.4819%" y="1471.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u64&gt;::serialize (7 samples, 0.20%)</title><rect x="22.1740%" y="1637" width="0.2024%" height="15" fill="rgb(208,126,0)" fg:x="767" fg:w="7"/><text x="22.4240%" y="1647.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_u64 (7 samples, 0.20%)</title><rect x="22.1740%" y="1621" width="0.2024%" height="15" fill="rgb(244,66,21)" fg:x="767" fg:w="7"/><text x="22.4240%" y="1631.50"></text></g><g><title>serde_json::ser::Formatter::write_u64 (7 samples, 0.20%)</title><rect x="22.1740%" y="1605" width="0.2024%" height="15" fill="rgb(222,97,12)" fg:x="767" fg:w="7"/><text x="22.4240%" y="1615.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (5 samples, 0.14%)</title><rect x="22.2319%" y="1589" width="0.1446%" height="15" fill="rgb(219,213,19)" fg:x="769" fg:w="5"/><text x="22.4819%" y="1599.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (5 samples, 0.14%)</title><rect x="22.2319%" y="1573" width="0.1446%" height="15" fill="rgb(252,169,30)" fg:x="769" fg:w="5"/><text x="22.4819%" y="1583.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (5 samples, 0.14%)</title><rect x="22.2319%" y="1557" width="0.1446%" height="15" fill="rgb(206,32,51)" fg:x="769" fg:w="5"/><text x="22.4819%" y="1567.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.14%)</title><rect x="22.2319%" y="1541" width="0.1446%" height="15" fill="rgb(250,172,42)" fg:x="769" fg:w="5"/><text x="22.4819%" y="1551.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (5 samples, 0.14%)</title><rect x="22.2319%" y="1525" width="0.1446%" height="15" fill="rgb(209,34,43)" fg:x="769" fg:w="5"/><text x="22.4819%" y="1535.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.12%)</title><rect x="22.2608%" y="1509" width="0.1156%" height="15" fill="rgb(223,11,35)" fg:x="770" fg:w="4"/><text x="22.5108%" y="1519.50"></text></g><g><title>[libc.so.6] (4 samples, 0.12%)</title><rect x="22.2608%" y="1493" width="0.1156%" height="15" fill="rgb(251,219,26)" fg:x="770" fg:w="4"/><text x="22.5108%" y="1503.50"></text></g><g><title>exchange_lib::message_queue::_::&lt;impl serde::ser::Serialize for exchange_lib::message_queue::Payload&gt;::serialize (38 samples, 1.10%)</title><rect x="21.3935%" y="1717" width="1.0986%" height="15" fill="rgb(231,119,3)" fg:x="740" fg:w="38"/><text x="21.6435%" y="1727.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (38 samples, 1.10%)</title><rect x="21.3935%" y="1701" width="1.0986%" height="15" fill="rgb(216,97,11)" fg:x="740" fg:w="38"/><text x="21.6435%" y="1711.50"></text></g><g><title>exchange_lib::event::_::&lt;impl serde::ser::Serialize for exchange_lib::event::MatchingEngineEvent&gt;::serialize (25 samples, 0.72%)</title><rect x="21.7693%" y="1685" width="0.7228%" height="15" fill="rgb(223,59,9)" fg:x="753" fg:w="25"/><text x="22.0193%" y="1695.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeTupleVariant&gt;::serialize_field (11 samples, 0.32%)</title><rect x="22.1740%" y="1669" width="0.3180%" height="15" fill="rgb(233,93,31)" fg:x="767" fg:w="11"/><text x="22.4240%" y="1679.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeSeq&gt;::serialize_element (11 samples, 0.32%)</title><rect x="22.1740%" y="1653" width="0.3180%" height="15" fill="rgb(239,81,33)" fg:x="767" fg:w="11"/><text x="22.4240%" y="1663.50"></text></g><g><title>serde_json::ser::Formatter::begin_array_value (4 samples, 0.12%)</title><rect x="22.3764%" y="1637" width="0.1156%" height="15" fill="rgb(213,120,34)" fg:x="774" fg:w="4"/><text x="22.6264%" y="1647.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (4 samples, 0.12%)</title><rect x="22.3764%" y="1621" width="0.1156%" height="15" fill="rgb(243,49,53)" fg:x="774" fg:w="4"/><text x="22.6264%" y="1631.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (4 samples, 0.12%)</title><rect x="22.3764%" y="1605" width="0.1156%" height="15" fill="rgb(247,216,33)" fg:x="774" fg:w="4"/><text x="22.6264%" y="1615.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4 samples, 0.12%)</title><rect x="22.3764%" y="1589" width="0.1156%" height="15" fill="rgb(226,26,14)" fg:x="774" fg:w="4"/><text x="22.6264%" y="1599.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.12%)</title><rect x="22.3764%" y="1573" width="0.1156%" height="15" fill="rgb(215,49,53)" fg:x="774" fg:w="4"/><text x="22.6264%" y="1583.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4 samples, 0.12%)</title><rect x="22.3764%" y="1557" width="0.1156%" height="15" fill="rgb(245,162,40)" fg:x="774" fg:w="4"/><text x="22.6264%" y="1567.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.12%)</title><rect x="22.3764%" y="1541" width="0.1156%" height="15" fill="rgb(229,68,17)" fg:x="774" fg:w="4"/><text x="22.6264%" y="1551.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="22.5788%" y="1525" width="0.0289%" height="15" fill="rgb(213,182,10)" fg:x="781" fg:w="1"/><text x="22.8288%" y="1535.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="22.5788%" y="1509" width="0.0289%" height="15" fill="rgb(245,125,30)" fg:x="781" fg:w="1"/><text x="22.8288%" y="1519.50"></text></g><g><title>serde_json::ser::Formatter::begin_string (3 samples, 0.09%)</title><rect x="22.5499%" y="1621" width="0.0867%" height="15" fill="rgb(232,202,2)" fg:x="780" fg:w="3"/><text x="22.7999%" y="1631.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (3 samples, 0.09%)</title><rect x="22.5499%" y="1605" width="0.0867%" height="15" fill="rgb(237,140,51)" fg:x="780" fg:w="3"/><text x="22.7999%" y="1615.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (3 samples, 0.09%)</title><rect x="22.5499%" y="1589" width="0.0867%" height="15" fill="rgb(236,157,25)" fg:x="780" fg:w="3"/><text x="22.7999%" y="1599.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.09%)</title><rect x="22.5499%" y="1573" width="0.0867%" height="15" fill="rgb(219,209,0)" fg:x="780" fg:w="3"/><text x="22.7999%" y="1583.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.09%)</title><rect x="22.5499%" y="1557" width="0.0867%" height="15" fill="rgb(240,116,54)" fg:x="780" fg:w="3"/><text x="22.7999%" y="1567.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.09%)</title><rect x="22.5499%" y="1541" width="0.0867%" height="15" fill="rgb(216,10,36)" fg:x="780" fg:w="3"/><text x="22.7999%" y="1551.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="22.6077%" y="1525" width="0.0289%" height="15" fill="rgb(222,72,44)" fg:x="782" fg:w="1"/><text x="22.8577%" y="1535.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.17%)</title><rect x="22.6944%" y="1605" width="0.1735%" height="15" fill="rgb(232,159,9)" fg:x="785" fg:w="6"/><text x="22.9444%" y="1615.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.17%)</title><rect x="22.6944%" y="1589" width="0.1735%" height="15" fill="rgb(210,39,32)" fg:x="785" fg:w="6"/><text x="22.9444%" y="1599.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="22.8968%" y="1509" width="0.0289%" height="15" fill="rgb(216,194,45)" fg:x="792" fg:w="1"/><text x="23.1468%" y="1519.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="22.8968%" y="1493" width="0.0289%" height="15" fill="rgb(218,18,35)" fg:x="792" fg:w="1"/><text x="23.1468%" y="1503.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.03%)</title><rect x="22.8968%" y="1477" width="0.0289%" height="15" fill="rgb(207,83,51)" fg:x="792" fg:w="1"/><text x="23.1468%" y="1487.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (19 samples, 0.55%)</title><rect x="22.4920%" y="1701" width="0.5493%" height="15" fill="rgb(225,63,43)" fg:x="778" fg:w="19"/><text x="22.7420%" y="1711.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (18 samples, 0.52%)</title><rect x="22.5210%" y="1685" width="0.5204%" height="15" fill="rgb(207,57,36)" fg:x="779" fg:w="18"/><text x="22.7710%" y="1695.50"></text></g><g><title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (18 samples, 0.52%)</title><rect x="22.5210%" y="1669" width="0.5204%" height="15" fill="rgb(216,99,33)" fg:x="779" fg:w="18"/><text x="22.7710%" y="1679.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (18 samples, 0.52%)</title><rect x="22.5210%" y="1653" width="0.5204%" height="15" fill="rgb(225,42,16)" fg:x="779" fg:w="18"/><text x="22.7710%" y="1663.50"></text></g><g><title>serde_json::ser::format_escaped_str (18 samples, 0.52%)</title><rect x="22.5210%" y="1637" width="0.5204%" height="15" fill="rgb(220,201,45)" fg:x="779" fg:w="18"/><text x="22.7710%" y="1647.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (14 samples, 0.40%)</title><rect x="22.6366%" y="1621" width="0.4047%" height="15" fill="rgb(225,33,4)" fg:x="783" fg:w="14"/><text x="22.8866%" y="1631.50"></text></g><g><title>serde_json::ser::Formatter::write_string_fragment (6 samples, 0.17%)</title><rect x="22.8679%" y="1605" width="0.1735%" height="15" fill="rgb(224,33,50)" fg:x="791" fg:w="6"/><text x="23.1179%" y="1615.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (6 samples, 0.17%)</title><rect x="22.8679%" y="1589" width="0.1735%" height="15" fill="rgb(246,198,51)" fg:x="791" fg:w="6"/><text x="23.1179%" y="1599.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (6 samples, 0.17%)</title><rect x="22.8679%" y="1573" width="0.1735%" height="15" fill="rgb(205,22,4)" fg:x="791" fg:w="6"/><text x="23.1179%" y="1583.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (6 samples, 0.17%)</title><rect x="22.8679%" y="1557" width="0.1735%" height="15" fill="rgb(206,3,8)" fg:x="791" fg:w="6"/><text x="23.1179%" y="1567.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (6 samples, 0.17%)</title><rect x="22.8679%" y="1541" width="0.1735%" height="15" fill="rgb(251,23,15)" fg:x="791" fg:w="6"/><text x="23.1179%" y="1551.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (6 samples, 0.17%)</title><rect x="22.8679%" y="1525" width="0.1735%" height="15" fill="rgb(252,88,28)" fg:x="791" fg:w="6"/><text x="23.1179%" y="1535.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.12%)</title><rect x="22.9257%" y="1509" width="0.1156%" height="15" fill="rgb(212,127,14)" fg:x="793" fg:w="4"/><text x="23.1757%" y="1519.50"></text></g><g><title>[libc.so.6] (4 samples, 0.12%)</title><rect x="22.9257%" y="1493" width="0.1156%" height="15" fill="rgb(247,145,37)" fg:x="793" fg:w="4"/><text x="23.1757%" y="1503.50"></text></g><g><title>serde_json::ser::Formatter::begin_string (1 samples, 0.03%)</title><rect x="23.0703%" y="1637" width="0.0289%" height="15" fill="rgb(209,117,53)" fg:x="798" fg:w="1"/><text x="23.3203%" y="1647.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.03%)</title><rect x="23.0703%" y="1621" width="0.0289%" height="15" fill="rgb(212,90,42)" fg:x="798" fg:w="1"/><text x="23.3203%" y="1631.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.03%)</title><rect x="23.0703%" y="1605" width="0.0289%" height="15" fill="rgb(218,164,37)" fg:x="798" fg:w="1"/><text x="23.3203%" y="1615.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="23.0703%" y="1589" width="0.0289%" height="15" fill="rgb(246,65,34)" fg:x="798" fg:w="1"/><text x="23.3203%" y="1599.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="23.0703%" y="1573" width="0.0289%" height="15" fill="rgb(231,100,33)" fg:x="798" fg:w="1"/><text x="23.3203%" y="1583.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="23.0703%" y="1557" width="0.0289%" height="15" fill="rgb(228,126,14)" fg:x="798" fg:w="1"/><text x="23.3203%" y="1567.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="23.0703%" y="1541" width="0.0289%" height="15" fill="rgb(215,173,21)" fg:x="798" fg:w="1"/><text x="23.3203%" y="1551.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (3 samples, 0.09%)</title><rect x="23.0703%" y="1685" width="0.0867%" height="15" fill="rgb(210,6,40)" fg:x="798" fg:w="3"/><text x="23.3203%" y="1695.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (3 samples, 0.09%)</title><rect x="23.0703%" y="1669" width="0.0867%" height="15" fill="rgb(212,48,18)" fg:x="798" fg:w="3"/><text x="23.3203%" y="1679.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.09%)</title><rect x="23.0703%" y="1653" width="0.0867%" height="15" fill="rgb(230,214,11)" fg:x="798" fg:w="3"/><text x="23.3203%" y="1663.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (2 samples, 0.06%)</title><rect x="23.0992%" y="1637" width="0.0578%" height="15" fill="rgb(254,105,39)" fg:x="799" fg:w="2"/><text x="23.3492%" y="1647.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="23.1281%" y="1621" width="0.0289%" height="15" fill="rgb(245,158,5)" fg:x="800" fg:w="1"/><text x="23.3781%" y="1631.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="23.1281%" y="1605" width="0.0289%" height="15" fill="rgb(249,208,11)" fg:x="800" fg:w="1"/><text x="23.3781%" y="1615.50"></text></g><g><title>exchange_matching_engine::order::StandingOrder::notify (162 samples, 4.68%)</title><rect x="18.5314%" y="1829" width="4.6834%" height="15" fill="rgb(210,39,28)" fg:x="641" fg:w="162"/><text x="18.7814%" y="1839.50">excha..</text></g><g><title>exchange_lib::message_queue::publish_pipeline (153 samples, 4.42%)</title><rect x="18.7916%" y="1813" width="4.4232%" height="15" fill="rgb(211,56,53)" fg:x="650" fg:w="153"/><text x="19.0416%" y="1823.50">excha..</text></g><g><title>serde_json::ser::to_string (76 samples, 2.20%)</title><rect x="21.0176%" y="1797" width="2.1972%" height="15" fill="rgb(226,201,30)" fg:x="727" fg:w="76"/><text x="21.2676%" y="1807.50">s..</text></g><g><title>serde_json::ser::to_vec (70 samples, 2.02%)</title><rect x="21.1911%" y="1781" width="2.0237%" height="15" fill="rgb(239,101,34)" fg:x="733" fg:w="70"/><text x="21.4411%" y="1791.50">s..</text></g><g><title>serde_json::ser::to_writer (65 samples, 1.88%)</title><rect x="21.3356%" y="1765" width="1.8792%" height="15" fill="rgb(226,209,5)" fg:x="738" fg:w="65"/><text x="21.5856%" y="1775.50">s..</text></g><g><title>exchange_lib::message_queue::_::&lt;impl serde::ser::Serialize for exchange_lib::message_queue::Message&gt;::serialize (65 samples, 1.88%)</title><rect x="21.3356%" y="1749" width="1.8792%" height="15" fill="rgb(250,105,47)" fg:x="738" fg:w="65"/><text x="21.5856%" y="1759.50">e..</text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (63 samples, 1.82%)</title><rect x="21.3935%" y="1733" width="1.8213%" height="15" fill="rgb(230,72,3)" fg:x="740" fg:w="63"/><text x="21.6435%" y="1743.50">&lt;..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (25 samples, 0.72%)</title><rect x="22.4920%" y="1717" width="0.7228%" height="15" fill="rgb(232,218,39)" fg:x="778" fg:w="25"/><text x="22.7420%" y="1727.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.17%)</title><rect x="23.0413%" y="1701" width="0.1735%" height="15" fill="rgb(248,166,6)" fg:x="797" fg:w="6"/><text x="23.2913%" y="1711.50"></text></g><g><title>serde_json::ser::Formatter::begin_object_value (2 samples, 0.06%)</title><rect x="23.1570%" y="1685" width="0.0578%" height="15" fill="rgb(247,89,20)" fg:x="801" fg:w="2"/><text x="23.4070%" y="1695.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (2 samples, 0.06%)</title><rect x="23.1570%" y="1669" width="0.0578%" height="15" fill="rgb(248,130,54)" fg:x="801" fg:w="2"/><text x="23.4070%" y="1679.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (2 samples, 0.06%)</title><rect x="23.1570%" y="1653" width="0.0578%" height="15" fill="rgb(234,196,4)" fg:x="801" fg:w="2"/><text x="23.4070%" y="1663.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.06%)</title><rect x="23.1570%" y="1637" width="0.0578%" height="15" fill="rgb(250,143,31)" fg:x="801" fg:w="2"/><text x="23.4070%" y="1647.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.06%)</title><rect x="23.1570%" y="1621" width="0.0578%" height="15" fill="rgb(211,110,34)" fg:x="801" fg:w="2"/><text x="23.4070%" y="1631.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.06%)</title><rect x="23.1570%" y="1605" width="0.0578%" height="15" fill="rgb(215,124,48)" fg:x="801" fg:w="2"/><text x="23.4070%" y="1615.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="23.1570%" y="1589" width="0.0578%" height="15" fill="rgb(216,46,13)" fg:x="801" fg:w="2"/><text x="23.4070%" y="1599.50"></text></g><g><title>exchange_matching_engine::order_book::OrderBook::cancel_order (1 samples, 0.03%)</title><rect x="23.2148%" y="1829" width="0.0289%" height="15" fill="rgb(205,184,25)" fg:x="803" fg:w="1"/><text x="23.4648%" y="1839.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.03%)</title><rect x="23.2148%" y="1813" width="0.0289%" height="15" fill="rgb(228,1,10)" fg:x="803" fg:w="1"/><text x="23.4648%" y="1823.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.03%)</title><rect x="23.2148%" y="1797" width="0.0289%" height="15" fill="rgb(213,116,27)" fg:x="803" fg:w="1"/><text x="23.4648%" y="1807.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.03%)</title><rect x="23.2148%" y="1781" width="0.0289%" height="15" fill="rgb(241,95,50)" fg:x="803" fg:w="1"/><text x="23.4648%" y="1791.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.03%)</title><rect x="23.2148%" y="1765" width="0.0289%" height="15" fill="rgb(238,48,32)" fg:x="803" fg:w="1"/><text x="23.4648%" y="1775.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.03%)</title><rect x="23.2148%" y="1749" width="0.0289%" height="15" fill="rgb(235,113,49)" fg:x="803" fg:w="1"/><text x="23.4648%" y="1759.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.03%)</title><rect x="23.2148%" y="1733" width="0.0289%" height="15" fill="rgb(205,127,43)" fg:x="803" fg:w="1"/><text x="23.4648%" y="1743.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="23.2148%" y="1717" width="0.0289%" height="15" fill="rgb(250,162,2)" fg:x="803" fg:w="1"/><text x="23.4648%" y="1727.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (2 samples, 0.06%)</title><rect x="23.5617%" y="1781" width="0.0578%" height="15" fill="rgb(220,13,41)" fg:x="815" fg:w="2"/><text x="23.8117%" y="1791.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (2 samples, 0.06%)</title><rect x="23.5617%" y="1765" width="0.0578%" height="15" fill="rgb(249,221,25)" fg:x="815" fg:w="2"/><text x="23.8117%" y="1775.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2 samples, 0.06%)</title><rect x="23.5617%" y="1749" width="0.0578%" height="15" fill="rgb(215,208,19)" fg:x="815" fg:w="2"/><text x="23.8117%" y="1759.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2 samples, 0.06%)</title><rect x="23.5617%" y="1733" width="0.0578%" height="15" fill="rgb(236,175,2)" fg:x="815" fg:w="2"/><text x="23.8117%" y="1743.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.06%)</title><rect x="23.5617%" y="1717" width="0.0578%" height="15" fill="rgb(241,52,2)" fg:x="815" fg:w="2"/><text x="23.8117%" y="1727.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.06%)</title><rect x="23.5617%" y="1701" width="0.0578%" height="15" fill="rgb(248,140,14)" fg:x="815" fg:w="2"/><text x="23.8117%" y="1711.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.06%)</title><rect x="23.5617%" y="1685" width="0.0578%" height="15" fill="rgb(253,22,42)" fg:x="815" fg:w="2"/><text x="23.8117%" y="1695.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.06%)</title><rect x="23.5617%" y="1669" width="0.0578%" height="15" fill="rgb(234,61,47)" fg:x="815" fg:w="2"/><text x="23.8117%" y="1679.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.06%)</title><rect x="23.5617%" y="1653" width="0.0578%" height="15" fill="rgb(208,226,15)" fg:x="815" fg:w="2"/><text x="23.8117%" y="1663.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.06%)</title><rect x="23.5617%" y="1637" width="0.0578%" height="15" fill="rgb(217,221,4)" fg:x="815" fg:w="2"/><text x="23.8117%" y="1647.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.06%)</title><rect x="23.5617%" y="1621" width="0.0578%" height="15" fill="rgb(212,174,34)" fg:x="815" fg:w="2"/><text x="23.8117%" y="1631.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.06%)</title><rect x="23.5617%" y="1605" width="0.0578%" height="15" fill="rgb(253,83,4)" fg:x="815" fg:w="2"/><text x="23.8117%" y="1615.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.06%)</title><rect x="23.5617%" y="1589" width="0.0578%" height="15" fill="rgb(250,195,49)" fg:x="815" fg:w="2"/><text x="23.8117%" y="1599.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.06%)</title><rect x="23.5617%" y="1573" width="0.0578%" height="15" fill="rgb(241,192,25)" fg:x="815" fg:w="2"/><text x="23.8117%" y="1583.50"></text></g><g><title>malloc (2 samples, 0.06%)</title><rect x="23.5617%" y="1557" width="0.0578%" height="15" fill="rgb(208,124,10)" fg:x="815" fg:w="2"/><text x="23.8117%" y="1567.50"></text></g><g><title>core::cmp::PartialOrd::le (1 samples, 0.03%)</title><rect x="23.6195%" y="1781" width="0.0289%" height="15" fill="rgb(222,33,0)" fg:x="817" fg:w="1"/><text x="23.8695%" y="1791.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (1 samples, 0.03%)</title><rect x="23.6195%" y="1765" width="0.0289%" height="15" fill="rgb(234,209,28)" fg:x="817" fg:w="1"/><text x="23.8695%" y="1775.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.03%)</title><rect x="23.6195%" y="1749" width="0.0289%" height="15" fill="rgb(224,11,23)" fg:x="817" fg:w="1"/><text x="23.8695%" y="1759.50"></text></g><g><title>exchange_lib::message_queue::Message::new (1 samples, 0.03%)</title><rect x="23.6485%" y="1781" width="0.0289%" height="15" fill="rgb(232,99,1)" fg:x="818" fg:w="1"/><text x="23.8985%" y="1791.50"></text></g><g><title>core::mem::replace (2 samples, 0.06%)</title><rect x="23.8219%" y="1749" width="0.0578%" height="15" fill="rgb(237,95,45)" fg:x="824" fg:w="2"/><text x="24.0719%" y="1759.50"></text></g><g><title>core::ptr::write (2 samples, 0.06%)</title><rect x="23.8219%" y="1733" width="0.0578%" height="15" fill="rgb(208,109,11)" fg:x="824" fg:w="2"/><text x="24.0719%" y="1743.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.03%)</title><rect x="23.9376%" y="1589" width="0.0289%" height="15" fill="rgb(216,190,48)" fg:x="828" fg:w="1"/><text x="24.1876%" y="1599.50"></text></g><g><title>__rdl_realloc (1 samples, 0.03%)</title><rect x="24.0532%" y="1525" width="0.0289%" height="15" fill="rgb(251,171,36)" fg:x="832" fg:w="1"/><text x="24.3032%" y="1535.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.03%)</title><rect x="24.0532%" y="1509" width="0.0289%" height="15" fill="rgb(230,62,22)" fg:x="832" fg:w="1"/><text x="24.3032%" y="1519.50"></text></g><g><title>alloc::raw_vec::finish_grow (39 samples, 1.13%)</title><rect x="23.9665%" y="1589" width="1.1275%" height="15" fill="rgb(225,114,35)" fg:x="829" fg:w="39"/><text x="24.2165%" y="1599.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (37 samples, 1.07%)</title><rect x="24.0243%" y="1573" width="1.0697%" height="15" fill="rgb(215,118,42)" fg:x="831" fg:w="37"/><text x="24.2743%" y="1583.50"></text></g><g><title>alloc::alloc::Global::grow_impl (37 samples, 1.07%)</title><rect x="24.0243%" y="1557" width="1.0697%" height="15" fill="rgb(243,119,21)" fg:x="831" fg:w="37"/><text x="24.2743%" y="1567.50"></text></g><g><title>alloc::alloc::realloc (36 samples, 1.04%)</title><rect x="24.0532%" y="1541" width="1.0408%" height="15" fill="rgb(252,177,53)" fg:x="832" fg:w="36"/><text x="24.3032%" y="1551.50"></text></g><g><title>realloc (35 samples, 1.01%)</title><rect x="24.0821%" y="1525" width="1.0119%" height="15" fill="rgb(237,209,29)" fg:x="833" fg:w="35"/><text x="24.3321%" y="1535.50"></text></g><g><title>[libc.so.6] (27 samples, 0.78%)</title><rect x="24.3134%" y="1509" width="0.7806%" height="15" fill="rgb(212,65,23)" fg:x="841" fg:w="27"/><text x="24.5634%" y="1519.50"></text></g><g><title>[libc.so.6] (22 samples, 0.64%)</title><rect x="24.4579%" y="1493" width="0.6360%" height="15" fill="rgb(230,222,46)" fg:x="846" fg:w="22"/><text x="24.7079%" y="1503.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (42 samples, 1.21%)</title><rect x="23.9086%" y="1653" width="1.2142%" height="15" fill="rgb(215,135,32)" fg:x="827" fg:w="42"/><text x="24.1586%" y="1663.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (42 samples, 1.21%)</title><rect x="23.9086%" y="1637" width="1.2142%" height="15" fill="rgb(246,101,22)" fg:x="827" fg:w="42"/><text x="24.1586%" y="1647.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (42 samples, 1.21%)</title><rect x="23.9086%" y="1621" width="1.2142%" height="15" fill="rgb(206,107,13)" fg:x="827" fg:w="42"/><text x="24.1586%" y="1631.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (42 samples, 1.21%)</title><rect x="23.9086%" y="1605" width="1.2142%" height="15" fill="rgb(250,100,44)" fg:x="827" fg:w="42"/><text x="24.1586%" y="1615.50"></text></g><g><title>core::cmp::max (1 samples, 0.03%)</title><rect x="25.0940%" y="1589" width="0.0289%" height="15" fill="rgb(231,147,38)" fg:x="868" fg:w="1"/><text x="25.3440%" y="1599.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.03%)</title><rect x="25.0940%" y="1573" width="0.0289%" height="15" fill="rgb(229,8,40)" fg:x="868" fg:w="1"/><text x="25.3440%" y="1583.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.03%)</title><rect x="25.0940%" y="1557" width="0.0289%" height="15" fill="rgb(221,135,30)" fg:x="868" fg:w="1"/><text x="25.3440%" y="1567.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (49 samples, 1.42%)</title><rect x="23.8797%" y="1701" width="1.4166%" height="15" fill="rgb(249,193,18)" fg:x="826" fg:w="49"/><text x="24.1297%" y="1711.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (49 samples, 1.42%)</title><rect x="23.8797%" y="1685" width="1.4166%" height="15" fill="rgb(209,133,39)" fg:x="826" fg:w="49"/><text x="24.1297%" y="1695.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (49 samples, 1.42%)</title><rect x="23.8797%" y="1669" width="1.4166%" height="15" fill="rgb(232,100,14)" fg:x="826" fg:w="49"/><text x="24.1297%" y="1679.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.17%)</title><rect x="25.1229%" y="1653" width="0.1735%" height="15" fill="rgb(224,185,1)" fg:x="869" fg:w="6"/><text x="25.3729%" y="1663.50"></text></g><g><title>[libc.so.6] (6 samples, 0.17%)</title><rect x="25.1229%" y="1637" width="0.1735%" height="15" fill="rgb(223,139,8)" fg:x="869" fg:w="6"/><text x="25.3729%" y="1647.50"></text></g><g><title>&lt;redis::cmd::Cmd as redis::types::RedisWrite&gt;::write_arg (52 samples, 1.50%)</title><rect x="23.8797%" y="1717" width="1.5033%" height="15" fill="rgb(232,213,38)" fg:x="826" fg:w="52"/><text x="24.1297%" y="1727.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.09%)</title><rect x="25.2963%" y="1701" width="0.0867%" height="15" fill="rgb(207,94,22)" fg:x="875" fg:w="3"/><text x="25.5463%" y="1711.50"></text></g><g><title>core::ptr::write (3 samples, 0.09%)</title><rect x="25.2963%" y="1685" width="0.0867%" height="15" fill="rgb(219,183,54)" fg:x="875" fg:w="3"/><text x="25.5463%" y="1695.50"></text></g><g><title>&lt;alloc::string::String as redis::types::ToRedisArgs&gt;::write_redis_args (53 samples, 1.53%)</title><rect x="23.8797%" y="1733" width="1.5322%" height="15" fill="rgb(216,185,54)" fg:x="826" fg:w="53"/><text x="24.1297%" y="1743.50"></text></g><g><title>alloc::string::String::as_bytes (1 samples, 0.03%)</title><rect x="25.3831%" y="1717" width="0.0289%" height="15" fill="rgb(254,217,39)" fg:x="878" fg:w="1"/><text x="25.6331%" y="1727.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="25.3831%" y="1701" width="0.0289%" height="15" fill="rgb(240,178,23)" fg:x="878" fg:w="1"/><text x="25.6331%" y="1711.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.03%)</title><rect x="25.3831%" y="1685" width="0.0289%" height="15" fill="rgb(218,11,47)" fg:x="878" fg:w="1"/><text x="25.6331%" y="1695.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="25.3831%" y="1669" width="0.0289%" height="15" fill="rgb(218,51,51)" fg:x="878" fg:w="1"/><text x="25.6331%" y="1679.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.09%)</title><rect x="25.4120%" y="1637" width="0.0867%" height="15" fill="rgb(238,126,27)" fg:x="879" fg:w="3"/><text x="25.6620%" y="1647.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.09%)</title><rect x="25.4120%" y="1621" width="0.0867%" height="15" fill="rgb(249,202,22)" fg:x="879" fg:w="3"/><text x="25.6620%" y="1631.50"></text></g><g><title>redis::cmd::Cmd::arg (64 samples, 1.85%)</title><rect x="23.8797%" y="1749" width="1.8502%" height="15" fill="rgb(254,195,49)" fg:x="826" fg:w="64"/><text x="24.1297%" y="1759.50">r..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (11 samples, 0.32%)</title><rect x="25.4120%" y="1733" width="0.3180%" height="15" fill="rgb(208,123,14)" fg:x="879" fg:w="11"/><text x="25.6620%" y="1743.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (11 samples, 0.32%)</title><rect x="25.4120%" y="1717" width="0.3180%" height="15" fill="rgb(224,200,8)" fg:x="879" fg:w="11"/><text x="25.6620%" y="1727.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (11 samples, 0.32%)</title><rect x="25.4120%" y="1701" width="0.3180%" height="15" fill="rgb(217,61,36)" fg:x="879" fg:w="11"/><text x="25.6620%" y="1711.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.32%)</title><rect x="25.4120%" y="1685" width="0.3180%" height="15" fill="rgb(206,35,45)" fg:x="879" fg:w="11"/><text x="25.6620%" y="1695.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.32%)</title><rect x="25.4120%" y="1669" width="0.3180%" height="15" fill="rgb(217,65,33)" fg:x="879" fg:w="11"/><text x="25.6620%" y="1679.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.32%)</title><rect x="25.4120%" y="1653" width="0.3180%" height="15" fill="rgb(222,158,48)" fg:x="879" fg:w="11"/><text x="25.6620%" y="1663.50"></text></g><g><title>cfree (8 samples, 0.23%)</title><rect x="25.4987%" y="1637" width="0.2313%" height="15" fill="rgb(254,2,54)" fg:x="882" fg:w="8"/><text x="25.7487%" y="1647.50"></text></g><g><title>[libc.so.6] (5 samples, 0.14%)</title><rect x="25.5854%" y="1621" width="0.1446%" height="15" fill="rgb(250,143,38)" fg:x="885" fg:w="5"/><text x="25.8354%" y="1631.50"></text></g><g><title>redis::cmd::Cmd::new (1 samples, 0.03%)</title><rect x="25.7300%" y="1749" width="0.0289%" height="15" fill="rgb(248,25,0)" fg:x="890" fg:w="1"/><text x="25.9800%" y="1759.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.03%)</title><rect x="25.8745%" y="1605" width="0.0289%" height="15" fill="rgb(206,152,27)" fg:x="895" fg:w="1"/><text x="26.1245%" y="1615.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.03%)</title><rect x="25.9034%" y="1573" width="0.0289%" height="15" fill="rgb(240,77,30)" fg:x="896" fg:w="1"/><text x="26.1534%" y="1583.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="25.9613%" y="1557" width="0.0289%" height="15" fill="rgb(231,5,3)" fg:x="898" fg:w="1"/><text x="26.2113%" y="1567.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="25.9613%" y="1541" width="0.0289%" height="15" fill="rgb(207,226,32)" fg:x="898" fg:w="1"/><text x="26.2113%" y="1551.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.03%)</title><rect x="25.9902%" y="1557" width="0.0289%" height="15" fill="rgb(222,207,47)" fg:x="899" fg:w="1"/><text x="26.2402%" y="1567.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.17%)</title><rect x="25.9324%" y="1573" width="0.1735%" height="15" fill="rgb(229,115,45)" fg:x="897" fg:w="6"/><text x="26.1824%" y="1583.50"></text></g><g><title>malloc (3 samples, 0.09%)</title><rect x="26.0191%" y="1557" width="0.0867%" height="15" fill="rgb(224,191,6)" fg:x="900" fg:w="3"/><text x="26.2691%" y="1567.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (10 samples, 0.29%)</title><rect x="25.8745%" y="1637" width="0.2891%" height="15" fill="rgb(230,227,24)" fg:x="895" fg:w="10"/><text x="26.1245%" y="1647.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.29%)</title><rect x="25.8745%" y="1621" width="0.2891%" height="15" fill="rgb(228,80,19)" fg:x="895" fg:w="10"/><text x="26.1245%" y="1631.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.26%)</title><rect x="25.9034%" y="1605" width="0.2602%" height="15" fill="rgb(247,229,0)" fg:x="896" fg:w="9"/><text x="26.1534%" y="1615.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 0.26%)</title><rect x="25.9034%" y="1589" width="0.2602%" height="15" fill="rgb(237,194,15)" fg:x="896" fg:w="9"/><text x="26.1534%" y="1599.50"></text></g><g><title>core::cmp::max (2 samples, 0.06%)</title><rect x="26.1058%" y="1573" width="0.0578%" height="15" fill="rgb(219,203,20)" fg:x="903" fg:w="2"/><text x="26.3558%" y="1583.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.06%)</title><rect x="26.1058%" y="1557" width="0.0578%" height="15" fill="rgb(234,128,8)" fg:x="903" fg:w="2"/><text x="26.3558%" y="1567.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.06%)</title><rect x="26.1058%" y="1541" width="0.0578%" height="15" fill="rgb(248,202,8)" fg:x="903" fg:w="2"/><text x="26.3558%" y="1551.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (11 samples, 0.32%)</title><rect x="25.8745%" y="1685" width="0.3180%" height="15" fill="rgb(206,104,37)" fg:x="895" fg:w="11"/><text x="26.1245%" y="1695.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (11 samples, 0.32%)</title><rect x="25.8745%" y="1669" width="0.3180%" height="15" fill="rgb(223,8,27)" fg:x="895" fg:w="11"/><text x="26.1245%" y="1679.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (11 samples, 0.32%)</title><rect x="25.8745%" y="1653" width="0.3180%" height="15" fill="rgb(216,217,28)" fg:x="895" fg:w="11"/><text x="26.1245%" y="1663.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="26.1636%" y="1637" width="0.0289%" height="15" fill="rgb(249,199,1)" fg:x="905" fg:w="1"/><text x="26.4136%" y="1647.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.03%)</title><rect x="26.2215%" y="1637" width="0.0289%" height="15" fill="rgb(240,85,17)" fg:x="907" fg:w="1"/><text x="26.4715%" y="1647.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (36 samples, 1.04%)</title><rect x="26.2215%" y="1669" width="1.0408%" height="15" fill="rgb(206,108,45)" fg:x="907" fg:w="36"/><text x="26.4715%" y="1679.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (36 samples, 1.04%)</title><rect x="26.2215%" y="1653" width="1.0408%" height="15" fill="rgb(245,210,41)" fg:x="907" fg:w="36"/><text x="26.4715%" y="1663.50"></text></g><g><title>alloc::raw_vec::finish_grow (35 samples, 1.01%)</title><rect x="26.2504%" y="1637" width="1.0119%" height="15" fill="rgb(206,13,37)" fg:x="908" fg:w="35"/><text x="26.5004%" y="1647.50"></text></g><g><title>malloc (33 samples, 0.95%)</title><rect x="26.3082%" y="1621" width="0.9540%" height="15" fill="rgb(250,61,18)" fg:x="910" fg:w="33"/><text x="26.5582%" y="1631.50"></text></g><g><title>[libc.so.6] (31 samples, 0.90%)</title><rect x="26.3660%" y="1605" width="0.8962%" height="15" fill="rgb(235,172,48)" fg:x="912" fg:w="31"/><text x="26.6160%" y="1615.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="27.2333%" y="1589" width="0.0289%" height="15" fill="rgb(249,201,17)" fg:x="942" fg:w="1"/><text x="27.4833%" y="1599.50"></text></g><g><title>redis::cmd::cmd (54 samples, 1.56%)</title><rect x="25.7589%" y="1749" width="1.5611%" height="15" fill="rgb(219,208,6)" fg:x="891" fg:w="54"/><text x="26.0089%" y="1759.50"></text></g><g><title>redis::cmd::Cmd::arg (50 samples, 1.45%)</title><rect x="25.8745%" y="1733" width="1.4455%" height="15" fill="rgb(248,31,23)" fg:x="895" fg:w="50"/><text x="26.1245%" y="1743.50"></text></g><g><title>&lt;&amp;str as redis::types::ToRedisArgs&gt;::write_redis_args (50 samples, 1.45%)</title><rect x="25.8745%" y="1717" width="1.4455%" height="15" fill="rgb(245,15,42)" fg:x="895" fg:w="50"/><text x="26.1245%" y="1727.50"></text></g><g><title>&lt;redis::cmd::Cmd as redis::types::RedisWrite&gt;::write_arg (50 samples, 1.45%)</title><rect x="25.8745%" y="1701" width="1.4455%" height="15" fill="rgb(222,217,39)" fg:x="895" fg:w="50"/><text x="26.1245%" y="1711.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (39 samples, 1.13%)</title><rect x="26.1925%" y="1685" width="1.1275%" height="15" fill="rgb(210,219,27)" fg:x="906" fg:w="39"/><text x="26.4425%" y="1695.50"></text></g><g><title>core::ptr::write (2 samples, 0.06%)</title><rect x="27.2622%" y="1669" width="0.0578%" height="15" fill="rgb(252,166,36)" fg:x="943" fg:w="2"/><text x="27.5122%" y="1679.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.17%)</title><rect x="27.3200%" y="1717" width="0.1735%" height="15" fill="rgb(245,132,34)" fg:x="945" fg:w="6"/><text x="27.5700%" y="1727.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (6 samples, 0.17%)</title><rect x="27.3200%" y="1701" width="0.1735%" height="15" fill="rgb(236,54,3)" fg:x="945" fg:w="6"/><text x="27.5700%" y="1711.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.17%)</title><rect x="27.3200%" y="1685" width="0.1735%" height="15" fill="rgb(241,173,43)" fg:x="945" fg:w="6"/><text x="27.5700%" y="1695.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (6 samples, 0.17%)</title><rect x="27.3200%" y="1669" width="0.1735%" height="15" fill="rgb(215,190,9)" fg:x="945" fg:w="6"/><text x="27.5700%" y="1679.50"></text></g><g><title>alloc::alloc::Global::grow_impl (6 samples, 0.17%)</title><rect x="27.3200%" y="1653" width="0.1735%" height="15" fill="rgb(242,101,16)" fg:x="945" fg:w="6"/><text x="27.5700%" y="1663.50"></text></g><g><title>alloc::alloc::realloc (6 samples, 0.17%)</title><rect x="27.3200%" y="1637" width="0.1735%" height="15" fill="rgb(223,190,21)" fg:x="945" fg:w="6"/><text x="27.5700%" y="1647.50"></text></g><g><title>realloc (6 samples, 0.17%)</title><rect x="27.3200%" y="1621" width="0.1735%" height="15" fill="rgb(215,228,25)" fg:x="945" fg:w="6"/><text x="27.5700%" y="1631.50"></text></g><g><title>[libc.so.6] (6 samples, 0.17%)</title><rect x="27.3200%" y="1605" width="0.1735%" height="15" fill="rgb(225,36,22)" fg:x="945" fg:w="6"/><text x="27.5700%" y="1615.50"></text></g><g><title>[libc.so.6] (6 samples, 0.17%)</title><rect x="27.3200%" y="1589" width="0.1735%" height="15" fill="rgb(251,106,46)" fg:x="945" fg:w="6"/><text x="27.5700%" y="1599.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="27.4646%" y="1573" width="0.0289%" height="15" fill="rgb(208,90,1)" fg:x="950" fg:w="1"/><text x="27.7146%" y="1583.50"></text></g><g><title>redis::commands::&lt;impl redis::pipeline::Pipeline&gt;::publish (133 samples, 3.85%)</title><rect x="23.7063%" y="1765" width="3.8450%" height="15" fill="rgb(243,10,4)" fg:x="820" fg:w="133"/><text x="23.9563%" y="1775.50">redi..</text></g><g><title>redis::pipeline::Pipeline::add_command (8 samples, 0.23%)</title><rect x="27.3200%" y="1749" width="0.2313%" height="15" fill="rgb(212,137,27)" fg:x="945" fg:w="8"/><text x="27.5700%" y="1759.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (8 samples, 0.23%)</title><rect x="27.3200%" y="1733" width="0.2313%" height="15" fill="rgb(231,220,49)" fg:x="945" fg:w="8"/><text x="27.5700%" y="1743.50"></text></g><g><title>core::ptr::write (2 samples, 0.06%)</title><rect x="27.4935%" y="1717" width="0.0578%" height="15" fill="rgb(237,96,20)" fg:x="951" fg:w="2"/><text x="27.7435%" y="1727.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.03%)</title><rect x="27.6091%" y="1733" width="0.0289%" height="15" fill="rgb(239,229,30)" fg:x="955" fg:w="1"/><text x="27.8591%" y="1743.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="27.6091%" y="1717" width="0.0289%" height="15" fill="rgb(219,65,33)" fg:x="955" fg:w="1"/><text x="27.8591%" y="1727.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="27.6091%" y="1701" width="0.0289%" height="15" fill="rgb(243,134,7)" fg:x="955" fg:w="1"/><text x="27.8591%" y="1711.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.03%)</title><rect x="27.6091%" y="1685" width="0.0289%" height="15" fill="rgb(216,177,54)" fg:x="955" fg:w="1"/><text x="27.8591%" y="1695.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="27.6091%" y="1669" width="0.0289%" height="15" fill="rgb(211,160,20)" fg:x="955" fg:w="1"/><text x="27.8591%" y="1679.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="27.6091%" y="1653" width="0.0289%" height="15" fill="rgb(239,85,39)" fg:x="955" fg:w="1"/><text x="27.8591%" y="1663.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="27.6091%" y="1637" width="0.0289%" height="15" fill="rgb(232,125,22)" fg:x="955" fg:w="1"/><text x="27.8591%" y="1647.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="27.6091%" y="1621" width="0.0289%" height="15" fill="rgb(244,57,34)" fg:x="955" fg:w="1"/><text x="27.8591%" y="1631.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="27.6091%" y="1605" width="0.0289%" height="15" fill="rgb(214,203,32)" fg:x="955" fg:w="1"/><text x="27.8591%" y="1615.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::end (3 samples, 0.09%)</title><rect x="27.6670%" y="1701" width="0.0867%" height="15" fill="rgb(207,58,43)" fg:x="957" fg:w="3"/><text x="27.9170%" y="1711.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::end (3 samples, 0.09%)</title><rect x="27.6670%" y="1685" width="0.0867%" height="15" fill="rgb(215,193,15)" fg:x="957" fg:w="3"/><text x="27.9170%" y="1695.50"></text></g><g><title>serde_json::ser::Formatter::end_object (3 samples, 0.09%)</title><rect x="27.6670%" y="1669" width="0.0867%" height="15" fill="rgb(232,15,44)" fg:x="957" fg:w="3"/><text x="27.9170%" y="1679.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (3 samples, 0.09%)</title><rect x="27.6670%" y="1653" width="0.0867%" height="15" fill="rgb(212,3,48)" fg:x="957" fg:w="3"/><text x="27.9170%" y="1663.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (3 samples, 0.09%)</title><rect x="27.6670%" y="1637" width="0.0867%" height="15" fill="rgb(218,128,7)" fg:x="957" fg:w="3"/><text x="27.9170%" y="1647.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.09%)</title><rect x="27.6670%" y="1621" width="0.0867%" height="15" fill="rgb(226,216,39)" fg:x="957" fg:w="3"/><text x="27.9170%" y="1631.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.09%)</title><rect x="27.6670%" y="1605" width="0.0867%" height="15" fill="rgb(243,47,51)" fg:x="957" fg:w="3"/><text x="27.9170%" y="1615.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.09%)</title><rect x="27.6670%" y="1589" width="0.0867%" height="15" fill="rgb(241,183,40)" fg:x="957" fg:w="3"/><text x="27.9170%" y="1599.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.09%)</title><rect x="27.6670%" y="1573" width="0.0867%" height="15" fill="rgb(231,217,32)" fg:x="957" fg:w="3"/><text x="27.9170%" y="1583.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="28.0139%" y="1509" width="0.0289%" height="15" fill="rgb(229,61,38)" fg:x="969" fg:w="1"/><text x="28.2639%" y="1519.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="28.0139%" y="1493" width="0.0289%" height="15" fill="rgb(225,210,5)" fg:x="969" fg:w="1"/><text x="28.2639%" y="1503.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.03%)</title><rect x="28.0139%" y="1477" width="0.0289%" height="15" fill="rgb(231,79,45)" fg:x="969" fg:w="1"/><text x="28.2639%" y="1487.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (9 samples, 0.26%)</title><rect x="27.8115%" y="1653" width="0.2602%" height="15" fill="rgb(224,100,7)" fg:x="962" fg:w="9"/><text x="28.0615%" y="1663.50"></text></g><g><title>serde_json::ser::format_escaped_str (9 samples, 0.26%)</title><rect x="27.8115%" y="1637" width="0.2602%" height="15" fill="rgb(241,198,18)" fg:x="962" fg:w="9"/><text x="28.0615%" y="1647.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (9 samples, 0.26%)</title><rect x="27.8115%" y="1621" width="0.2602%" height="15" fill="rgb(252,97,53)" fg:x="962" fg:w="9"/><text x="28.0615%" y="1631.50"></text></g><g><title>serde_json::ser::Formatter::write_string_fragment (3 samples, 0.09%)</title><rect x="27.9850%" y="1605" width="0.0867%" height="15" fill="rgb(220,88,7)" fg:x="968" fg:w="3"/><text x="28.2350%" y="1615.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (3 samples, 0.09%)</title><rect x="27.9850%" y="1589" width="0.0867%" height="15" fill="rgb(213,176,14)" fg:x="968" fg:w="3"/><text x="28.2350%" y="1599.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (3 samples, 0.09%)</title><rect x="27.9850%" y="1573" width="0.0867%" height="15" fill="rgb(246,73,7)" fg:x="968" fg:w="3"/><text x="28.2350%" y="1583.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.09%)</title><rect x="27.9850%" y="1557" width="0.0867%" height="15" fill="rgb(245,64,36)" fg:x="968" fg:w="3"/><text x="28.2350%" y="1567.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.09%)</title><rect x="27.9850%" y="1541" width="0.0867%" height="15" fill="rgb(245,80,10)" fg:x="968" fg:w="3"/><text x="28.2350%" y="1551.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.09%)</title><rect x="27.9850%" y="1525" width="0.0867%" height="15" fill="rgb(232,107,50)" fg:x="968" fg:w="3"/><text x="28.2350%" y="1535.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="28.0428%" y="1509" width="0.0289%" height="15" fill="rgb(253,3,0)" fg:x="970" fg:w="1"/><text x="28.2928%" y="1519.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="28.0428%" y="1493" width="0.0289%" height="15" fill="rgb(212,99,53)" fg:x="970" fg:w="1"/><text x="28.2928%" y="1503.50"></text></g><g><title>serde_json::ser::Formatter::begin_string (1 samples, 0.03%)</title><rect x="28.1295%" y="1589" width="0.0289%" height="15" fill="rgb(249,111,54)" fg:x="973" fg:w="1"/><text x="28.3795%" y="1599.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.03%)</title><rect x="28.1295%" y="1573" width="0.0289%" height="15" fill="rgb(249,55,30)" fg:x="973" fg:w="1"/><text x="28.3795%" y="1583.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.03%)</title><rect x="28.1295%" y="1557" width="0.0289%" height="15" fill="rgb(237,47,42)" fg:x="973" fg:w="1"/><text x="28.3795%" y="1567.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="28.1295%" y="1541" width="0.0289%" height="15" fill="rgb(211,20,18)" fg:x="973" fg:w="1"/><text x="28.3795%" y="1551.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="28.1295%" y="1525" width="0.0289%" height="15" fill="rgb(231,203,46)" fg:x="973" fg:w="1"/><text x="28.3795%" y="1535.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="28.1295%" y="1509" width="0.0289%" height="15" fill="rgb(237,142,3)" fg:x="973" fg:w="1"/><text x="28.3795%" y="1519.50"></text></g><g><title>serde_json::ser::Formatter::end_string (1 samples, 0.03%)</title><rect x="28.1584%" y="1589" width="0.0289%" height="15" fill="rgb(241,107,1)" fg:x="974" fg:w="1"/><text x="28.4084%" y="1599.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.03%)</title><rect x="28.1584%" y="1573" width="0.0289%" height="15" fill="rgb(229,83,13)" fg:x="974" fg:w="1"/><text x="28.4084%" y="1583.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.03%)</title><rect x="28.1584%" y="1557" width="0.0289%" height="15" fill="rgb(241,91,40)" fg:x="974" fg:w="1"/><text x="28.4084%" y="1567.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="28.1584%" y="1541" width="0.0289%" height="15" fill="rgb(225,3,45)" fg:x="974" fg:w="1"/><text x="28.4084%" y="1551.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="28.1584%" y="1525" width="0.0289%" height="15" fill="rgb(244,223,14)" fg:x="974" fg:w="1"/><text x="28.4084%" y="1535.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="28.1584%" y="1509" width="0.0289%" height="15" fill="rgb(224,124,37)" fg:x="974" fg:w="1"/><text x="28.4084%" y="1519.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="28.1584%" y="1493" width="0.0289%" height="15" fill="rgb(251,171,30)" fg:x="974" fg:w="1"/><text x="28.4084%" y="1503.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.03%)</title><rect x="28.1873%" y="1573" width="0.0289%" height="15" fill="rgb(236,46,54)" fg:x="975" fg:w="1"/><text x="28.4373%" y="1583.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="28.1873%" y="1557" width="0.0289%" height="15" fill="rgb(245,213,5)" fg:x="975" fg:w="1"/><text x="28.4373%" y="1567.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.03%)</title><rect x="28.1873%" y="1541" width="0.0289%" height="15" fill="rgb(230,144,27)" fg:x="975" fg:w="1"/><text x="28.4373%" y="1551.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_tuple_variant (5 samples, 0.14%)</title><rect x="28.1006%" y="1637" width="0.1446%" height="15" fill="rgb(220,86,6)" fg:x="972" fg:w="5"/><text x="28.3506%" y="1647.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (5 samples, 0.14%)</title><rect x="28.1006%" y="1621" width="0.1446%" height="15" fill="rgb(240,20,13)" fg:x="972" fg:w="5"/><text x="28.3506%" y="1631.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.14%)</title><rect x="28.1006%" y="1605" width="0.1446%" height="15" fill="rgb(217,89,34)" fg:x="972" fg:w="5"/><text x="28.3506%" y="1615.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (2 samples, 0.06%)</title><rect x="28.1873%" y="1589" width="0.0578%" height="15" fill="rgb(229,13,5)" fg:x="975" fg:w="2"/><text x="28.4373%" y="1599.50"></text></g><g><title>serde_json::ser::Formatter::write_string_fragment (1 samples, 0.03%)</title><rect x="28.2162%" y="1573" width="0.0289%" height="15" fill="rgb(244,67,35)" fg:x="976" fg:w="1"/><text x="28.4662%" y="1583.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.03%)</title><rect x="28.2162%" y="1557" width="0.0289%" height="15" fill="rgb(221,40,2)" fg:x="976" fg:w="1"/><text x="28.4662%" y="1567.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.03%)</title><rect x="28.2162%" y="1541" width="0.0289%" height="15" fill="rgb(237,157,21)" fg:x="976" fg:w="1"/><text x="28.4662%" y="1551.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="28.2162%" y="1525" width="0.0289%" height="15" fill="rgb(222,94,11)" fg:x="976" fg:w="1"/><text x="28.4662%" y="1535.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="28.2162%" y="1509" width="0.0289%" height="15" fill="rgb(249,113,6)" fg:x="976" fg:w="1"/><text x="28.4662%" y="1519.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="28.2162%" y="1493" width="0.0289%" height="15" fill="rgb(238,137,36)" fg:x="976" fg:w="1"/><text x="28.4662%" y="1503.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="28.2162%" y="1477" width="0.0289%" height="15" fill="rgb(210,102,26)" fg:x="976" fg:w="1"/><text x="28.4662%" y="1487.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="28.2162%" y="1461" width="0.0289%" height="15" fill="rgb(218,30,30)" fg:x="976" fg:w="1"/><text x="28.4662%" y="1471.50"></text></g><g><title>itoa::Buffer::format (12 samples, 0.35%)</title><rect x="28.2452%" y="1557" width="0.3469%" height="15" fill="rgb(214,67,26)" fg:x="977" fg:w="12"/><text x="28.4952%" y="1567.50"></text></g><g><title>itoa::&lt;impl itoa::private::Sealed for u64&gt;::write (12 samples, 0.35%)</title><rect x="28.2452%" y="1541" width="0.3469%" height="15" fill="rgb(251,9,53)" fg:x="977" fg:w="12"/><text x="28.4952%" y="1551.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.12%)</title><rect x="28.4764%" y="1525" width="0.1156%" height="15" fill="rgb(228,204,25)" fg:x="985" fg:w="4"/><text x="28.7264%" y="1535.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.09%)</title><rect x="28.5921%" y="1477" width="0.0867%" height="15" fill="rgb(207,153,8)" fg:x="989" fg:w="3"/><text x="28.8421%" y="1487.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.06%)</title><rect x="28.6210%" y="1461" width="0.0578%" height="15" fill="rgb(242,9,16)" fg:x="990" fg:w="2"/><text x="28.8710%" y="1471.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (2 samples, 0.06%)</title><rect x="28.6210%" y="1445" width="0.0578%" height="15" fill="rgb(217,211,10)" fg:x="990" fg:w="2"/><text x="28.8710%" y="1455.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (2 samples, 0.06%)</title><rect x="28.6210%" y="1429" width="0.0578%" height="15" fill="rgb(219,228,52)" fg:x="990" fg:w="2"/><text x="28.8710%" y="1439.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u64&gt;::serialize (20 samples, 0.58%)</title><rect x="28.2452%" y="1605" width="0.5782%" height="15" fill="rgb(231,92,29)" fg:x="977" fg:w="20"/><text x="28.4952%" y="1615.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_u64 (20 samples, 0.58%)</title><rect x="28.2452%" y="1589" width="0.5782%" height="15" fill="rgb(232,8,23)" fg:x="977" fg:w="20"/><text x="28.4952%" y="1599.50"></text></g><g><title>serde_json::ser::Formatter::write_u64 (20 samples, 0.58%)</title><rect x="28.2452%" y="1573" width="0.5782%" height="15" fill="rgb(216,211,34)" fg:x="977" fg:w="20"/><text x="28.4952%" y="1583.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (8 samples, 0.23%)</title><rect x="28.5921%" y="1557" width="0.2313%" height="15" fill="rgb(236,151,0)" fg:x="989" fg:w="8"/><text x="28.8421%" y="1567.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (8 samples, 0.23%)</title><rect x="28.5921%" y="1541" width="0.2313%" height="15" fill="rgb(209,168,3)" fg:x="989" fg:w="8"/><text x="28.8421%" y="1551.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (8 samples, 0.23%)</title><rect x="28.5921%" y="1525" width="0.2313%" height="15" fill="rgb(208,129,28)" fg:x="989" fg:w="8"/><text x="28.8421%" y="1535.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (8 samples, 0.23%)</title><rect x="28.5921%" y="1509" width="0.2313%" height="15" fill="rgb(229,78,22)" fg:x="989" fg:w="8"/><text x="28.8421%" y="1519.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (8 samples, 0.23%)</title><rect x="28.5921%" y="1493" width="0.2313%" height="15" fill="rgb(228,187,13)" fg:x="989" fg:w="8"/><text x="28.8421%" y="1503.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.14%)</title><rect x="28.6788%" y="1477" width="0.1446%" height="15" fill="rgb(240,119,24)" fg:x="992" fg:w="5"/><text x="28.9288%" y="1487.50"></text></g><g><title>[libc.so.6] (5 samples, 0.14%)</title><rect x="28.6788%" y="1461" width="0.1446%" height="15" fill="rgb(209,194,42)" fg:x="992" fg:w="5"/><text x="28.9288%" y="1471.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="28.8234%" y="1509" width="0.0289%" height="15" fill="rgb(247,200,46)" fg:x="997" fg:w="1"/><text x="29.0734%" y="1519.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="28.8234%" y="1493" width="0.0289%" height="15" fill="rgb(218,76,16)" fg:x="997" fg:w="1"/><text x="29.0734%" y="1503.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.03%)</title><rect x="28.8234%" y="1477" width="0.0289%" height="15" fill="rgb(225,21,48)" fg:x="997" fg:w="1"/><text x="29.0734%" y="1487.50"></text></g><g><title>exchange_lib::event::_::&lt;impl serde::ser::Serialize for exchange_lib::event::MatchingEngineEvent&gt;::serialize (28 samples, 0.81%)</title><rect x="28.0717%" y="1653" width="0.8095%" height="15" fill="rgb(239,223,50)" fg:x="971" fg:w="28"/><text x="28.3217%" y="1663.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeTupleVariant&gt;::serialize_field (22 samples, 0.64%)</title><rect x="28.2452%" y="1637" width="0.6360%" height="15" fill="rgb(244,45,21)" fg:x="977" fg:w="22"/><text x="28.4952%" y="1647.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeSeq&gt;::serialize_element (22 samples, 0.64%)</title><rect x="28.2452%" y="1621" width="0.6360%" height="15" fill="rgb(232,33,43)" fg:x="977" fg:w="22"/><text x="28.4952%" y="1631.50"></text></g><g><title>serde_json::ser::Formatter::begin_array_value (2 samples, 0.06%)</title><rect x="28.8234%" y="1605" width="0.0578%" height="15" fill="rgb(209,8,3)" fg:x="997" fg:w="2"/><text x="29.0734%" y="1615.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (2 samples, 0.06%)</title><rect x="28.8234%" y="1589" width="0.0578%" height="15" fill="rgb(214,25,53)" fg:x="997" fg:w="2"/><text x="29.0734%" y="1599.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (2 samples, 0.06%)</title><rect x="28.8234%" y="1573" width="0.0578%" height="15" fill="rgb(254,186,54)" fg:x="997" fg:w="2"/><text x="29.0734%" y="1583.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.06%)</title><rect x="28.8234%" y="1557" width="0.0578%" height="15" fill="rgb(208,174,49)" fg:x="997" fg:w="2"/><text x="29.0734%" y="1567.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.06%)</title><rect x="28.8234%" y="1541" width="0.0578%" height="15" fill="rgb(233,191,51)" fg:x="997" fg:w="2"/><text x="29.0734%" y="1551.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.06%)</title><rect x="28.8234%" y="1525" width="0.0578%" height="15" fill="rgb(222,134,10)" fg:x="997" fg:w="2"/><text x="29.0734%" y="1535.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="28.8523%" y="1509" width="0.0289%" height="15" fill="rgb(230,226,20)" fg:x="998" fg:w="1"/><text x="29.1023%" y="1519.50"></text></g><g><title>serde_json::ser::Formatter::begin_object (3 samples, 0.09%)</title><rect x="28.8812%" y="1653" width="0.0867%" height="15" fill="rgb(251,111,25)" fg:x="999" fg:w="3"/><text x="29.1312%" y="1663.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (3 samples, 0.09%)</title><rect x="28.8812%" y="1637" width="0.0867%" height="15" fill="rgb(224,40,46)" fg:x="999" fg:w="3"/><text x="29.1312%" y="1647.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (3 samples, 0.09%)</title><rect x="28.8812%" y="1621" width="0.0867%" height="15" fill="rgb(236,108,47)" fg:x="999" fg:w="3"/><text x="29.1312%" y="1631.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.09%)</title><rect x="28.8812%" y="1605" width="0.0867%" height="15" fill="rgb(234,93,0)" fg:x="999" fg:w="3"/><text x="29.1312%" y="1615.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.09%)</title><rect x="28.8812%" y="1589" width="0.0867%" height="15" fill="rgb(224,213,32)" fg:x="999" fg:w="3"/><text x="29.1312%" y="1599.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.09%)</title><rect x="28.8812%" y="1573" width="0.0867%" height="15" fill="rgb(251,11,48)" fg:x="999" fg:w="3"/><text x="29.1312%" y="1583.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.09%)</title><rect x="28.8812%" y="1557" width="0.0867%" height="15" fill="rgb(236,173,5)" fg:x="999" fg:w="3"/><text x="29.1312%" y="1567.50"></text></g><g><title>exchange_lib::message_queue::_::&lt;impl serde::ser::Serialize for exchange_lib::message_queue::Payload&gt;::serialize (45 samples, 1.30%)</title><rect x="27.7537%" y="1685" width="1.3010%" height="15" fill="rgb(230,95,12)" fg:x="960" fg:w="45"/><text x="28.0037%" y="1695.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (43 samples, 1.24%)</title><rect x="27.8115%" y="1669" width="1.2431%" height="15" fill="rgb(232,209,1)" fg:x="962" fg:w="43"/><text x="28.0615%" y="1679.50"></text></g><g><title>serde_json::ser::Formatter::begin_object_value (3 samples, 0.09%)</title><rect x="28.9679%" y="1653" width="0.0867%" height="15" fill="rgb(232,6,1)" fg:x="1002" fg:w="3"/><text x="29.2179%" y="1663.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (3 samples, 0.09%)</title><rect x="28.9679%" y="1637" width="0.0867%" height="15" fill="rgb(210,224,50)" fg:x="1002" fg:w="3"/><text x="29.2179%" y="1647.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (3 samples, 0.09%)</title><rect x="28.9679%" y="1621" width="0.0867%" height="15" fill="rgb(228,127,35)" fg:x="1002" fg:w="3"/><text x="29.2179%" y="1631.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.09%)</title><rect x="28.9679%" y="1605" width="0.0867%" height="15" fill="rgb(245,102,45)" fg:x="1002" fg:w="3"/><text x="29.2179%" y="1615.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.09%)</title><rect x="28.9679%" y="1589" width="0.0867%" height="15" fill="rgb(214,1,49)" fg:x="1002" fg:w="3"/><text x="29.2179%" y="1599.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.09%)</title><rect x="28.9679%" y="1573" width="0.0867%" height="15" fill="rgb(226,163,40)" fg:x="1002" fg:w="3"/><text x="29.2179%" y="1583.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.09%)</title><rect x="28.9679%" y="1557" width="0.0867%" height="15" fill="rgb(239,212,28)" fg:x="1002" fg:w="3"/><text x="29.2179%" y="1567.50"></text></g><g><title>serde_json::ser::Formatter::end_string (1 samples, 0.03%)</title><rect x="29.1125%" y="1589" width="0.0289%" height="15" fill="rgb(220,20,13)" fg:x="1007" fg:w="1"/><text x="29.3625%" y="1599.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.03%)</title><rect x="29.1125%" y="1573" width="0.0289%" height="15" fill="rgb(210,164,35)" fg:x="1007" fg:w="1"/><text x="29.3625%" y="1583.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.03%)</title><rect x="29.1125%" y="1557" width="0.0289%" height="15" fill="rgb(248,109,41)" fg:x="1007" fg:w="1"/><text x="29.3625%" y="1567.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="29.1125%" y="1541" width="0.0289%" height="15" fill="rgb(238,23,50)" fg:x="1007" fg:w="1"/><text x="29.3625%" y="1551.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="29.1125%" y="1525" width="0.0289%" height="15" fill="rgb(211,48,49)" fg:x="1007" fg:w="1"/><text x="29.3625%" y="1535.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="29.1125%" y="1509" width="0.0289%" height="15" fill="rgb(223,36,21)" fg:x="1007" fg:w="1"/><text x="29.3625%" y="1519.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="29.1125%" y="1493" width="0.0289%" height="15" fill="rgb(207,123,46)" fg:x="1007" fg:w="1"/><text x="29.3625%" y="1503.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="29.2859%" y="1573" width="0.0578%" height="15" fill="rgb(240,218,32)" fg:x="1013" fg:w="2"/><text x="29.5359%" y="1583.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="29.2859%" y="1557" width="0.0578%" height="15" fill="rgb(252,5,43)" fg:x="1013" fg:w="2"/><text x="29.5359%" y="1567.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (10 samples, 0.29%)</title><rect x="29.0836%" y="1653" width="0.2891%" height="15" fill="rgb(252,84,19)" fg:x="1006" fg:w="10"/><text x="29.3336%" y="1663.50"></text></g><g><title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (10 samples, 0.29%)</title><rect x="29.0836%" y="1637" width="0.2891%" height="15" fill="rgb(243,152,39)" fg:x="1006" fg:w="10"/><text x="29.3336%" y="1647.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (10 samples, 0.29%)</title><rect x="29.0836%" y="1621" width="0.2891%" height="15" fill="rgb(234,160,15)" fg:x="1006" fg:w="10"/><text x="29.3336%" y="1631.50"></text></g><g><title>serde_json::ser::format_escaped_str (10 samples, 0.29%)</title><rect x="29.0836%" y="1605" width="0.2891%" height="15" fill="rgb(237,34,20)" fg:x="1006" fg:w="10"/><text x="29.3336%" y="1615.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (8 samples, 0.23%)</title><rect x="29.1414%" y="1589" width="0.2313%" height="15" fill="rgb(229,97,13)" fg:x="1008" fg:w="8"/><text x="29.3914%" y="1599.50"></text></g><g><title>serde_json::ser::Formatter::write_string_fragment (1 samples, 0.03%)</title><rect x="29.3437%" y="1573" width="0.0289%" height="15" fill="rgb(234,71,50)" fg:x="1015" fg:w="1"/><text x="29.5937%" y="1583.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.03%)</title><rect x="29.3437%" y="1557" width="0.0289%" height="15" fill="rgb(253,155,4)" fg:x="1015" fg:w="1"/><text x="29.5937%" y="1567.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.03%)</title><rect x="29.3437%" y="1541" width="0.0289%" height="15" fill="rgb(222,185,37)" fg:x="1015" fg:w="1"/><text x="29.5937%" y="1551.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="29.3437%" y="1525" width="0.0289%" height="15" fill="rgb(251,177,13)" fg:x="1015" fg:w="1"/><text x="29.5937%" y="1535.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="29.3437%" y="1509" width="0.0289%" height="15" fill="rgb(250,179,40)" fg:x="1015" fg:w="1"/><text x="29.5937%" y="1519.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="29.3437%" y="1493" width="0.0289%" height="15" fill="rgb(242,44,2)" fg:x="1015" fg:w="1"/><text x="29.5937%" y="1503.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="29.3437%" y="1477" width="0.0289%" height="15" fill="rgb(216,177,13)" fg:x="1015" fg:w="1"/><text x="29.5937%" y="1487.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="29.3437%" y="1461" width="0.0289%" height="15" fill="rgb(216,106,43)" fg:x="1015" fg:w="1"/><text x="29.5937%" y="1471.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (12 samples, 0.35%)</title><rect x="29.0546%" y="1669" width="0.3469%" height="15" fill="rgb(216,183,2)" fg:x="1005" fg:w="12"/><text x="29.3046%" y="1679.50"></text></g><g><title>serde_json::ser::Formatter::begin_object_key (1 samples, 0.03%)</title><rect x="29.3727%" y="1653" width="0.0289%" height="15" fill="rgb(249,75,3)" fg:x="1016" fg:w="1"/><text x="29.6227%" y="1663.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.03%)</title><rect x="29.3727%" y="1637" width="0.0289%" height="15" fill="rgb(219,67,39)" fg:x="1016" fg:w="1"/><text x="29.6227%" y="1647.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.03%)</title><rect x="29.3727%" y="1621" width="0.0289%" height="15" fill="rgb(253,228,2)" fg:x="1016" fg:w="1"/><text x="29.6227%" y="1631.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="29.3727%" y="1605" width="0.0289%" height="15" fill="rgb(235,138,27)" fg:x="1016" fg:w="1"/><text x="29.6227%" y="1615.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="29.3727%" y="1589" width="0.0289%" height="15" fill="rgb(236,97,51)" fg:x="1016" fg:w="1"/><text x="29.6227%" y="1599.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="29.3727%" y="1573" width="0.0289%" height="15" fill="rgb(240,80,30)" fg:x="1016" fg:w="1"/><text x="29.6227%" y="1583.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="29.3727%" y="1557" width="0.0289%" height="15" fill="rgb(230,178,19)" fg:x="1016" fg:w="1"/><text x="29.6227%" y="1567.50"></text></g><g><title>serde_json::ser::Formatter::begin_string (1 samples, 0.03%)</title><rect x="29.4305%" y="1605" width="0.0289%" height="15" fill="rgb(210,190,27)" fg:x="1018" fg:w="1"/><text x="29.6805%" y="1615.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.03%)</title><rect x="29.4305%" y="1589" width="0.0289%" height="15" fill="rgb(222,107,31)" fg:x="1018" fg:w="1"/><text x="29.6805%" y="1599.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.03%)</title><rect x="29.4305%" y="1573" width="0.0289%" height="15" fill="rgb(216,127,34)" fg:x="1018" fg:w="1"/><text x="29.6805%" y="1583.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="29.4305%" y="1557" width="0.0289%" height="15" fill="rgb(234,116,52)" fg:x="1018" fg:w="1"/><text x="29.6805%" y="1567.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="29.4305%" y="1541" width="0.0289%" height="15" fill="rgb(222,124,15)" fg:x="1018" fg:w="1"/><text x="29.6805%" y="1551.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="29.4305%" y="1525" width="0.0289%" height="15" fill="rgb(231,179,28)" fg:x="1018" fg:w="1"/><text x="29.6805%" y="1535.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="29.4305%" y="1509" width="0.0289%" height="15" fill="rgb(226,93,45)" fg:x="1018" fg:w="1"/><text x="29.6805%" y="1519.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (2 samples, 0.06%)</title><rect x="29.4305%" y="1653" width="0.0578%" height="15" fill="rgb(215,8,51)" fg:x="1018" fg:w="2"/><text x="29.6805%" y="1663.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.06%)</title><rect x="29.4305%" y="1637" width="0.0578%" height="15" fill="rgb(223,106,5)" fg:x="1018" fg:w="2"/><text x="29.6805%" y="1647.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.06%)</title><rect x="29.4305%" y="1621" width="0.0578%" height="15" fill="rgb(250,191,5)" fg:x="1018" fg:w="2"/><text x="29.6805%" y="1631.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (1 samples, 0.03%)</title><rect x="29.4594%" y="1605" width="0.0289%" height="15" fill="rgb(242,132,44)" fg:x="1019" fg:w="1"/><text x="29.7094%" y="1615.50"></text></g><g><title>serde_json::ser::Formatter::write_string_fragment (1 samples, 0.03%)</title><rect x="29.4594%" y="1589" width="0.0289%" height="15" fill="rgb(251,152,29)" fg:x="1019" fg:w="1"/><text x="29.7094%" y="1599.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.03%)</title><rect x="29.4594%" y="1573" width="0.0289%" height="15" fill="rgb(218,179,5)" fg:x="1019" fg:w="1"/><text x="29.7094%" y="1583.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.03%)</title><rect x="29.4594%" y="1557" width="0.0289%" height="15" fill="rgb(227,67,19)" fg:x="1019" fg:w="1"/><text x="29.7094%" y="1567.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="29.4594%" y="1541" width="0.0289%" height="15" fill="rgb(233,119,31)" fg:x="1019" fg:w="1"/><text x="29.7094%" y="1551.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="29.4594%" y="1525" width="0.0289%" height="15" fill="rgb(241,120,22)" fg:x="1019" fg:w="1"/><text x="29.7094%" y="1535.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="29.4594%" y="1509" width="0.0289%" height="15" fill="rgb(224,102,30)" fg:x="1019" fg:w="1"/><text x="29.7094%" y="1519.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="29.4594%" y="1493" width="0.0289%" height="15" fill="rgb(210,164,37)" fg:x="1019" fg:w="1"/><text x="29.7094%" y="1503.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="29.4594%" y="1477" width="0.0289%" height="15" fill="rgb(226,191,16)" fg:x="1019" fg:w="1"/><text x="29.7094%" y="1487.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.03%)</title><rect x="29.4594%" y="1461" width="0.0289%" height="15" fill="rgb(214,40,45)" fg:x="1019" fg:w="1"/><text x="29.7094%" y="1471.50"></text></g><g><title>exchange_matching_engine::order::StandingOrder::fill (214 samples, 6.19%)</title><rect x="23.4172%" y="1813" width="6.1868%" height="15" fill="rgb(244,29,26)" fg:x="810" fg:w="214"/><text x="23.6672%" y="1823.50">exchange..</text></g><g><title>exchange_matching_engine::order::StandingOrder::notify (209 samples, 6.04%)</title><rect x="23.5617%" y="1797" width="6.0422%" height="15" fill="rgb(216,16,5)" fg:x="815" fg:w="209"/><text x="23.8117%" y="1807.50">exchange..</text></g><g><title>exchange_lib::message_queue::publish_pipeline (205 samples, 5.93%)</title><rect x="23.6774%" y="1781" width="5.9266%" height="15" fill="rgb(249,76,35)" fg:x="819" fg:w="205"/><text x="23.9274%" y="1791.50">exchange..</text></g><g><title>serde_json::ser::to_string (71 samples, 2.05%)</title><rect x="27.5513%" y="1765" width="2.0526%" height="15" fill="rgb(207,11,44)" fg:x="953" fg:w="71"/><text x="27.8013%" y="1775.50">s..</text></g><g><title>serde_json::ser::to_vec (69 samples, 1.99%)</title><rect x="27.6091%" y="1749" width="1.9948%" height="15" fill="rgb(228,190,49)" fg:x="955" fg:w="69"/><text x="27.8591%" y="1759.50">s..</text></g><g><title>serde_json::ser::to_writer (68 samples, 1.97%)</title><rect x="27.6380%" y="1733" width="1.9659%" height="15" fill="rgb(214,173,12)" fg:x="956" fg:w="68"/><text x="27.8880%" y="1743.50">s..</text></g><g><title>exchange_lib::message_queue::_::&lt;impl serde::ser::Serialize for exchange_lib::message_queue::Message&gt;::serialize (68 samples, 1.97%)</title><rect x="27.6380%" y="1717" width="1.9659%" height="15" fill="rgb(218,26,35)" fg:x="956" fg:w="68"/><text x="27.8880%" y="1727.50">e..</text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (64 samples, 1.85%)</title><rect x="27.7537%" y="1701" width="1.8502%" height="15" fill="rgb(220,200,19)" fg:x="960" fg:w="64"/><text x="28.0037%" y="1711.50">&lt;..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (19 samples, 0.55%)</title><rect x="29.0546%" y="1685" width="0.5493%" height="15" fill="rgb(239,95,49)" fg:x="1005" fg:w="19"/><text x="29.3046%" y="1695.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.20%)</title><rect x="29.4016%" y="1669" width="0.2024%" height="15" fill="rgb(235,85,53)" fg:x="1017" fg:w="7"/><text x="29.6516%" y="1679.50"></text></g><g><title>serde_json::ser::Formatter::begin_object_value (4 samples, 0.12%)</title><rect x="29.4883%" y="1653" width="0.1156%" height="15" fill="rgb(233,133,31)" fg:x="1020" fg:w="4"/><text x="29.7383%" y="1663.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (4 samples, 0.12%)</title><rect x="29.4883%" y="1637" width="0.1156%" height="15" fill="rgb(218,25,20)" fg:x="1020" fg:w="4"/><text x="29.7383%" y="1647.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (4 samples, 0.12%)</title><rect x="29.4883%" y="1621" width="0.1156%" height="15" fill="rgb(252,210,38)" fg:x="1020" fg:w="4"/><text x="29.7383%" y="1631.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4 samples, 0.12%)</title><rect x="29.4883%" y="1605" width="0.1156%" height="15" fill="rgb(242,134,21)" fg:x="1020" fg:w="4"/><text x="29.7383%" y="1615.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.12%)</title><rect x="29.4883%" y="1589" width="0.1156%" height="15" fill="rgb(213,28,48)" fg:x="1020" fg:w="4"/><text x="29.7383%" y="1599.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4 samples, 0.12%)</title><rect x="29.4883%" y="1573" width="0.1156%" height="15" fill="rgb(250,196,2)" fg:x="1020" fg:w="4"/><text x="29.7383%" y="1583.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.12%)</title><rect x="29.4883%" y="1557" width="0.1156%" height="15" fill="rgb(227,5,17)" fg:x="1020" fg:w="4"/><text x="29.7383%" y="1567.50"></text></g><g><title>exchange_matching_engine::order::StandingOrder::is_filled (2 samples, 0.06%)</title><rect x="29.6039%" y="1813" width="0.0578%" height="15" fill="rgb(221,226,24)" fg:x="1024" fg:w="2"/><text x="29.8539%" y="1823.50"></text></g><g><title>exchange_matching_engine::order_book::OrderBook::match_order (390 samples, 11.27%)</title><rect x="18.4157%" y="1845" width="11.2749%" height="15" fill="rgb(211,5,48)" fg:x="637" fg:w="390"/><text x="18.6657%" y="1855.50">exchange_matching..</text></g><g><title>exchange_matching_engine::order_bucket::OrderBucket::match_orders (223 samples, 6.45%)</title><rect x="23.2437%" y="1829" width="6.4469%" height="15" fill="rgb(219,150,6)" fg:x="804" fg:w="223"/><text x="23.4937%" y="1839.50">exchange..</text></g><g><title>exchange_matching_engine::order_bucket::OrderBucket::is_empty (1 samples, 0.03%)</title><rect x="29.6618%" y="1813" width="0.0289%" height="15" fill="rgb(251,46,16)" fg:x="1026" fg:w="1"/><text x="29.9118%" y="1823.50"></text></g><g><title>exchange_matching_engine::order_bucket::OrderBucket::insert_order (1 samples, 0.03%)</title><rect x="29.6907%" y="1845" width="0.0289%" height="15" fill="rgb(220,204,40)" fg:x="1027" fg:w="1"/><text x="29.9407%" y="1855.50"></text></g><g><title>exchange_matching_engine::order_bucket::OrderBucket::push_back (1 samples, 0.03%)</title><rect x="29.6907%" y="1829" width="0.0289%" height="15" fill="rgb(211,85,2)" fg:x="1027" fg:w="1"/><text x="29.9407%" y="1839.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;exchange_matching_engine::order::StandingOrder&gt;&gt; (5 samples, 0.14%)</title><rect x="29.7196%" y="1829" width="0.1446%" height="15" fill="rgb(229,17,7)" fg:x="1028" fg:w="5"/><text x="29.9696%" y="1839.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.14%)</title><rect x="29.7196%" y="1813" width="0.1446%" height="15" fill="rgb(239,72,28)" fg:x="1028" fg:w="5"/><text x="29.9696%" y="1823.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.14%)</title><rect x="29.7196%" y="1797" width="0.1446%" height="15" fill="rgb(230,47,54)" fg:x="1028" fg:w="5"/><text x="29.9696%" y="1807.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.14%)</title><rect x="29.7196%" y="1781" width="0.1446%" height="15" fill="rgb(214,50,8)" fg:x="1028" fg:w="5"/><text x="29.9696%" y="1791.50"></text></g><g><title>cfree (5 samples, 0.14%)</title><rect x="29.7196%" y="1765" width="0.1446%" height="15" fill="rgb(216,198,43)" fg:x="1028" fg:w="5"/><text x="29.9696%" y="1775.50"></text></g><g><title>[libc.so.6] (3 samples, 0.09%)</title><rect x="29.7774%" y="1749" width="0.0867%" height="15" fill="rgb(234,20,35)" fg:x="1030" fg:w="3"/><text x="30.0274%" y="1759.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::insert_entry (6 samples, 0.17%)</title><rect x="29.7196%" y="1845" width="0.1735%" height="15" fill="rgb(254,45,19)" fg:x="1028" fg:w="6"/><text x="29.9696%" y="1855.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::insert (1 samples, 0.03%)</title><rect x="29.8641%" y="1829" width="0.0289%" height="15" fill="rgb(219,14,44)" fg:x="1033" fg:w="1"/><text x="30.1141%" y="1839.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::insert (1 samples, 0.03%)</title><rect x="29.8641%" y="1813" width="0.0289%" height="15" fill="rgb(217,220,26)" fg:x="1033" fg:w="1"/><text x="30.1141%" y="1823.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="29.8641%" y="1797" width="0.0289%" height="15" fill="rgb(213,158,28)" fg:x="1033" fg:w="1"/><text x="30.1141%" y="1807.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="29.8641%" y="1781" width="0.0289%" height="15" fill="rgb(252,51,52)" fg:x="1033" fg:w="1"/><text x="30.1141%" y="1791.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="29.8930%" y="1781" width="0.0289%" height="15" fill="rgb(246,89,16)" fg:x="1034" fg:w="1"/><text x="30.1430%" y="1791.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (1 samples, 0.03%)</title><rect x="29.8930%" y="1765" width="0.0289%" height="15" fill="rgb(216,158,49)" fg:x="1034" fg:w="1"/><text x="30.1430%" y="1775.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2 samples, 0.06%)</title><rect x="29.9219%" y="1781" width="0.0578%" height="15" fill="rgb(236,107,19)" fg:x="1035" fg:w="2"/><text x="30.1719%" y="1791.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (2 samples, 0.06%)</title><rect x="29.9219%" y="1765" width="0.0578%" height="15" fill="rgb(228,185,30)" fg:x="1035" fg:w="2"/><text x="30.1719%" y="1775.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (2 samples, 0.06%)</title><rect x="29.9219%" y="1749" width="0.0578%" height="15" fill="rgb(246,134,8)" fg:x="1035" fg:w="2"/><text x="30.1719%" y="1759.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.03%)</title><rect x="29.9798%" y="1781" width="0.0289%" height="15" fill="rgb(214,143,50)" fg:x="1037" fg:w="1"/><text x="30.2298%" y="1791.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.03%)</title><rect x="29.9798%" y="1765" width="0.0289%" height="15" fill="rgb(228,75,8)" fg:x="1037" fg:w="1"/><text x="30.2298%" y="1775.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="29.9798%" y="1749" width="0.0289%" height="15" fill="rgb(207,175,4)" fg:x="1037" fg:w="1"/><text x="30.2298%" y="1759.50"></text></g><g><title>exchange_matching_engine::order_book_processor::OrderBookProcessor::run::{{closure}} (432 samples, 12.49%)</title><rect x="17.5484%" y="1877" width="12.4892%" height="15" fill="rgb(205,108,24)" fg:x="607" fg:w="432"/><text x="17.7984%" y="1887.50">exchange_matching_e..</text></g><g><title>exchange_matching_engine::order_book::OrderBook::insert_order (409 samples, 11.82%)</title><rect x="18.2134%" y="1861" width="11.8242%" height="15" fill="rgb(244,120,49)" fg:x="630" fg:w="409"/><text x="18.4634%" y="1871.50">exchange_matching_..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (5 samples, 0.14%)</title><rect x="29.8930%" y="1845" width="0.1446%" height="15" fill="rgb(223,47,38)" fg:x="1034" fg:w="5"/><text x="30.1430%" y="1855.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5 samples, 0.14%)</title><rect x="29.8930%" y="1829" width="0.1446%" height="15" fill="rgb(229,179,11)" fg:x="1034" fg:w="5"/><text x="30.1430%" y="1839.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (5 samples, 0.14%)</title><rect x="29.8930%" y="1813" width="0.1446%" height="15" fill="rgb(231,122,1)" fg:x="1034" fg:w="5"/><text x="30.1430%" y="1823.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (5 samples, 0.14%)</title><rect x="29.8930%" y="1797" width="0.1446%" height="15" fill="rgb(245,119,9)" fg:x="1034" fg:w="5"/><text x="30.1430%" y="1807.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="30.0087%" y="1781" width="0.0289%" height="15" fill="rgb(241,163,25)" fg:x="1038" fg:w="1"/><text x="30.2587%" y="1791.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="30.0087%" y="1765" width="0.0289%" height="15" fill="rgb(217,214,3)" fg:x="1038" fg:w="1"/><text x="30.2587%" y="1775.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="30.0665%" y="1829" width="0.0289%" height="15" fill="rgb(240,86,28)" fg:x="1040" fg:w="1"/><text x="30.3165%" y="1839.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.03%)</title><rect x="30.0665%" y="1813" width="0.0289%" height="15" fill="rgb(215,47,9)" fg:x="1040" fg:w="1"/><text x="30.3165%" y="1823.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="30.0665%" y="1797" width="0.0289%" height="15" fill="rgb(252,25,45)" fg:x="1040" fg:w="1"/><text x="30.3165%" y="1807.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="30.0954%" y="1605" width="0.0289%" height="15" fill="rgb(251,164,9)" fg:x="1041" fg:w="1"/><text x="30.3454%" y="1615.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="30.0954%" y="1589" width="0.0289%" height="15" fill="rgb(233,194,0)" fg:x="1041" fg:w="1"/><text x="30.3454%" y="1599.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.14%)</title><rect x="30.0954%" y="1701" width="0.1446%" height="15" fill="rgb(249,111,24)" fg:x="1041" fg:w="5"/><text x="30.3454%" y="1711.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.14%)</title><rect x="30.0954%" y="1685" width="0.1446%" height="15" fill="rgb(250,223,3)" fg:x="1041" fg:w="5"/><text x="30.3454%" y="1695.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.14%)</title><rect x="30.0954%" y="1669" width="0.1446%" height="15" fill="rgb(236,178,37)" fg:x="1041" fg:w="5"/><text x="30.3454%" y="1679.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.14%)</title><rect x="30.0954%" y="1653" width="0.1446%" height="15" fill="rgb(241,158,50)" fg:x="1041" fg:w="5"/><text x="30.3454%" y="1663.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.14%)</title><rect x="30.0954%" y="1637" width="0.1446%" height="15" fill="rgb(213,121,41)" fg:x="1041" fg:w="5"/><text x="30.3454%" y="1647.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.14%)</title><rect x="30.0954%" y="1621" width="0.1446%" height="15" fill="rgb(240,92,3)" fg:x="1041" fg:w="5"/><text x="30.3454%" y="1631.50"></text></g><g><title>malloc (4 samples, 0.12%)</title><rect x="30.1243%" y="1605" width="0.1156%" height="15" fill="rgb(205,123,3)" fg:x="1042" fg:w="4"/><text x="30.3743%" y="1615.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (9 samples, 0.26%)</title><rect x="30.0954%" y="1829" width="0.2602%" height="15" fill="rgb(205,97,47)" fg:x="1041" fg:w="9"/><text x="30.3454%" y="1839.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (9 samples, 0.26%)</title><rect x="30.0954%" y="1813" width="0.2602%" height="15" fill="rgb(247,152,14)" fg:x="1041" fg:w="9"/><text x="30.3454%" y="1823.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (9 samples, 0.26%)</title><rect x="30.0954%" y="1797" width="0.2602%" height="15" fill="rgb(248,195,53)" fg:x="1041" fg:w="9"/><text x="30.3454%" y="1807.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (9 samples, 0.26%)</title><rect x="30.0954%" y="1781" width="0.2602%" height="15" fill="rgb(226,201,16)" fg:x="1041" fg:w="9"/><text x="30.3454%" y="1791.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (9 samples, 0.26%)</title><rect x="30.0954%" y="1765" width="0.2602%" height="15" fill="rgb(205,98,0)" fg:x="1041" fg:w="9"/><text x="30.3454%" y="1775.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.26%)</title><rect x="30.0954%" y="1749" width="0.2602%" height="15" fill="rgb(214,191,48)" fg:x="1041" fg:w="9"/><text x="30.3454%" y="1759.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.26%)</title><rect x="30.0954%" y="1733" width="0.2602%" height="15" fill="rgb(237,112,39)" fg:x="1041" fg:w="9"/><text x="30.3454%" y="1743.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.26%)</title><rect x="30.0954%" y="1717" width="0.2602%" height="15" fill="rgb(247,203,27)" fg:x="1041" fg:w="9"/><text x="30.3454%" y="1727.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.12%)</title><rect x="30.2400%" y="1701" width="0.1156%" height="15" fill="rgb(235,124,28)" fg:x="1046" fg:w="4"/><text x="30.4900%" y="1711.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.12%)</title><rect x="30.2400%" y="1685" width="0.1156%" height="15" fill="rgb(208,207,46)" fg:x="1046" fg:w="4"/><text x="30.4900%" y="1695.50"></text></g><g><title>[libc.so.6] (4 samples, 0.12%)</title><rect x="30.2400%" y="1669" width="0.1156%" height="15" fill="rgb(234,176,4)" fg:x="1046" fg:w="4"/><text x="30.4900%" y="1679.50"></text></g><g><title>redis::connection::Msg::get_payload (21 samples, 0.61%)</title><rect x="30.0376%" y="1877" width="0.6071%" height="15" fill="rgb(230,133,28)" fg:x="1039" fg:w="21"/><text x="30.2876%" y="1887.50"></text></g><g><title>redis::types::from_redis_value (21 samples, 0.61%)</title><rect x="30.0376%" y="1861" width="0.6071%" height="15" fill="rgb(211,137,40)" fg:x="1039" fg:w="21"/><text x="30.2876%" y="1871.50"></text></g><g><title>&lt;alloc::string::String as redis::types::FromRedisValue&gt;::from_redis_value (21 samples, 0.61%)</title><rect x="30.0376%" y="1845" width="0.6071%" height="15" fill="rgb(254,35,13)" fg:x="1039" fg:w="21"/><text x="30.2876%" y="1855.50"></text></g><g><title>core::str::converts::from_utf8 (10 samples, 0.29%)</title><rect x="30.3556%" y="1829" width="0.2891%" height="15" fill="rgb(225,49,51)" fg:x="1050" fg:w="10"/><text x="30.6056%" y="1839.50"></text></g><g><title>core::str::validations::run_utf8_validation (8 samples, 0.23%)</title><rect x="30.4134%" y="1813" width="0.2313%" height="15" fill="rgb(251,10,15)" fg:x="1052" fg:w="8"/><text x="30.6634%" y="1823.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (8 samples, 0.23%)</title><rect x="30.7892%" y="1861" width="0.2313%" height="15" fill="rgb(228,207,15)" fg:x="1065" fg:w="8"/><text x="31.0392%" y="1871.50"></text></g><g><title>cfree (10 samples, 0.29%)</title><rect x="31.0205%" y="1861" width="0.2891%" height="15" fill="rgb(241,99,19)" fg:x="1073" fg:w="10"/><text x="31.2705%" y="1871.50"></text></g><g><title>[libc.so.6] (4 samples, 0.12%)</title><rect x="31.1940%" y="1845" width="0.1156%" height="15" fill="rgb(207,104,49)" fg:x="1079" fg:w="4"/><text x="31.4440%" y="1855.50"></text></g><g><title>__rust_dealloc (4 samples, 0.12%)</title><rect x="31.4831%" y="1733" width="0.1156%" height="15" fill="rgb(234,99,18)" fg:x="1089" fg:w="4"/><text x="31.7331%" y="1743.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.90%)</title><rect x="31.3385%" y="1829" width="0.8962%" height="15" fill="rgb(213,191,49)" fg:x="1084" fg:w="31"/><text x="31.5885%" y="1839.50"></text></g><g><title>core::ptr::drop_in_place&lt;[redis::types::Value]&gt; (31 samples, 0.90%)</title><rect x="31.3385%" y="1813" width="0.8962%" height="15" fill="rgb(210,226,19)" fg:x="1084" fg:w="31"/><text x="31.5885%" y="1823.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (29 samples, 0.84%)</title><rect x="31.3964%" y="1797" width="0.8384%" height="15" fill="rgb(229,97,18)" fg:x="1086" fg:w="29"/><text x="31.6464%" y="1807.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.81%)</title><rect x="31.4253%" y="1781" width="0.8095%" height="15" fill="rgb(211,167,15)" fg:x="1087" fg:w="28"/><text x="31.6753%" y="1791.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (27 samples, 0.78%)</title><rect x="31.4542%" y="1765" width="0.7806%" height="15" fill="rgb(210,169,34)" fg:x="1088" fg:w="27"/><text x="31.7042%" y="1775.50"></text></g><g><title>alloc::alloc::dealloc (27 samples, 0.78%)</title><rect x="31.4542%" y="1749" width="0.7806%" height="15" fill="rgb(241,121,31)" fg:x="1088" fg:w="27"/><text x="31.7042%" y="1759.50"></text></g><g><title>cfree (22 samples, 0.64%)</title><rect x="31.5987%" y="1733" width="0.6360%" height="15" fill="rgb(232,40,11)" fg:x="1093" fg:w="22"/><text x="31.8487%" y="1743.50"></text></g><g><title>[libc.so.6] (17 samples, 0.49%)</title><rect x="31.7433%" y="1717" width="0.4915%" height="15" fill="rgb(205,86,26)" fg:x="1098" fg:w="17"/><text x="31.9933%" y="1727.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (33 samples, 0.95%)</title><rect x="31.3096%" y="1861" width="0.9540%" height="15" fill="rgb(231,126,28)" fg:x="1083" fg:w="33"/><text x="31.5596%" y="1871.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;redis::types::Value&gt;&gt; (32 samples, 0.93%)</title><rect x="31.3385%" y="1845" width="0.9251%" height="15" fill="rgb(219,221,18)" fg:x="1084" fg:w="32"/><text x="31.5885%" y="1855.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;redis::types::Value&gt;&gt; (1 samples, 0.03%)</title><rect x="32.2347%" y="1829" width="0.0289%" height="15" fill="rgb(211,40,0)" fg:x="1115" fg:w="1"/><text x="32.4847%" y="1839.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="32.2347%" y="1813" width="0.0289%" height="15" fill="rgb(239,85,43)" fg:x="1115" fg:w="1"/><text x="32.4847%" y="1823.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="32.2347%" y="1797" width="0.0289%" height="15" fill="rgb(231,55,21)" fg:x="1115" fg:w="1"/><text x="32.4847%" y="1807.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="32.2347%" y="1781" width="0.0289%" height="15" fill="rgb(225,184,43)" fg:x="1115" fg:w="1"/><text x="32.4847%" y="1791.50"></text></g><g><title>&lt;combine::stream::buf_reader::Buffer as combine::stream::buf_reader::CombineBuffer&lt;R&gt;&gt;::buffer (3 samples, 0.09%)</title><rect x="32.8708%" y="1813" width="0.0867%" height="15" fill="rgb(251,158,41)" fg:x="1137" fg:w="3"/><text x="33.1208%" y="1823.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::deref::Deref&gt;::deref (3 samples, 0.09%)</title><rect x="32.8708%" y="1797" width="0.0867%" height="15" fill="rgb(234,159,37)" fg:x="1137" fg:w="3"/><text x="33.1208%" y="1807.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::convert::AsRef&lt;[u8]&gt;&gt;::as_ref (3 samples, 0.09%)</title><rect x="32.8708%" y="1781" width="0.0867%" height="15" fill="rgb(216,204,22)" fg:x="1137" fg:w="3"/><text x="33.1208%" y="1791.50"></text></g><g><title>bytes::bytes_mut::BytesMut::as_slice (3 samples, 0.09%)</title><rect x="32.8708%" y="1765" width="0.0867%" height="15" fill="rgb(214,17,3)" fg:x="1137" fg:w="3"/><text x="33.1208%" y="1775.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::Positioned&gt;::position (1 samples, 0.03%)</title><rect x="32.9575%" y="1813" width="0.0289%" height="15" fill="rgb(212,111,17)" fg:x="1140" fg:w="1"/><text x="33.2075%" y="1823.50"></text></g><g><title>&lt;combine::stream::MaybePartialStream&lt;S&gt; as combine::stream::Positioned&gt;::position (1 samples, 0.03%)</title><rect x="32.9575%" y="1797" width="0.0289%" height="15" fill="rgb(221,157,24)" fg:x="1140" fg:w="1"/><text x="33.2075%" y="1807.50"></text></g><g><title>&lt;&amp;[T] as combine::stream::Positioned&gt;::position (1 samples, 0.03%)</title><rect x="32.9575%" y="1781" width="0.0289%" height="15" fill="rgb(252,16,13)" fg:x="1140" fg:w="1"/><text x="33.2075%" y="1791.50"></text></g><g><title>combine::stream::call_with2 (1 samples, 0.03%)</title><rect x="32.9864%" y="1813" width="0.0289%" height="15" fill="rgb(221,62,2)" fg:x="1141" fg:w="1"/><text x="33.2364%" y="1823.50"></text></g><g><title>redis::parser::Parser::parse_value::{{closure}} (1 samples, 0.03%)</title><rect x="32.9864%" y="1797" width="0.0289%" height="15" fill="rgb(247,87,22)" fg:x="1141" fg:w="1"/><text x="33.2364%" y="1807.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as core::convert::From&lt;S&gt;&gt;::from (1 samples, 0.03%)</title><rect x="32.9864%" y="1781" width="0.0289%" height="15" fill="rgb(215,73,9)" fg:x="1141" fg:w="1"/><text x="33.2364%" y="1791.50"></text></g><g><title>&lt;&amp;mut I as combine::stream::ResetStream&gt;::checkpoint (1 samples, 0.03%)</title><rect x="33.4779%" y="1797" width="0.0289%" height="15" fill="rgb(207,175,33)" fg:x="1158" fg:w="1"/><text x="33.7279%" y="1807.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::ResetStream&gt;::checkpoint (1 samples, 0.03%)</title><rect x="33.4779%" y="1781" width="0.0289%" height="15" fill="rgb(243,129,54)" fg:x="1158" fg:w="1"/><text x="33.7279%" y="1791.50"></text></g><g><title>&lt;combine::stream::MaybePartialStream&lt;S&gt; as combine::stream::ResetStream&gt;::checkpoint (1 samples, 0.03%)</title><rect x="33.4779%" y="1765" width="0.0289%" height="15" fill="rgb(227,119,45)" fg:x="1158" fg:w="1"/><text x="33.7279%" y="1775.50"></text></g><g><title>&lt;&amp;[T] as combine::stream::ResetStream&gt;::checkpoint (1 samples, 0.03%)</title><rect x="33.4779%" y="1749" width="0.0289%" height="15" fill="rgb(205,109,36)" fg:x="1158" fg:w="1"/><text x="33.7279%" y="1759.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for &amp;T&gt;::clone (1 samples, 0.03%)</title><rect x="33.4779%" y="1733" width="0.0289%" height="15" fill="rgb(205,6,39)" fg:x="1158" fg:w="1"/><text x="33.7279%" y="1743.50"></text></g><g><title>&lt;combine::stream::easy::Error&lt;T,R&gt; as core::cmp::PartialEq&gt;::eq (10 samples, 0.29%)</title><rect x="33.5068%" y="1733" width="0.2891%" height="15" fill="rgb(221,32,16)" fg:x="1159" fg:w="10"/><text x="33.7568%" y="1743.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (6 samples, 0.17%)</title><rect x="33.6224%" y="1717" width="0.1735%" height="15" fill="rgb(228,144,50)" fg:x="1163" fg:w="6"/><text x="33.8724%" y="1727.50"></text></g><g><title>&lt;combine::stream::easy::Info&lt;T,R&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.17%)</title><rect x="33.6224%" y="1701" width="0.1735%" height="15" fill="rgb(229,201,53)" fg:x="1163" fg:w="6"/><text x="33.8724%" y="1711.50"></text></g><g><title>[libc.so.6] (4 samples, 0.12%)</title><rect x="33.6803%" y="1685" width="0.1156%" height="15" fill="rgb(249,153,27)" fg:x="1165" fg:w="4"/><text x="33.9303%" y="1695.50"></text></g><g><title>&lt;combine::stream::easy::Errors&lt;Item,Range,Position&gt; as combine::error::ParseError&lt;Item,Range,Position&gt;&gt;::is_unexpected_end_of_input (11 samples, 0.32%)</title><rect x="33.5068%" y="1797" width="0.3180%" height="15" fill="rgb(227,106,25)" fg:x="1159" fg:w="11"/><text x="33.7568%" y="1807.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (11 samples, 0.32%)</title><rect x="33.5068%" y="1781" width="0.3180%" height="15" fill="rgb(230,65,29)" fg:x="1159" fg:w="11"/><text x="33.7568%" y="1791.50"></text></g><g><title>core::ops::function::FnMut::call_mut (11 samples, 0.32%)</title><rect x="33.5068%" y="1765" width="0.3180%" height="15" fill="rgb(221,57,46)" fg:x="1159" fg:w="11"/><text x="33.7568%" y="1775.50"></text></g><g><title>&lt;combine::stream::easy::Error&lt;Item,Range&gt; as combine::error::StreamError&lt;Item,Range&gt;&gt;::is_unexpected_end_of_input (11 samples, 0.32%)</title><rect x="33.5068%" y="1749" width="0.3180%" height="15" fill="rgb(229,161,17)" fg:x="1159" fg:w="11"/><text x="33.7568%" y="1759.50"></text></g><g><title>combine::stream::easy::Error&lt;T,R&gt;::end_of_input (1 samples, 0.03%)</title><rect x="33.7959%" y="1733" width="0.0289%" height="15" fill="rgb(222,213,11)" fg:x="1169" fg:w="1"/><text x="34.0459%" y="1743.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (17 samples, 0.49%)</title><rect x="34.3741%" y="1701" width="0.4915%" height="15" fill="rgb(235,35,13)" fg:x="1189" fg:w="17"/><text x="34.6241%" y="1711.50"></text></g><g><title>&lt;T as core::any::Any&gt;::type_id (2 samples, 0.06%)</title><rect x="35.1258%" y="1589" width="0.0578%" height="15" fill="rgb(233,158,34)" fg:x="1215" fg:w="2"/><text x="35.3758%" y="1599.50"></text></g><g><title>&lt;dyn core::any::Any+core::marker::Send+core::marker::Sync&gt;::downcast_mut (3 samples, 0.09%)</title><rect x="35.1258%" y="1637" width="0.0867%" height="15" fill="rgb(215,151,48)" fg:x="1215" fg:w="3"/><text x="35.3758%" y="1647.50"></text></g><g><title>&lt;dyn core::any::Any&gt;::downcast_mut (3 samples, 0.09%)</title><rect x="35.1258%" y="1621" width="0.0867%" height="15" fill="rgb(229,84,14)" fg:x="1215" fg:w="3"/><text x="35.3758%" y="1631.50"></text></g><g><title>&lt;dyn core::any::Any&gt;::is (3 samples, 0.09%)</title><rect x="35.1258%" y="1605" width="0.0867%" height="15" fill="rgb(229,68,14)" fg:x="1215" fg:w="3"/><text x="35.3758%" y="1615.50"></text></g><g><title>&lt;core::any::TypeId as core::cmp::PartialEq&gt;::eq (1 samples, 0.03%)</title><rect x="35.1836%" y="1589" width="0.0289%" height="15" fill="rgb(243,106,26)" fg:x="1217" fg:w="1"/><text x="35.4336%" y="1599.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::ResetStream&gt;::checkpoint (2 samples, 0.06%)</title><rect x="36.3689%" y="1557" width="0.0578%" height="15" fill="rgb(206,45,38)" fg:x="1258" fg:w="2"/><text x="36.6189%" y="1567.50"></text></g><g><title>&lt;combine::stream::MaybePartialStream&lt;S&gt; as combine::stream::ResetStream&gt;::checkpoint (2 samples, 0.06%)</title><rect x="36.3689%" y="1541" width="0.0578%" height="15" fill="rgb(226,6,15)" fg:x="1258" fg:w="2"/><text x="36.6189%" y="1551.50"></text></g><g><title>&lt;&amp;[T] as combine::stream::ResetStream&gt;::checkpoint (2 samples, 0.06%)</title><rect x="36.3689%" y="1525" width="0.0578%" height="15" fill="rgb(232,22,54)" fg:x="1258" fg:w="2"/><text x="36.6189%" y="1535.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for &amp;T&gt;::clone (2 samples, 0.06%)</title><rect x="36.3689%" y="1509" width="0.0578%" height="15" fill="rgb(229,222,32)" fg:x="1258" fg:w="2"/><text x="36.6189%" y="1519.50"></text></g><g><title>alloc::string::String::with_capacity (4 samples, 0.12%)</title><rect x="37.2940%" y="1221" width="0.1156%" height="15" fill="rgb(228,62,29)" fg:x="1290" fg:w="4"/><text x="37.5440%" y="1231.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.09%)</title><rect x="37.3229%" y="1205" width="0.0867%" height="15" fill="rgb(251,103,34)" fg:x="1291" fg:w="3"/><text x="37.5729%" y="1215.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.09%)</title><rect x="37.3229%" y="1189" width="0.0867%" height="15" fill="rgb(233,12,30)" fg:x="1291" fg:w="3"/><text x="37.5729%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.09%)</title><rect x="37.3229%" y="1173" width="0.0867%" height="15" fill="rgb(238,52,0)" fg:x="1291" fg:w="3"/><text x="37.5729%" y="1183.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.09%)</title><rect x="37.3229%" y="1157" width="0.0867%" height="15" fill="rgb(223,98,5)" fg:x="1291" fg:w="3"/><text x="37.5729%" y="1167.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="37.3807%" y="1141" width="0.0289%" height="15" fill="rgb(228,75,37)" fg:x="1293" fg:w="1"/><text x="37.6307%" y="1151.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="37.3807%" y="1125" width="0.0289%" height="15" fill="rgb(205,115,49)" fg:x="1293" fg:w="1"/><text x="37.6307%" y="1135.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="37.3807%" y="1109" width="0.0289%" height="15" fill="rgb(250,154,43)" fg:x="1293" fg:w="1"/><text x="37.6307%" y="1119.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="37.3807%" y="1093" width="0.0289%" height="15" fill="rgb(226,43,29)" fg:x="1293" fg:w="1"/><text x="37.6307%" y="1103.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (7 samples, 0.20%)</title><rect x="37.4097%" y="1205" width="0.2024%" height="15" fill="rgb(249,228,39)" fg:x="1294" fg:w="7"/><text x="37.6597%" y="1215.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (7 samples, 0.20%)</title><rect x="37.4097%" y="1189" width="0.2024%" height="15" fill="rgb(216,79,43)" fg:x="1294" fg:w="7"/><text x="37.6597%" y="1199.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.20%)</title><rect x="37.4097%" y="1173" width="0.2024%" height="15" fill="rgb(228,95,12)" fg:x="1294" fg:w="7"/><text x="37.6597%" y="1183.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.20%)</title><rect x="37.4097%" y="1157" width="0.2024%" height="15" fill="rgb(249,221,15)" fg:x="1294" fg:w="7"/><text x="37.6597%" y="1167.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (7 samples, 0.20%)</title><rect x="37.4097%" y="1141" width="0.2024%" height="15" fill="rgb(233,34,13)" fg:x="1294" fg:w="7"/><text x="37.6597%" y="1151.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (7 samples, 0.20%)</title><rect x="37.4097%" y="1125" width="0.2024%" height="15" fill="rgb(214,103,39)" fg:x="1294" fg:w="7"/><text x="37.6597%" y="1135.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (8 samples, 0.23%)</title><rect x="37.4097%" y="1221" width="0.2313%" height="15" fill="rgb(251,126,39)" fg:x="1294" fg:w="8"/><text x="37.6597%" y="1231.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_empty (1 samples, 0.03%)</title><rect x="37.6120%" y="1205" width="0.0289%" height="15" fill="rgb(214,216,36)" fg:x="1301" fg:w="1"/><text x="37.8620%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (1 samples, 0.03%)</title><rect x="37.7277%" y="1045" width="0.0289%" height="15" fill="rgb(220,221,8)" fg:x="1305" fg:w="1"/><text x="37.9777%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.09%)</title><rect x="37.6988%" y="1093" width="0.0867%" height="15" fill="rgb(240,216,3)" fg:x="1304" fg:w="3"/><text x="37.9488%" y="1103.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.06%)</title><rect x="37.7277%" y="1077" width="0.0578%" height="15" fill="rgb(232,218,17)" fg:x="1305" fg:w="2"/><text x="37.9777%" y="1087.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (2 samples, 0.06%)</title><rect x="37.7277%" y="1061" width="0.0578%" height="15" fill="rgb(229,163,45)" fg:x="1305" fg:w="2"/><text x="37.9777%" y="1071.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.03%)</title><rect x="37.7566%" y="1045" width="0.0289%" height="15" fill="rgb(231,110,42)" fg:x="1306" fg:w="1"/><text x="38.0066%" y="1055.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (14 samples, 0.40%)</title><rect x="37.6698%" y="1189" width="0.4047%" height="15" fill="rgb(208,170,48)" fg:x="1303" fg:w="14"/><text x="37.9198%" y="1199.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (14 samples, 0.40%)</title><rect x="37.6698%" y="1173" width="0.4047%" height="15" fill="rgb(239,116,25)" fg:x="1303" fg:w="14"/><text x="37.9198%" y="1183.50"></text></g><g><title>alloc::string::String::push_str (14 samples, 0.40%)</title><rect x="37.6698%" y="1157" width="0.4047%" height="15" fill="rgb(219,200,50)" fg:x="1303" fg:w="14"/><text x="37.9198%" y="1167.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (14 samples, 0.40%)</title><rect x="37.6698%" y="1141" width="0.4047%" height="15" fill="rgb(245,200,0)" fg:x="1303" fg:w="14"/><text x="37.9198%" y="1151.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (14 samples, 0.40%)</title><rect x="37.6698%" y="1125" width="0.4047%" height="15" fill="rgb(245,119,33)" fg:x="1303" fg:w="14"/><text x="37.9198%" y="1135.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (14 samples, 0.40%)</title><rect x="37.6698%" y="1109" width="0.4047%" height="15" fill="rgb(231,125,12)" fg:x="1303" fg:w="14"/><text x="37.9198%" y="1119.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.29%)</title><rect x="37.7855%" y="1093" width="0.2891%" height="15" fill="rgb(216,96,41)" fg:x="1307" fg:w="10"/><text x="38.0355%" y="1103.50"></text></g><g><title>[libc.so.6] (10 samples, 0.29%)</title><rect x="37.7855%" y="1077" width="0.2891%" height="15" fill="rgb(248,43,45)" fg:x="1307" fg:w="10"/><text x="38.0355%" y="1087.50"></text></g><g><title>core::fmt::Formatter::new (1 samples, 0.03%)</title><rect x="38.0746%" y="1189" width="0.0289%" height="15" fill="rgb(217,222,7)" fg:x="1317" fg:w="1"/><text x="38.3246%" y="1199.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 0.09%)</title><rect x="38.1324%" y="1141" width="0.0867%" height="15" fill="rgb(233,28,6)" fg:x="1319" fg:w="3"/><text x="38.3824%" y="1151.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.09%)</title><rect x="38.1324%" y="1125" width="0.0867%" height="15" fill="rgb(231,218,15)" fg:x="1319" fg:w="3"/><text x="38.3824%" y="1135.50"></text></g><g><title>alloc::string::String::push_str (3 samples, 0.09%)</title><rect x="38.1324%" y="1109" width="0.0867%" height="15" fill="rgb(226,171,48)" fg:x="1319" fg:w="3"/><text x="38.3824%" y="1119.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.09%)</title><rect x="38.1324%" y="1093" width="0.0867%" height="15" fill="rgb(235,201,9)" fg:x="1319" fg:w="3"/><text x="38.3824%" y="1103.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.09%)</title><rect x="38.1324%" y="1077" width="0.0867%" height="15" fill="rgb(217,80,15)" fg:x="1319" fg:w="3"/><text x="38.3824%" y="1087.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.09%)</title><rect x="38.1324%" y="1061" width="0.0867%" height="15" fill="rgb(219,152,8)" fg:x="1319" fg:w="3"/><text x="38.3824%" y="1071.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="38.1613%" y="1045" width="0.0578%" height="15" fill="rgb(243,107,38)" fg:x="1320" fg:w="2"/><text x="38.4113%" y="1055.50"></text></g><g><title>[libc.so.6] (2 samples, 0.06%)</title><rect x="38.1613%" y="1029" width="0.0578%" height="15" fill="rgb(231,17,5)" fg:x="1320" fg:w="2"/><text x="38.4113%" y="1039.50"></text></g><g><title>core::fmt::Formatter::pad_integral (5 samples, 0.14%)</title><rect x="38.2191%" y="1141" width="0.1446%" height="15" fill="rgb(209,25,54)" fg:x="1322" fg:w="5"/><text x="38.4691%" y="1151.50"></text></g><g><title>core::fmt::rt::Argument::fmt (10 samples, 0.29%)</title><rect x="38.1035%" y="1189" width="0.2891%" height="15" fill="rgb(219,0,2)" fg:x="1318" fg:w="10"/><text x="38.3535%" y="1199.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (10 samples, 0.29%)</title><rect x="38.1035%" y="1173" width="0.2891%" height="15" fill="rgb(246,9,5)" fg:x="1318" fg:w="10"/><text x="38.3535%" y="1183.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (10 samples, 0.29%)</title><rect x="38.1035%" y="1157" width="0.2891%" height="15" fill="rgb(226,159,4)" fg:x="1318" fg:w="10"/><text x="38.3535%" y="1167.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="38.3637%" y="1141" width="0.0289%" height="15" fill="rgb(219,175,34)" fg:x="1327" fg:w="1"/><text x="38.6137%" y="1151.50"></text></g><g><title>&lt;combine::stream::easy::Error&lt;Item,Range&gt; as combine::error::StreamError&lt;Item,Range&gt;&gt;::message_format (50 samples, 1.45%)</title><rect x="36.9760%" y="1317" width="1.4455%" height="15" fill="rgb(236,10,46)" fg:x="1279" fg:w="50"/><text x="37.2260%" y="1327.50"></text></g><g><title>&lt;core::fmt::Arguments as alloc::string::ToString&gt;::to_string (41 samples, 1.19%)</title><rect x="37.2362%" y="1301" width="1.1853%" height="15" fill="rgb(240,211,16)" fg:x="1288" fg:w="41"/><text x="37.4862%" y="1311.50"></text></g><g><title>alloc::fmt::format (41 samples, 1.19%)</title><rect x="37.2362%" y="1285" width="1.1853%" height="15" fill="rgb(205,3,43)" fg:x="1288" fg:w="41"/><text x="37.4862%" y="1295.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (41 samples, 1.19%)</title><rect x="37.2362%" y="1269" width="1.1853%" height="15" fill="rgb(245,7,22)" fg:x="1288" fg:w="41"/><text x="37.4862%" y="1279.50"></text></g><g><title>alloc::fmt::format::{{closure}} (41 samples, 1.19%)</title><rect x="37.2362%" y="1253" width="1.1853%" height="15" fill="rgb(239,132,32)" fg:x="1288" fg:w="41"/><text x="37.4862%" y="1263.50"></text></g><g><title>alloc::fmt::format::format_inner (41 samples, 1.19%)</title><rect x="37.2362%" y="1237" width="1.1853%" height="15" fill="rgb(228,202,34)" fg:x="1288" fg:w="41"/><text x="37.4862%" y="1247.50"></text></g><g><title>core::fmt::Write::write_fmt (27 samples, 0.78%)</title><rect x="37.6409%" y="1221" width="0.7806%" height="15" fill="rgb(254,200,22)" fg:x="1302" fg:w="27"/><text x="37.8909%" y="1231.50"></text></g><g><title>core::fmt::write (27 samples, 0.78%)</title><rect x="37.6409%" y="1205" width="0.7806%" height="15" fill="rgb(219,10,39)" fg:x="1302" fg:w="27"/><text x="37.8909%" y="1215.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.03%)</title><rect x="38.3926%" y="1189" width="0.0289%" height="15" fill="rgb(226,210,39)" fg:x="1328" fg:w="1"/><text x="38.6426%" y="1199.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.03%)</title><rect x="38.3926%" y="1173" width="0.0289%" height="15" fill="rgb(208,219,16)" fg:x="1328" fg:w="1"/><text x="38.6426%" y="1183.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::ResetStream&gt;::checkpoint (1 samples, 0.03%)</title><rect x="38.8841%" y="1157" width="0.0289%" height="15" fill="rgb(216,158,51)" fg:x="1345" fg:w="1"/><text x="39.1341%" y="1167.50"></text></g><g><title>&lt;combine::stream::MaybePartialStream&lt;S&gt; as combine::stream::ResetStream&gt;::checkpoint (1 samples, 0.03%)</title><rect x="38.8841%" y="1141" width="0.0289%" height="15" fill="rgb(233,14,44)" fg:x="1345" fg:w="1"/><text x="39.1341%" y="1151.50"></text></g><g><title>&lt;&amp;[T] as combine::stream::ResetStream&gt;::checkpoint (1 samples, 0.03%)</title><rect x="38.8841%" y="1125" width="0.0289%" height="15" fill="rgb(237,97,39)" fg:x="1345" fg:w="1"/><text x="39.1341%" y="1135.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for &amp;T&gt;::clone (1 samples, 0.03%)</title><rect x="38.8841%" y="1109" width="0.0289%" height="15" fill="rgb(218,198,43)" fg:x="1345" fg:w="1"/><text x="39.1341%" y="1119.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (6 samples, 0.17%)</title><rect x="39.1154%" y="1029" width="0.1735%" height="15" fill="rgb(231,104,20)" fg:x="1353" fg:w="6"/><text x="39.3654%" y="1039.50"></text></g><g><title>&lt;dyn core::any::Any+core::marker::Send+core::marker::Sync&gt;::downcast_mut (1 samples, 0.03%)</title><rect x="40.2139%" y="965" width="0.0289%" height="15" fill="rgb(254,36,13)" fg:x="1391" fg:w="1"/><text x="40.4639%" y="975.50"></text></g><g><title>&lt;dyn core::any::Any&gt;::downcast_mut (1 samples, 0.03%)</title><rect x="40.2139%" y="949" width="0.0289%" height="15" fill="rgb(248,14,50)" fg:x="1391" fg:w="1"/><text x="40.4639%" y="959.50"></text></g><g><title>&lt;dyn core::any::Any&gt;::is (1 samples, 0.03%)</title><rect x="40.2139%" y="933" width="0.0289%" height="15" fill="rgb(217,107,29)" fg:x="1391" fg:w="1"/><text x="40.4639%" y="943.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::ResetStream&gt;::checkpoint (1 samples, 0.03%)</title><rect x="42.2955%" y="885" width="0.0289%" height="15" fill="rgb(251,169,33)" fg:x="1463" fg:w="1"/><text x="42.5455%" y="895.50"></text></g><g><title>&lt;combine::stream::MaybePartialStream&lt;S&gt; as combine::stream::ResetStream&gt;::checkpoint (1 samples, 0.03%)</title><rect x="42.2955%" y="869" width="0.0289%" height="15" fill="rgb(217,108,32)" fg:x="1463" fg:w="1"/><text x="42.5455%" y="879.50"></text></g><g><title>&lt;&amp;[T] as combine::stream::ResetStream&gt;::checkpoint (1 samples, 0.03%)</title><rect x="42.2955%" y="853" width="0.0289%" height="15" fill="rgb(219,66,42)" fg:x="1463" fg:w="1"/><text x="42.5455%" y="863.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for &amp;T&gt;::clone (1 samples, 0.03%)</title><rect x="42.2955%" y="837" width="0.0289%" height="15" fill="rgb(206,180,7)" fg:x="1463" fg:w="1"/><text x="42.5455%" y="847.50"></text></g><g><title>combine::error::ParseResult&lt;T,E&gt;::map (3 samples, 0.09%)</title><rect x="44.5794%" y="645" width="0.0867%" height="15" fill="rgb(208,226,31)" fg:x="1542" fg:w="3"/><text x="44.8294%" y="655.50"></text></g><g><title>combine::error::ParseResult&lt;T,E&gt;::map (13 samples, 0.38%)</title><rect x="44.9552%" y="437" width="0.3758%" height="15" fill="rgb(218,26,49)" fg:x="1555" fg:w="13"/><text x="45.2052%" y="447.50"></text></g><g><title>&lt;combine::parser::token::Satisfy&lt;Input,P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_lazy::{{closure}} (3 samples, 0.09%)</title><rect x="45.7647%" y="197" width="0.0867%" height="15" fill="rgb(233,197,48)" fg:x="1583" fg:w="3"/><text x="46.0147%" y="207.50"></text></g><g><title>combine::parser::byte::crlf::{{closure}} (3 samples, 0.09%)</title><rect x="45.7647%" y="181" width="0.0867%" height="15" fill="rgb(252,181,51)" fg:x="1583" fg:w="3"/><text x="46.0147%" y="191.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::Positioned&gt;::position (7 samples, 0.20%)</title><rect x="45.8514%" y="197" width="0.2024%" height="15" fill="rgb(253,90,19)" fg:x="1586" fg:w="7"/><text x="46.1014%" y="207.50"></text></g><g><title>&lt;combine::parser::combinator::Ignore&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (41 samples, 1.19%)</title><rect x="44.9552%" y="565" width="1.1853%" height="15" fill="rgb(215,171,30)" fg:x="1555" fg:w="41"/><text x="45.2052%" y="575.50"></text></g><g><title>combine::parser::Parser::parse_mode (41 samples, 1.19%)</title><rect x="44.9552%" y="549" width="1.1853%" height="15" fill="rgb(214,222,9)" fg:x="1555" fg:w="41"/><text x="45.2052%" y="559.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (41 samples, 1.19%)</title><rect x="44.9552%" y="533" width="1.1853%" height="15" fill="rgb(223,3,22)" fg:x="1555" fg:w="41"/><text x="45.2052%" y="543.50"></text></g><g><title>&lt;combine::parser::error::Expected&lt;P,S&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (41 samples, 1.19%)</title><rect x="44.9552%" y="517" width="1.1853%" height="15" fill="rgb(225,196,46)" fg:x="1555" fg:w="41"/><text x="45.2052%" y="527.50"></text></g><g><title>combine::parser::Parser::parse_mode (41 samples, 1.19%)</title><rect x="44.9552%" y="501" width="1.1853%" height="15" fill="rgb(209,110,37)" fg:x="1555" fg:w="41"/><text x="45.2052%" y="511.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (41 samples, 1.19%)</title><rect x="44.9552%" y="485" width="1.1853%" height="15" fill="rgb(249,89,12)" fg:x="1555" fg:w="41"/><text x="45.2052%" y="495.50"></text></g><g><title>&lt;combine::parser::combinator::NoPartial&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (41 samples, 1.19%)</title><rect x="44.9552%" y="469" width="1.1853%" height="15" fill="rgb(226,27,33)" fg:x="1555" fg:w="41"/><text x="45.2052%" y="479.50"></text></g><g><title>&lt;combine::parser::sequence::With&lt;P1,P2&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_lazy (41 samples, 1.19%)</title><rect x="44.9552%" y="453" width="1.1853%" height="15" fill="rgb(213,82,22)" fg:x="1555" fg:w="41"/><text x="45.2052%" y="463.50"></text></g><g><title>combine::parser::Parser::parse_lazy (28 samples, 0.81%)</title><rect x="45.3310%" y="437" width="0.8095%" height="15" fill="rgb(248,140,0)" fg:x="1568" fg:w="28"/><text x="45.5810%" y="447.50"></text></g><g><title>combine::parser::sequence::&lt;impl combine::parser::Parser&lt;Input&gt; for (A,B)&gt;::parse_first (16 samples, 0.46%)</title><rect x="45.6779%" y="421" width="0.4626%" height="15" fill="rgb(228,106,3)" fg:x="1580" fg:w="16"/><text x="45.9279%" y="431.50"></text></g><g><title>combine::parser::Parser::parse_mode (15 samples, 0.43%)</title><rect x="45.7069%" y="405" width="0.4337%" height="15" fill="rgb(209,23,37)" fg:x="1581" fg:w="15"/><text x="45.9569%" y="415.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (15 samples, 0.43%)</title><rect x="45.7069%" y="389" width="0.4337%" height="15" fill="rgb(241,93,50)" fg:x="1581" fg:w="15"/><text x="45.9569%" y="399.50"></text></g><g><title>combine::parser::sequence::&lt;impl combine::parser::Parser&lt;Input&gt; for (A,B)&gt;::parse_mode_impl (15 samples, 0.43%)</title><rect x="45.7069%" y="373" width="0.4337%" height="15" fill="rgb(253,46,43)" fg:x="1581" fg:w="15"/><text x="45.9569%" y="383.50"></text></g><g><title>combine::parser::Parser::parse_mode (14 samples, 0.40%)</title><rect x="45.7358%" y="357" width="0.4047%" height="15" fill="rgb(226,206,43)" fg:x="1582" fg:w="14"/><text x="45.9858%" y="367.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (14 samples, 0.40%)</title><rect x="45.7358%" y="341" width="0.4047%" height="15" fill="rgb(217,54,7)" fg:x="1582" fg:w="14"/><text x="45.9858%" y="351.50"></text></g><g><title>&lt;combine::parser::combinator::Ignore&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (14 samples, 0.40%)</title><rect x="45.7358%" y="325" width="0.4047%" height="15" fill="rgb(223,5,52)" fg:x="1582" fg:w="14"/><text x="45.9858%" y="335.50"></text></g><g><title>combine::parser::Parser::parse_mode (14 samples, 0.40%)</title><rect x="45.7358%" y="309" width="0.4047%" height="15" fill="rgb(206,52,46)" fg:x="1582" fg:w="14"/><text x="45.9858%" y="319.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (14 samples, 0.40%)</title><rect x="45.7358%" y="293" width="0.4047%" height="15" fill="rgb(253,136,11)" fg:x="1582" fg:w="14"/><text x="45.9858%" y="303.50"></text></g><g><title>combine::parser::Parser::parse_mode_impl (14 samples, 0.40%)</title><rect x="45.7358%" y="277" width="0.4047%" height="15" fill="rgb(208,106,33)" fg:x="1582" fg:w="14"/><text x="45.9858%" y="287.50"></text></g><g><title>combine::parser::Parser::parse_first (14 samples, 0.40%)</title><rect x="45.7358%" y="261" width="0.4047%" height="15" fill="rgb(206,54,4)" fg:x="1582" fg:w="14"/><text x="45.9858%" y="271.50"></text></g><g><title>combine::parser::Parser::parse_partial (14 samples, 0.40%)</title><rect x="45.7358%" y="245" width="0.4047%" height="15" fill="rgb(213,3,15)" fg:x="1582" fg:w="14"/><text x="45.9858%" y="255.50"></text></g><g><title>&lt;combine::parser::token::Satisfy&lt;Input,P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_lazy (14 samples, 0.40%)</title><rect x="45.7358%" y="229" width="0.4047%" height="15" fill="rgb(252,211,39)" fg:x="1582" fg:w="14"/><text x="45.9858%" y="239.50"></text></g><g><title>combine::parser::token::satisfy_impl (14 samples, 0.40%)</title><rect x="45.7358%" y="213" width="0.4047%" height="15" fill="rgb(223,6,36)" fg:x="1582" fg:w="14"/><text x="45.9858%" y="223.50"></text></g><g><title>combine::stream::uncons (3 samples, 0.09%)</title><rect x="46.0538%" y="197" width="0.0867%" height="15" fill="rgb(252,169,45)" fg:x="1593" fg:w="3"/><text x="46.3038%" y="207.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::StreamOnce&gt;::uncons (3 samples, 0.09%)</title><rect x="46.0538%" y="181" width="0.0867%" height="15" fill="rgb(212,48,26)" fg:x="1593" fg:w="3"/><text x="46.3038%" y="191.50"></text></g><g><title>&lt;combine::stream::MaybePartialStream&lt;S&gt; as combine::stream::StreamOnce&gt;::uncons (3 samples, 0.09%)</title><rect x="46.0538%" y="165" width="0.0867%" height="15" fill="rgb(251,102,48)" fg:x="1593" fg:w="3"/><text x="46.3038%" y="175.50"></text></g><g><title>&lt;&amp;[T] as combine::stream::StreamOnce&gt;::uncons (3 samples, 0.09%)</title><rect x="46.0538%" y="149" width="0.0867%" height="15" fill="rgb(243,208,16)" fg:x="1593" fg:w="3"/><text x="46.3038%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (1 samples, 0.03%)</title><rect x="46.1116%" y="133" width="0.0289%" height="15" fill="rgb(219,96,24)" fg:x="1595" fg:w="1"/><text x="46.3616%" y="143.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::RangeStreamOnce&gt;::uncons_range (3 samples, 0.09%)</title><rect x="46.1694%" y="437" width="0.0867%" height="15" fill="rgb(219,33,29)" fg:x="1597" fg:w="3"/><text x="46.4194%" y="447.50"></text></g><g><title>&lt;combine::stream::MaybePartialStream&lt;S&gt; as combine::stream::RangeStreamOnce&gt;::uncons_range (3 samples, 0.09%)</title><rect x="46.1694%" y="421" width="0.0867%" height="15" fill="rgb(223,176,5)" fg:x="1597" fg:w="3"/><text x="46.4194%" y="431.50"></text></g><g><title>&lt;&amp;[T] as combine::stream::RangeStreamOnce&gt;::uncons_range (3 samples, 0.09%)</title><rect x="46.1694%" y="405" width="0.0867%" height="15" fill="rgb(228,140,14)" fg:x="1597" fg:w="3"/><text x="46.4194%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.03%)</title><rect x="46.2272%" y="389" width="0.0289%" height="15" fill="rgb(217,179,31)" fg:x="1599" fg:w="1"/><text x="46.4772%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.03%)</title><rect x="46.2272%" y="373" width="0.0289%" height="15" fill="rgb(230,9,30)" fg:x="1599" fg:w="1"/><text x="46.4772%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.03%)</title><rect x="46.2272%" y="357" width="0.0289%" height="15" fill="rgb(230,136,20)" fg:x="1599" fg:w="1"/><text x="46.4772%" y="367.50"></text></g><g><title>combine::parser::Parser::parse_mode (18 samples, 0.52%)</title><rect x="46.1405%" y="549" width="0.5204%" height="15" fill="rgb(215,210,22)" fg:x="1596" fg:w="18"/><text x="46.3905%" y="559.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (18 samples, 0.52%)</title><rect x="46.1405%" y="533" width="0.5204%" height="15" fill="rgb(218,43,5)" fg:x="1596" fg:w="18"/><text x="46.3905%" y="543.50"></text></g><g><title>combine::parser::Parser::parse_mode_impl (18 samples, 0.52%)</title><rect x="46.1405%" y="517" width="0.5204%" height="15" fill="rgb(216,11,5)" fg:x="1596" fg:w="18"/><text x="46.3905%" y="527.50"></text></g><g><title>combine::parser::Parser::parse_first (18 samples, 0.52%)</title><rect x="46.1405%" y="501" width="0.5204%" height="15" fill="rgb(209,82,29)" fg:x="1596" fg:w="18"/><text x="46.3905%" y="511.50"></text></g><g><title>combine::parser::Parser::parse_partial (18 samples, 0.52%)</title><rect x="46.1405%" y="485" width="0.5204%" height="15" fill="rgb(244,115,12)" fg:x="1596" fg:w="18"/><text x="46.3905%" y="495.50"></text></g><g><title>&lt;combine::parser::range::Take&lt;Input&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_lazy (18 samples, 0.52%)</title><rect x="46.1405%" y="469" width="0.5204%" height="15" fill="rgb(222,82,18)" fg:x="1596" fg:w="18"/><text x="46.3905%" y="479.50"></text></g><g><title>combine::stream::uncons_range (18 samples, 0.52%)</title><rect x="46.1405%" y="453" width="0.5204%" height="15" fill="rgb(249,227,8)" fg:x="1596" fg:w="18"/><text x="46.3905%" y="463.50"></text></g><g><title>combine::stream::wrap_stream_error (14 samples, 0.40%)</title><rect x="46.2561%" y="437" width="0.4047%" height="15" fill="rgb(253,141,45)" fg:x="1600" fg:w="14"/><text x="46.5061%" y="447.50"></text></g><g><title>&lt;combine::stream::easy::Errors&lt;Item,Range,Position&gt; as combine::error::ParseError&lt;Item,Range,Position&gt;&gt;::from_error (13 samples, 0.38%)</title><rect x="46.2851%" y="421" width="0.3758%" height="15" fill="rgb(234,184,4)" fg:x="1601" fg:w="13"/><text x="46.5351%" y="431.50"></text></g><g><title>combine::stream::easy::Errors&lt;T,R,P&gt;::new (13 samples, 0.38%)</title><rect x="46.2851%" y="405" width="0.3758%" height="15" fill="rgb(218,194,23)" fg:x="1601" fg:w="13"/><text x="46.5351%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (12 samples, 0.35%)</title><rect x="46.3140%" y="389" width="0.3469%" height="15" fill="rgb(235,66,41)" fg:x="1602" fg:w="12"/><text x="46.5640%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.35%)</title><rect x="46.3140%" y="373" width="0.3469%" height="15" fill="rgb(245,217,1)" fg:x="1602" fg:w="12"/><text x="46.5640%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.35%)</title><rect x="46.3140%" y="357" width="0.3469%" height="15" fill="rgb(229,91,1)" fg:x="1602" fg:w="12"/><text x="46.5640%" y="367.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.35%)</title><rect x="46.3140%" y="341" width="0.3469%" height="15" fill="rgb(207,101,30)" fg:x="1602" fg:w="12"/><text x="46.5640%" y="351.50"></text></g><g><title>malloc (12 samples, 0.35%)</title><rect x="46.3140%" y="325" width="0.3469%" height="15" fill="rgb(223,82,49)" fg:x="1602" fg:w="12"/><text x="46.5640%" y="335.50"></text></g><g><title>__rdl_alloc (3 samples, 0.09%)</title><rect x="46.6609%" y="373" width="0.0867%" height="15" fill="rgb(218,167,17)" fg:x="1614" fg:w="3"/><text x="46.9109%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.09%)</title><rect x="46.6609%" y="357" width="0.0867%" height="15" fill="rgb(208,103,14)" fg:x="1614" fg:w="3"/><text x="46.9109%" y="367.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="46.7476%" y="373" width="0.0289%" height="15" fill="rgb(238,20,8)" fg:x="1617" fg:w="1"/><text x="46.9976%" y="383.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.03%)</title><rect x="46.7765%" y="373" width="0.0289%" height="15" fill="rgb(218,80,54)" fg:x="1618" fg:w="1"/><text x="47.0265%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (24 samples, 0.69%)</title><rect x="46.6609%" y="469" width="0.6938%" height="15" fill="rgb(240,144,17)" fg:x="1614" fg:w="24"/><text x="46.9109%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (24 samples, 0.69%)</title><rect x="46.6609%" y="453" width="0.6938%" height="15" fill="rgb(245,27,50)" fg:x="1614" fg:w="24"/><text x="46.9109%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (24 samples, 0.69%)</title><rect x="46.6609%" y="437" width="0.6938%" height="15" fill="rgb(251,51,7)" fg:x="1614" fg:w="24"/><text x="46.9109%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (24 samples, 0.69%)</title><rect x="46.6609%" y="421" width="0.6938%" height="15" fill="rgb(245,217,29)" fg:x="1614" fg:w="24"/><text x="46.9109%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (24 samples, 0.69%)</title><rect x="46.6609%" y="405" width="0.6938%" height="15" fill="rgb(221,176,29)" fg:x="1614" fg:w="24"/><text x="46.9109%" y="415.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.69%)</title><rect x="46.6609%" y="389" width="0.6938%" height="15" fill="rgb(212,180,24)" fg:x="1614" fg:w="24"/><text x="46.9109%" y="399.50"></text></g><g><title>malloc (19 samples, 0.55%)</title><rect x="46.8054%" y="373" width="0.5493%" height="15" fill="rgb(254,24,2)" fg:x="1619" fg:w="19"/><text x="47.0554%" y="383.50"></text></g><g><title>combine::parser::Parser::parse_committed_mode (112 samples, 3.24%)</title><rect x="44.2903%" y="741" width="3.2379%" height="15" fill="rgb(230,100,2)" fg:x="1532" fg:w="112"/><text x="44.5403%" y="751.50">com..</text></g><g><title>combine::parser::ParseMode::parse_committed (112 samples, 3.24%)</title><rect x="44.2903%" y="725" width="3.2379%" height="15" fill="rgb(219,142,25)" fg:x="1532" fg:w="112"/><text x="44.5403%" y="735.50">com..</text></g><g><title>&lt;combine::parser::combinator::Either&lt;L,R&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (107 samples, 3.09%)</title><rect x="44.4348%" y="709" width="3.0934%" height="15" fill="rgb(240,73,43)" fg:x="1537" fg:w="107"/><text x="44.6848%" y="719.50">&lt;co..</text></g><g><title>combine::parser::Parser::parse_mode (102 samples, 2.95%)</title><rect x="44.5794%" y="693" width="2.9488%" height="15" fill="rgb(214,114,15)" fg:x="1542" fg:w="102"/><text x="44.8294%" y="703.50">co..</text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (102 samples, 2.95%)</title><rect x="44.5794%" y="677" width="2.9488%" height="15" fill="rgb(207,130,4)" fg:x="1542" fg:w="102"/><text x="44.8294%" y="687.50">&lt;c..</text></g><g><title>&lt;combine::parser::sequence::Skip&lt;P1,P2&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (102 samples, 2.95%)</title><rect x="44.5794%" y="661" width="2.9488%" height="15" fill="rgb(221,25,40)" fg:x="1542" fg:w="102"/><text x="44.8294%" y="671.50">&lt;c..</text></g><g><title>combine::parser::Parser::parse_mode (99 samples, 2.86%)</title><rect x="44.6661%" y="645" width="2.8621%" height="15" fill="rgb(241,184,7)" fg:x="1545" fg:w="99"/><text x="44.9161%" y="655.50">co..</text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (99 samples, 2.86%)</title><rect x="44.6661%" y="629" width="2.8621%" height="15" fill="rgb(235,159,4)" fg:x="1545" fg:w="99"/><text x="44.9161%" y="639.50">&lt;c..</text></g><g><title>combine::parser::sequence::&lt;impl combine::parser::Parser&lt;Input&gt; for (A,B)&gt;::parse_mode_impl (99 samples, 2.86%)</title><rect x="44.6661%" y="613" width="2.8621%" height="15" fill="rgb(214,87,48)" fg:x="1545" fg:w="99"/><text x="44.9161%" y="623.50">co..</text></g><g><title>combine::parser::Parser::parse_mode (89 samples, 2.57%)</title><rect x="44.9552%" y="597" width="2.5730%" height="15" fill="rgb(246,198,24)" fg:x="1555" fg:w="89"/><text x="45.2052%" y="607.50">co..</text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (89 samples, 2.57%)</title><rect x="44.9552%" y="581" width="2.5730%" height="15" fill="rgb(209,66,40)" fg:x="1555" fg:w="89"/><text x="45.2052%" y="591.50">&lt;c..</text></g><g><title>&lt;combine::parser::combinator::Map&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (48 samples, 1.39%)</title><rect x="46.1405%" y="565" width="1.3877%" height="15" fill="rgb(233,147,39)" fg:x="1596" fg:w="48"/><text x="46.3905%" y="575.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (30 samples, 0.87%)</title><rect x="46.6609%" y="549" width="0.8673%" height="15" fill="rgb(231,145,52)" fg:x="1614" fg:w="30"/><text x="46.9109%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (30 samples, 0.87%)</title><rect x="46.6609%" y="533" width="0.8673%" height="15" fill="rgb(206,20,26)" fg:x="1614" fg:w="30"/><text x="46.9109%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (30 samples, 0.87%)</title><rect x="46.6609%" y="517" width="0.8673%" height="15" fill="rgb(238,220,4)" fg:x="1614" fg:w="30"/><text x="46.9109%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (30 samples, 0.87%)</title><rect x="46.6609%" y="501" width="0.8673%" height="15" fill="rgb(252,195,42)" fg:x="1614" fg:w="30"/><text x="46.9109%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (30 samples, 0.87%)</title><rect x="46.6609%" y="485" width="0.8673%" height="15" fill="rgb(209,10,6)" fg:x="1614" fg:w="30"/><text x="46.9109%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (6 samples, 0.17%)</title><rect x="47.3547%" y="469" width="0.1735%" height="15" fill="rgb(229,3,52)" fg:x="1638" fg:w="6"/><text x="47.6047%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.17%)</title><rect x="47.3547%" y="453" width="0.1735%" height="15" fill="rgb(253,49,37)" fg:x="1638" fg:w="6"/><text x="47.6047%" y="463.50"></text></g><g><title>[libc.so.6] (3 samples, 0.09%)</title><rect x="47.4415%" y="437" width="0.0867%" height="15" fill="rgb(240,103,49)" fg:x="1641" fg:w="3"/><text x="47.6915%" y="447.50"></text></g><g><title>&lt;&amp;mut I as combine::stream::ResetStream&gt;::checkpoint (1 samples, 0.03%)</title><rect x="48.1353%" y="645" width="0.0289%" height="15" fill="rgb(250,182,30)" fg:x="1665" fg:w="1"/><text x="48.3853%" y="655.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::ResetStream&gt;::checkpoint (1 samples, 0.03%)</title><rect x="48.1353%" y="629" width="0.0289%" height="15" fill="rgb(248,8,30)" fg:x="1665" fg:w="1"/><text x="48.3853%" y="639.50"></text></g><g><title>&lt;combine::stream::MaybePartialStream&lt;S&gt; as combine::stream::ResetStream&gt;::checkpoint (1 samples, 0.03%)</title><rect x="48.1353%" y="613" width="0.0289%" height="15" fill="rgb(237,120,30)" fg:x="1665" fg:w="1"/><text x="48.3853%" y="623.50"></text></g><g><title>&lt;&amp;[T] as combine::stream::ResetStream&gt;::checkpoint (1 samples, 0.03%)</title><rect x="48.1353%" y="597" width="0.0289%" height="15" fill="rgb(221,146,34)" fg:x="1665" fg:w="1"/><text x="48.3853%" y="607.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for &amp;T&gt;::clone (1 samples, 0.03%)</title><rect x="48.1353%" y="581" width="0.0289%" height="15" fill="rgb(242,55,13)" fg:x="1665" fg:w="1"/><text x="48.3853%" y="591.50"></text></g><g><title>&lt;combine::parser::range::Take&lt;Input&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_lazy (3 samples, 0.09%)</title><rect x="48.4822%" y="533" width="0.0867%" height="15" fill="rgb(242,112,31)" fg:x="1677" fg:w="3"/><text x="48.7322%" y="543.50"></text></g><g><title>combine::stream::uncons_range (3 samples, 0.09%)</title><rect x="48.4822%" y="517" width="0.0867%" height="15" fill="rgb(249,192,27)" fg:x="1677" fg:w="3"/><text x="48.7322%" y="527.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::RangeStreamOnce&gt;::uncons_range (3 samples, 0.09%)</title><rect x="48.4822%" y="501" width="0.0867%" height="15" fill="rgb(208,204,44)" fg:x="1677" fg:w="3"/><text x="48.7322%" y="511.50"></text></g><g><title>&lt;combine::stream::MaybePartialStream&lt;S&gt; as combine::stream::RangeStreamOnce&gt;::uncons_range (3 samples, 0.09%)</title><rect x="48.4822%" y="485" width="0.0867%" height="15" fill="rgb(208,93,54)" fg:x="1677" fg:w="3"/><text x="48.7322%" y="495.50"></text></g><g><title>&lt;&amp;[T] as combine::stream::RangeStreamOnce&gt;::uncons_range (3 samples, 0.09%)</title><rect x="48.4822%" y="469" width="0.0867%" height="15" fill="rgb(242,1,31)" fg:x="1677" fg:w="3"/><text x="48.7322%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.03%)</title><rect x="48.5400%" y="453" width="0.0289%" height="15" fill="rgb(241,83,25)" fg:x="1679" fg:w="1"/><text x="48.7900%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.03%)</title><rect x="48.5400%" y="437" width="0.0289%" height="15" fill="rgb(205,169,50)" fg:x="1679" fg:w="1"/><text x="48.7900%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.03%)</title><rect x="48.5400%" y="421" width="0.0289%" height="15" fill="rgb(239,186,37)" fg:x="1679" fg:w="1"/><text x="48.7900%" y="431.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::ResetStream&gt;::checkpoint (1 samples, 0.03%)</title><rect x="48.5690%" y="533" width="0.0289%" height="15" fill="rgb(205,221,10)" fg:x="1680" fg:w="1"/><text x="48.8190%" y="543.50"></text></g><g><title>&lt;combine::stream::MaybePartialStream&lt;S&gt; as combine::stream::ResetStream&gt;::checkpoint (1 samples, 0.03%)</title><rect x="48.5690%" y="517" width="0.0289%" height="15" fill="rgb(218,196,15)" fg:x="1680" fg:w="1"/><text x="48.8190%" y="527.50"></text></g><g><title>&lt;&amp;[T] as combine::stream::ResetStream&gt;::checkpoint (1 samples, 0.03%)</title><rect x="48.5690%" y="501" width="0.0289%" height="15" fill="rgb(218,196,35)" fg:x="1680" fg:w="1"/><text x="48.8190%" y="511.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for &amp;T&gt;::clone (1 samples, 0.03%)</title><rect x="48.5690%" y="485" width="0.0289%" height="15" fill="rgb(233,63,24)" fg:x="1680" fg:w="1"/><text x="48.8190%" y="495.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (2 samples, 0.06%)</title><rect x="49.3784%" y="181" width="0.0578%" height="15" fill="rgb(225,8,4)" fg:x="1708" fg:w="2"/><text x="49.6284%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (2 samples, 0.06%)</title><rect x="49.3784%" y="165" width="0.0578%" height="15" fill="rgb(234,105,35)" fg:x="1708" fg:w="2"/><text x="49.6284%" y="175.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (3 samples, 0.09%)</title><rect x="49.6675%" y="101" width="0.0867%" height="15" fill="rgb(236,21,32)" fg:x="1718" fg:w="3"/><text x="49.9175%" y="111.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (3 samples, 0.09%)</title><rect x="49.6675%" y="85" width="0.0867%" height="15" fill="rgb(228,109,6)" fg:x="1718" fg:w="3"/><text x="49.9175%" y="95.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (14 samples, 0.40%)</title><rect x="49.6097%" y="117" width="0.4047%" height="15" fill="rgb(229,215,31)" fg:x="1716" fg:w="14"/><text x="49.8597%" y="127.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (9 samples, 0.26%)</title><rect x="49.7543%" y="101" width="0.2602%" height="15" fill="rgb(221,52,54)" fg:x="1721" fg:w="9"/><text x="50.0043%" y="111.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (8 samples, 0.23%)</title><rect x="49.7832%" y="85" width="0.2313%" height="15" fill="rgb(252,129,43)" fg:x="1722" fg:w="8"/><text x="50.0332%" y="95.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (7 samples, 0.20%)</title><rect x="49.8121%" y="69" width="0.2024%" height="15" fill="rgb(248,183,27)" fg:x="1723" fg:w="7"/><text x="50.0621%" y="79.50"></text></g><g><title>memchr::vector::x86avx2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m256i&gt;::movemask (4 samples, 0.12%)</title><rect x="49.8988%" y="53" width="0.1156%" height="15" fill="rgb(250,0,22)" fg:x="1726" fg:w="4"/><text x="50.1488%" y="63.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (4 samples, 0.12%)</title><rect x="49.8988%" y="37" width="0.1156%" height="15" fill="rgb(213,166,10)" fg:x="1726" fg:w="4"/><text x="50.1488%" y="47.50"></text></g><g><title>&lt;memchr::memchr::Memchr as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.69%)</title><rect x="49.3784%" y="213" width="0.6938%" height="15" fill="rgb(207,163,36)" fg:x="1708" fg:w="24"/><text x="49.6284%" y="223.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (24 samples, 0.69%)</title><rect x="49.3784%" y="197" width="0.6938%" height="15" fill="rgb(208,122,22)" fg:x="1708" fg:w="24"/><text x="49.6284%" y="207.50"></text></g><g><title>&lt;memchr::memchr::Memchr as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (22 samples, 0.64%)</title><rect x="49.4363%" y="181" width="0.6360%" height="15" fill="rgb(207,104,49)" fg:x="1710" fg:w="22"/><text x="49.6863%" y="191.50"></text></g><g><title>memchr::memchr::memchr_raw (22 samples, 0.64%)</title><rect x="49.4363%" y="165" width="0.6360%" height="15" fill="rgb(248,211,50)" fg:x="1710" fg:w="22"/><text x="49.6863%" y="175.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (22 samples, 0.64%)</title><rect x="49.4363%" y="149" width="0.6360%" height="15" fill="rgb(217,13,45)" fg:x="1710" fg:w="22"/><text x="49.6863%" y="159.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (22 samples, 0.64%)</title><rect x="49.4363%" y="133" width="0.6360%" height="15" fill="rgb(211,216,49)" fg:x="1710" fg:w="22"/><text x="49.6863%" y="143.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::new_unchecked (2 samples, 0.06%)</title><rect x="50.0145%" y="117" width="0.0578%" height="15" fill="rgb(221,58,53)" fg:x="1730" fg:w="2"/><text x="50.2645%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (5 samples, 0.14%)</title><rect x="50.0723%" y="213" width="0.1446%" height="15" fill="rgb(220,112,41)" fg:x="1732" fg:w="5"/><text x="50.3223%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.14%)</title><rect x="50.0723%" y="197" width="0.1446%" height="15" fill="rgb(236,38,28)" fg:x="1732" fg:w="5"/><text x="50.3223%" y="207.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (5 samples, 0.14%)</title><rect x="50.0723%" y="181" width="0.1446%" height="15" fill="rgb(227,195,22)" fg:x="1732" fg:w="5"/><text x="50.3223%" y="191.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (5 samples, 0.14%)</title><rect x="50.0723%" y="165" width="0.1446%" height="15" fill="rgb(214,55,33)" fg:x="1732" fg:w="5"/><text x="50.3223%" y="175.50"></text></g><g><title>[libc.so.6] (3 samples, 0.09%)</title><rect x="50.1301%" y="149" width="0.0867%" height="15" fill="rgb(248,80,13)" fg:x="1734" fg:w="3"/><text x="50.3801%" y="159.50"></text></g><g><title>&lt;combine::parser::byte::take_until_bytes&lt;Input&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl::{{closure}} (38 samples, 1.10%)</title><rect x="49.1761%" y="245" width="1.0986%" height="15" fill="rgb(238,52,6)" fg:x="1701" fg:w="38"/><text x="49.4261%" y="255.50"></text></g><g><title>combine::parser::byte::memslice (37 samples, 1.07%)</title><rect x="49.2050%" y="229" width="1.0697%" height="15" fill="rgb(224,198,47)" fg:x="1702" fg:w="37"/><text x="49.4550%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.06%)</title><rect x="50.2168%" y="213" width="0.0578%" height="15" fill="rgb(233,171,20)" fg:x="1737" fg:w="2"/><text x="50.4668%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.06%)</title><rect x="50.2168%" y="197" width="0.0578%" height="15" fill="rgb(241,30,25)" fg:x="1737" fg:w="2"/><text x="50.4668%" y="207.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.06%)</title><rect x="50.2168%" y="181" width="0.0578%" height="15" fill="rgb(207,171,38)" fg:x="1737" fg:w="2"/><text x="50.4668%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.06%)</title><rect x="50.2168%" y="165" width="0.0578%" height="15" fill="rgb(234,70,1)" fg:x="1737" fg:w="2"/><text x="50.4668%" y="175.50"></text></g><g><title>&lt;combine::parser::combinator::Ignore&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (43 samples, 1.24%)</title><rect x="49.1182%" y="325" width="1.2431%" height="15" fill="rgb(232,178,18)" fg:x="1699" fg:w="43"/><text x="49.3682%" y="335.50"></text></g><g><title>combine::parser::Parser::parse_mode (43 samples, 1.24%)</title><rect x="49.1182%" y="309" width="1.2431%" height="15" fill="rgb(241,78,40)" fg:x="1699" fg:w="43"/><text x="49.3682%" y="319.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (43 samples, 1.24%)</title><rect x="49.1182%" y="293" width="1.2431%" height="15" fill="rgb(222,35,25)" fg:x="1699" fg:w="43"/><text x="49.3682%" y="303.50"></text></g><g><title>&lt;combine::parser::byte::take_until_bytes&lt;Input&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (43 samples, 1.24%)</title><rect x="49.1182%" y="277" width="1.2431%" height="15" fill="rgb(207,92,16)" fg:x="1699" fg:w="43"/><text x="49.3682%" y="287.50"></text></g><g><title>&lt;combine::parser::range::TakeFn&lt;F,Input&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (43 samples, 1.24%)</title><rect x="49.1182%" y="261" width="1.2431%" height="15" fill="rgb(216,59,51)" fg:x="1699" fg:w="43"/><text x="49.3682%" y="271.50"></text></g><g><title>combine::stream::uncons_range (3 samples, 0.09%)</title><rect x="50.2746%" y="245" width="0.0867%" height="15" fill="rgb(213,80,28)" fg:x="1739" fg:w="3"/><text x="50.5246%" y="255.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::RangeStreamOnce&gt;::uncons_range (3 samples, 0.09%)</title><rect x="50.2746%" y="229" width="0.0867%" height="15" fill="rgb(220,93,7)" fg:x="1739" fg:w="3"/><text x="50.5246%" y="239.50"></text></g><g><title>&lt;combine::stream::MaybePartialStream&lt;S&gt; as combine::stream::RangeStreamOnce&gt;::uncons_range (3 samples, 0.09%)</title><rect x="50.2746%" y="213" width="0.0867%" height="15" fill="rgb(225,24,44)" fg:x="1739" fg:w="3"/><text x="50.5246%" y="223.50"></text></g><g><title>&lt;&amp;[T] as combine::stream::RangeStreamOnce&gt;::uncons_range (3 samples, 0.09%)</title><rect x="50.2746%" y="197" width="0.0867%" height="15" fill="rgb(243,74,40)" fg:x="1739" fg:w="3"/><text x="50.5246%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.06%)</title><rect x="50.3036%" y="181" width="0.0578%" height="15" fill="rgb(228,39,7)" fg:x="1740" fg:w="2"/><text x="50.5536%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (2 samples, 0.06%)</title><rect x="50.3036%" y="165" width="0.0578%" height="15" fill="rgb(227,79,8)" fg:x="1740" fg:w="2"/><text x="50.5536%" y="175.50"></text></g><g><title>combine::parser::Parser::parse_mode (79 samples, 2.28%)</title><rect x="48.1642%" y="645" width="2.2839%" height="15" fill="rgb(236,58,11)" fg:x="1666" fg:w="79"/><text x="48.4142%" y="655.50">c..</text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (79 samples, 2.28%)</title><rect x="48.1642%" y="629" width="2.2839%" height="15" fill="rgb(249,63,35)" fg:x="1666" fg:w="79"/><text x="48.4142%" y="639.50">&lt;..</text></g><g><title>&lt;combine::parser::range::Recognize&lt;Input,P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (79 samples, 2.28%)</title><rect x="48.1642%" y="613" width="2.2839%" height="15" fill="rgb(252,114,16)" fg:x="1666" fg:w="79"/><text x="48.4142%" y="623.50">&lt;..</text></g><g><title>combine::parser::Parser::parse_mode (77 samples, 2.23%)</title><rect x="48.2220%" y="597" width="2.2261%" height="15" fill="rgb(254,151,24)" fg:x="1668" fg:w="77"/><text x="48.4720%" y="607.50">c..</text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (77 samples, 2.23%)</title><rect x="48.2220%" y="581" width="2.2261%" height="15" fill="rgb(253,54,39)" fg:x="1668" fg:w="77"/><text x="48.4720%" y="591.50">&lt;..</text></g><g><title>&lt;combine::parser::combinator::Map&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (77 samples, 2.23%)</title><rect x="48.2220%" y="565" width="2.2261%" height="15" fill="rgb(243,25,45)" fg:x="1668" fg:w="77"/><text x="48.4720%" y="575.50">&lt;..</text></g><g><title>&lt;combine::parser::range::RecognizeWithValue&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (68 samples, 1.97%)</title><rect x="48.4822%" y="549" width="1.9659%" height="15" fill="rgb(234,134,9)" fg:x="1677" fg:w="68"/><text x="48.7322%" y="559.50">&lt;..</text></g><g><title>combine::parser::Parser::parse_mode (64 samples, 1.85%)</title><rect x="48.5979%" y="533" width="1.8502%" height="15" fill="rgb(227,166,31)" fg:x="1681" fg:w="64"/><text x="48.8479%" y="543.50">c..</text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (64 samples, 1.85%)</title><rect x="48.5979%" y="517" width="1.8502%" height="15" fill="rgb(245,143,41)" fg:x="1681" fg:w="64"/><text x="48.8479%" y="527.50">&lt;..</text></g><g><title>combine::parser::Parser::parse_mode_impl (64 samples, 1.85%)</title><rect x="48.5979%" y="501" width="1.8502%" height="15" fill="rgb(238,181,32)" fg:x="1681" fg:w="64"/><text x="48.8479%" y="511.50">c..</text></g><g><title>&lt;&amp;mut P as combine::parser::Parser&lt;Input&gt;&gt;::parse_first (64 samples, 1.85%)</title><rect x="48.5979%" y="485" width="1.8502%" height="15" fill="rgb(224,113,18)" fg:x="1681" fg:w="64"/><text x="48.8479%" y="495.50">&lt;..</text></g><g><title>&lt;combine::parser::sequence::With&lt;P1,P2&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_first (64 samples, 1.85%)</title><rect x="48.5979%" y="469" width="1.8502%" height="15" fill="rgb(240,229,28)" fg:x="1681" fg:w="64"/><text x="48.8479%" y="479.50">&lt;..</text></g><g><title>combine::parser::Parser::parse_mode (64 samples, 1.85%)</title><rect x="48.5979%" y="453" width="1.8502%" height="15" fill="rgb(250,185,3)" fg:x="1681" fg:w="64"/><text x="48.8479%" y="463.50">c..</text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (64 samples, 1.85%)</title><rect x="48.5979%" y="437" width="1.8502%" height="15" fill="rgb(212,59,25)" fg:x="1681" fg:w="64"/><text x="48.8479%" y="447.50">&lt;..</text></g><g><title>&lt;combine::parser::sequence::With&lt;P1,P2&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (64 samples, 1.85%)</title><rect x="48.5979%" y="421" width="1.8502%" height="15" fill="rgb(221,87,20)" fg:x="1681" fg:w="64"/><text x="48.8479%" y="431.50">&lt;..</text></g><g><title>combine::parser::Parser::parse_mode (64 samples, 1.85%)</title><rect x="48.5979%" y="405" width="1.8502%" height="15" fill="rgb(213,74,28)" fg:x="1681" fg:w="64"/><text x="48.8479%" y="415.50">c..</text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (64 samples, 1.85%)</title><rect x="48.5979%" y="389" width="1.8502%" height="15" fill="rgb(224,132,34)" fg:x="1681" fg:w="64"/><text x="48.8479%" y="399.50">&lt;..</text></g><g><title>combine::parser::sequence::&lt;impl combine::parser::Parser&lt;Input&gt; for (A,B)&gt;::parse_mode_impl (64 samples, 1.85%)</title><rect x="48.5979%" y="373" width="1.8502%" height="15" fill="rgb(222,101,24)" fg:x="1681" fg:w="64"/><text x="48.8479%" y="383.50">c..</text></g><g><title>combine::parser::Parser::parse_mode (46 samples, 1.33%)</title><rect x="49.1182%" y="357" width="1.3299%" height="15" fill="rgb(254,142,4)" fg:x="1699" fg:w="46"/><text x="49.3682%" y="367.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (46 samples, 1.33%)</title><rect x="49.1182%" y="341" width="1.3299%" height="15" fill="rgb(230,229,49)" fg:x="1699" fg:w="46"/><text x="49.3682%" y="351.50"></text></g><g><title>&lt;combine::parser::combinator::Map&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (3 samples, 0.09%)</title><rect x="50.3614%" y="325" width="0.0867%" height="15" fill="rgb(238,70,47)" fg:x="1742" fg:w="3"/><text x="50.6114%" y="335.50"></text></g><g><title>combine::parser::Parser::parse_mode (3 samples, 0.09%)</title><rect x="50.3614%" y="309" width="0.0867%" height="15" fill="rgb(231,160,17)" fg:x="1742" fg:w="3"/><text x="50.6114%" y="319.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (3 samples, 0.09%)</title><rect x="50.3614%" y="293" width="0.0867%" height="15" fill="rgb(218,68,53)" fg:x="1742" fg:w="3"/><text x="50.6114%" y="303.50"></text></g><g><title>combine::parser::Parser::parse_mode_impl (3 samples, 0.09%)</title><rect x="50.3614%" y="277" width="0.0867%" height="15" fill="rgb(236,111,10)" fg:x="1742" fg:w="3"/><text x="50.6114%" y="287.50"></text></g><g><title>combine::parser::Parser::parse_first (3 samples, 0.09%)</title><rect x="50.3614%" y="261" width="0.0867%" height="15" fill="rgb(224,34,41)" fg:x="1742" fg:w="3"/><text x="50.6114%" y="271.50"></text></g><g><title>combine::parser::Parser::parse_partial (3 samples, 0.09%)</title><rect x="50.3614%" y="245" width="0.0867%" height="15" fill="rgb(241,118,19)" fg:x="1742" fg:w="3"/><text x="50.6114%" y="255.50"></text></g><g><title>&lt;combine::parser::range::Take&lt;Input&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_lazy (3 samples, 0.09%)</title><rect x="50.3614%" y="229" width="0.0867%" height="15" fill="rgb(238,129,25)" fg:x="1742" fg:w="3"/><text x="50.6114%" y="239.50"></text></g><g><title>combine::stream::uncons_range (3 samples, 0.09%)</title><rect x="50.3614%" y="213" width="0.0867%" height="15" fill="rgb(238,22,31)" fg:x="1742" fg:w="3"/><text x="50.6114%" y="223.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::RangeStreamOnce&gt;::uncons_range (2 samples, 0.06%)</title><rect x="50.3903%" y="197" width="0.0578%" height="15" fill="rgb(222,174,48)" fg:x="1743" fg:w="2"/><text x="50.6403%" y="207.50"></text></g><g><title>&lt;combine::stream::MaybePartialStream&lt;S&gt; as combine::stream::RangeStreamOnce&gt;::uncons_range (2 samples, 0.06%)</title><rect x="50.3903%" y="181" width="0.0578%" height="15" fill="rgb(206,152,40)" fg:x="1743" fg:w="2"/><text x="50.6403%" y="191.50"></text></g><g><title>&lt;&amp;[T] as combine::stream::RangeStreamOnce&gt;::uncons_range (2 samples, 0.06%)</title><rect x="50.3903%" y="165" width="0.0578%" height="15" fill="rgb(218,99,54)" fg:x="1743" fg:w="2"/><text x="50.6403%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.03%)</title><rect x="50.4192%" y="149" width="0.0289%" height="15" fill="rgb(220,174,26)" fg:x="1744" fg:w="1"/><text x="50.6692%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.03%)</title><rect x="50.4192%" y="133" width="0.0289%" height="15" fill="rgb(245,116,9)" fg:x="1744" fg:w="1"/><text x="50.6692%" y="143.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.03%)</title><rect x="50.4192%" y="117" width="0.0289%" height="15" fill="rgb(209,72,35)" fg:x="1744" fg:w="1"/><text x="50.6692%" y="127.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (11 samples, 0.32%)</title><rect x="50.4770%" y="629" width="0.3180%" height="15" fill="rgb(226,126,21)" fg:x="1746" fg:w="11"/><text x="50.7270%" y="639.50"></text></g><g><title>combine::parser::Parser::parse_mode (121 samples, 3.50%)</title><rect x="47.7595%" y="693" width="3.4981%" height="15" fill="rgb(227,192,1)" fg:x="1652" fg:w="121"/><text x="48.0095%" y="703.50">com..</text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (121 samples, 3.50%)</title><rect x="47.7595%" y="677" width="3.4981%" height="15" fill="rgb(237,180,29)" fg:x="1652" fg:w="121"/><text x="48.0095%" y="687.50">&lt;co..</text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (121 samples, 3.50%)</title><rect x="47.7595%" y="661" width="3.4981%" height="15" fill="rgb(230,197,35)" fg:x="1652" fg:w="121"/><text x="48.0095%" y="671.50">&lt;co..</text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (28 samples, 0.81%)</title><rect x="50.4481%" y="645" width="0.8095%" height="15" fill="rgb(246,193,31)" fg:x="1745" fg:w="28"/><text x="50.6981%" y="655.50"></text></g><g><title>core::str::converts::from_utf8 (16 samples, 0.46%)</title><rect x="50.7950%" y="629" width="0.4626%" height="15" fill="rgb(241,36,4)" fg:x="1757" fg:w="16"/><text x="51.0450%" y="639.50"></text></g><g><title>core::str::validations::run_utf8_validation (8 samples, 0.23%)</title><rect x="51.0263%" y="613" width="0.2313%" height="15" fill="rgb(241,130,17)" fg:x="1765" fg:w="8"/><text x="51.2763%" y="623.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.03%)</title><rect x="51.2287%" y="597" width="0.0289%" height="15" fill="rgb(206,137,32)" fg:x="1772" fg:w="1"/><text x="51.4787%" y="607.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="51.6045%" y="629" width="0.0578%" height="15" fill="rgb(237,228,51)" fg:x="1785" fg:w="2"/><text x="51.8545%" y="639.50"></text></g><g><title>&lt;isize as core::ops::arith::Add&gt;::add (2 samples, 0.06%)</title><rect x="51.6623%" y="629" width="0.0578%" height="15" fill="rgb(243,6,42)" fg:x="1787" fg:w="2"/><text x="51.9123%" y="639.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (14 samples, 0.40%)</title><rect x="51.3732%" y="677" width="0.4047%" height="15" fill="rgb(251,74,28)" fg:x="1777" fg:w="14"/><text x="51.6232%" y="687.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for i64&gt;::from_str (14 samples, 0.40%)</title><rect x="51.3732%" y="661" width="0.4047%" height="15" fill="rgb(218,20,49)" fg:x="1777" fg:w="14"/><text x="51.6232%" y="671.50"></text></g><g><title>core::num::from_str_radix (12 samples, 0.35%)</title><rect x="51.4310%" y="645" width="0.3469%" height="15" fill="rgb(238,28,14)" fg:x="1779" fg:w="12"/><text x="51.6810%" y="655.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (2 samples, 0.06%)</title><rect x="51.7202%" y="629" width="0.0578%" height="15" fill="rgb(229,40,46)" fg:x="1789" fg:w="2"/><text x="51.9702%" y="639.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (1 samples, 0.03%)</title><rect x="51.8647%" y="597" width="0.0289%" height="15" fill="rgb(244,195,20)" fg:x="1794" fg:w="1"/><text x="52.1147%" y="607.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim::{{closure}} (1 samples, 0.03%)</title><rect x="51.8647%" y="581" width="0.0289%" height="15" fill="rgb(253,56,35)" fg:x="1794" fg:w="1"/><text x="52.1147%" y="591.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (1 samples, 0.03%)</title><rect x="51.8647%" y="565" width="0.0289%" height="15" fill="rgb(210,149,44)" fg:x="1794" fg:w="1"/><text x="52.1147%" y="575.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::ReverseSearcher&gt;::next_reject_back (3 samples, 0.09%)</title><rect x="51.8358%" y="645" width="0.0867%" height="15" fill="rgb(240,135,12)" fg:x="1793" fg:w="3"/><text x="52.0858%" y="655.50"></text></g><g><title>core::str::pattern::ReverseSearcher::next_reject_back (3 samples, 0.09%)</title><rect x="51.8358%" y="629" width="0.0867%" height="15" fill="rgb(251,24,50)" fg:x="1793" fg:w="3"/><text x="52.0858%" y="639.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::ReverseSearcher&gt;::next_back (3 samples, 0.09%)</title><rect x="51.8358%" y="613" width="0.0867%" height="15" fill="rgb(243,200,47)" fg:x="1793" fg:w="3"/><text x="52.0858%" y="623.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1 samples, 0.03%)</title><rect x="51.8936%" y="597" width="0.0289%" height="15" fill="rgb(224,166,26)" fg:x="1795" fg:w="1"/><text x="52.1436%" y="607.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1 samples, 0.03%)</title><rect x="51.8936%" y="581" width="0.0289%" height="15" fill="rgb(233,0,47)" fg:x="1795" fg:w="1"/><text x="52.1436%" y="591.50"></text></g><g><title>core::str::validations::next_code_point_reverse (1 samples, 0.03%)</title><rect x="51.8936%" y="565" width="0.0289%" height="15" fill="rgb(253,80,5)" fg:x="1795" fg:w="1"/><text x="52.1436%" y="575.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (1 samples, 0.03%)</title><rect x="51.9225%" y="597" width="0.0289%" height="15" fill="rgb(214,133,25)" fg:x="1796" fg:w="1"/><text x="52.1725%" y="607.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim::{{closure}} (1 samples, 0.03%)</title><rect x="51.9225%" y="581" width="0.0289%" height="15" fill="rgb(209,27,14)" fg:x="1796" fg:w="1"/><text x="52.1725%" y="591.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (1 samples, 0.03%)</title><rect x="51.9225%" y="565" width="0.0289%" height="15" fill="rgb(219,102,51)" fg:x="1796" fg:w="1"/><text x="52.1725%" y="575.50"></text></g><g><title>combine::parser::Parser::parse_mode (158 samples, 4.57%)</title><rect x="47.5282%" y="741" width="4.5678%" height="15" fill="rgb(237,18,16)" fg:x="1644" fg:w="158"/><text x="47.7782%" y="751.50">combi..</text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (158 samples, 4.57%)</title><rect x="47.5282%" y="725" width="4.5678%" height="15" fill="rgb(241,85,17)" fg:x="1644" fg:w="158"/><text x="47.7782%" y="735.50">&lt;comb..</text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (158 samples, 4.57%)</title><rect x="47.5282%" y="709" width="4.5678%" height="15" fill="rgb(236,90,42)" fg:x="1644" fg:w="158"/><text x="47.7782%" y="719.50">&lt;comb..</text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (29 samples, 0.84%)</title><rect x="51.2576%" y="693" width="0.8384%" height="15" fill="rgb(249,57,21)" fg:x="1773" fg:w="29"/><text x="51.5076%" y="703.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim (11 samples, 0.32%)</title><rect x="51.7780%" y="677" width="0.3180%" height="15" fill="rgb(243,12,36)" fg:x="1791" fg:w="11"/><text x="52.0280%" y="687.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (11 samples, 0.32%)</title><rect x="51.7780%" y="661" width="0.3180%" height="15" fill="rgb(253,128,47)" fg:x="1791" fg:w="11"/><text x="52.0280%" y="671.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_reject (6 samples, 0.17%)</title><rect x="51.9225%" y="645" width="0.1735%" height="15" fill="rgb(207,33,20)" fg:x="1796" fg:w="6"/><text x="52.1725%" y="655.50"></text></g><g><title>core::str::pattern::Searcher::next_reject (6 samples, 0.17%)</title><rect x="51.9225%" y="629" width="0.1735%" height="15" fill="rgb(233,215,35)" fg:x="1796" fg:w="6"/><text x="52.1725%" y="639.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (6 samples, 0.17%)</title><rect x="51.9225%" y="613" width="0.1735%" height="15" fill="rgb(249,188,52)" fg:x="1796" fg:w="6"/><text x="52.1725%" y="623.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.14%)</title><rect x="51.9514%" y="597" width="0.1446%" height="15" fill="rgb(225,12,32)" fg:x="1797" fg:w="5"/><text x="52.2014%" y="607.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.12%)</title><rect x="51.9803%" y="581" width="0.1156%" height="15" fill="rgb(247,98,14)" fg:x="1798" fg:w="4"/><text x="52.2303%" y="591.50"></text></g><g><title>core::str::validations::next_code_point (4 samples, 0.12%)</title><rect x="51.9803%" y="565" width="0.1156%" height="15" fill="rgb(247,219,48)" fg:x="1798" fg:w="4"/><text x="52.2303%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="52.0382%" y="549" width="0.0578%" height="15" fill="rgb(253,60,48)" fg:x="1800" fg:w="2"/><text x="52.2882%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;combine::parser::combinator::Either&lt;combine::parser::token::Value&lt;combine::stream::easy::Stream&lt;combine::stream::MaybePartialStream&lt;&amp;[u8]&gt;&gt;,redis::types::Value&gt;,combine::parser::sequence::Skip&lt;combine::parser::combinator::Map&lt;combine::parser::range::Take&lt;combine::stream::easy::Stream&lt;combine::stream::MaybePartialStream&lt;&amp;[u8]&gt;&gt;&gt;,redis::parser::value&lt;combine::stream::easy::Stream&lt;combine::stream::MaybePartialStream&lt;&amp;[u8]&gt;&gt;&gt;::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;,combine::parser::error::Expected&lt;combine::parser::combinator::NoPartial&lt;combine::parser::sequence::With&lt;combine::parser::token::Satisfy&lt;combine::stream::easy::Stream&lt;combine::stream::MaybePartialStream&lt;&amp;[u8]&gt;&gt;,combine::parser::byte::crlf&lt;combine::stream::easy::Stream&lt;combine::stream::MaybePartialStream&lt;&amp;[u8]&gt;&gt;&gt;::{{closure}}&gt;,combine::parser::error::Expected&lt;combine::parser::token::Satisfy&lt;combine::stream::easy::Stream&lt;combine::stream::MaybePartialStream&lt;&amp;[u8]&gt;&gt;,combine::parser::byte::newline&lt;combine::stream::easy::Stream&lt;combine::stream::MaybePartialStream&lt;&amp;[u8]&gt;&gt;&gt;::{{closure}}&gt;,&amp;str&gt;&gt;&gt;,&amp;str&gt;&gt;&gt;&gt; (2 samples, 0.06%)</title><rect x="52.0960%" y="741" width="0.0578%" height="15" fill="rgb(245,15,52)" fg:x="1802" fg:w="2"/><text x="52.3460%" y="751.50"></text></g><g><title>combine::parser::Parser::parse_committed_mode (374 samples, 10.81%)</title><rect x="41.6305%" y="917" width="10.8124%" height="15" fill="rgb(220,133,28)" fg:x="1440" fg:w="374"/><text x="41.8805%" y="927.50">combine::parser:..</text></g><g><title>combine::parser::ParseMode::parse_committed (374 samples, 10.81%)</title><rect x="41.6305%" y="901" width="10.8124%" height="15" fill="rgb(217,180,4)" fg:x="1440" fg:w="374"/><text x="41.8805%" y="911.50">combine::parser:..</text></g><g><title>combine::parser::Parser::parse_mode_impl (350 samples, 10.12%)</title><rect x="42.3244%" y="885" width="10.1185%" height="15" fill="rgb(251,24,1)" fg:x="1464" fg:w="350"/><text x="42.5744%" y="895.50">combine::parser..</text></g><g><title>&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;A,B,C,D,E,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_first (350 samples, 10.12%)</title><rect x="42.3244%" y="869" width="10.1185%" height="15" fill="rgb(212,185,49)" fg:x="1464" fg:w="350"/><text x="42.5744%" y="879.50">&lt;redis::parser:..</text></g><g><title>&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;A,B,C,D,E,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (350 samples, 10.12%)</title><rect x="42.3244%" y="853" width="10.1185%" height="15" fill="rgb(215,175,22)" fg:x="1464" fg:w="350"/><text x="42.5744%" y="863.50">&lt;redis::parser:..</text></g><g><title>combine::parser::Parser::parse_mode (342 samples, 9.89%)</title><rect x="42.5557%" y="837" width="9.8873%" height="15" fill="rgb(250,205,14)" fg:x="1472" fg:w="342"/><text x="42.8057%" y="847.50">combine::parse..</text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (342 samples, 9.89%)</title><rect x="42.5557%" y="821" width="9.8873%" height="15" fill="rgb(225,211,22)" fg:x="1472" fg:w="342"/><text x="42.8057%" y="831.50">&lt;combine::pars..</text></g><g><title>&lt;combine::parser::combinator::Map&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (341 samples, 9.86%)</title><rect x="42.5846%" y="805" width="9.8583%" height="15" fill="rgb(251,179,42)" fg:x="1473" fg:w="341"/><text x="42.8346%" y="815.50">&lt;combine::pars..</text></g><g><title>combine::parser::Parser::parse_mode (314 samples, 9.08%)</title><rect x="43.3651%" y="789" width="9.0778%" height="15" fill="rgb(208,216,51)" fg:x="1500" fg:w="314"/><text x="43.6151%" y="799.50">combine::pars..</text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (314 samples, 9.08%)</title><rect x="43.3651%" y="773" width="9.0778%" height="15" fill="rgb(235,36,11)" fg:x="1500" fg:w="314"/><text x="43.6151%" y="783.50">&lt;combine::par..</text></g><g><title>&lt;combine::parser::sequence::ThenPartial&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (314 samples, 9.08%)</title><rect x="43.3651%" y="757" width="9.0778%" height="15" fill="rgb(213,189,28)" fg:x="1500" fg:w="314"/><text x="43.6151%" y="767.50">&lt;combine::par..</text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (10 samples, 0.29%)</title><rect x="52.1538%" y="741" width="0.2891%" height="15" fill="rgb(227,203,42)" fg:x="1804" fg:w="10"/><text x="52.4038%" y="751.50"></text></g><g><title>combine::parser::Parser::right (8 samples, 0.23%)</title><rect x="52.2116%" y="725" width="0.2313%" height="15" fill="rgb(244,72,36)" fg:x="1806" fg:w="8"/><text x="52.4616%" y="735.50"></text></g><g><title>combine::parser::Parser::parse_committed_mode (7 samples, 0.20%)</title><rect x="52.7898%" y="869" width="0.2024%" height="15" fill="rgb(213,53,17)" fg:x="1826" fg:w="7"/><text x="53.0398%" y="879.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (7 samples, 0.20%)</title><rect x="52.7898%" y="853" width="0.2024%" height="15" fill="rgb(207,167,3)" fg:x="1826" fg:w="7"/><text x="53.0398%" y="863.50"></text></g><g><title>&lt;combine::parser::combinator::Either&lt;L,R&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (3 samples, 0.09%)</title><rect x="52.9055%" y="837" width="0.0867%" height="15" fill="rgb(216,98,30)" fg:x="1830" fg:w="3"/><text x="53.1555%" y="847.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.03%)</title><rect x="52.9633%" y="821" width="0.0289%" height="15" fill="rgb(236,123,15)" fg:x="1832" fg:w="1"/><text x="53.2133%" y="831.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (1 samples, 0.03%)</title><rect x="52.9633%" y="805" width="0.0289%" height="15" fill="rgb(248,81,50)" fg:x="1832" fg:w="1"/><text x="53.2133%" y="815.50"></text></g><g><title>combine::parser::Parser::parse_mode_impl (1 samples, 0.03%)</title><rect x="52.9633%" y="789" width="0.0289%" height="15" fill="rgb(214,120,4)" fg:x="1832" fg:w="1"/><text x="53.2133%" y="799.50"></text></g><g><title>combine::parser::Parser::parse_first (1 samples, 0.03%)</title><rect x="52.9633%" y="773" width="0.0289%" height="15" fill="rgb(208,179,34)" fg:x="1832" fg:w="1"/><text x="53.2133%" y="783.50"></text></g><g><title>combine::parser::Parser::parse_partial (1 samples, 0.03%)</title><rect x="52.9633%" y="757" width="0.0289%" height="15" fill="rgb(227,140,7)" fg:x="1832" fg:w="1"/><text x="53.2133%" y="767.50"></text></g><g><title>&lt;combine::parser::token::Value&lt;Input,T&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_lazy (1 samples, 0.03%)</title><rect x="52.9633%" y="741" width="0.0289%" height="15" fill="rgb(214,22,6)" fg:x="1832" fg:w="1"/><text x="53.2133%" y="751.50"></text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.06%)</title><rect x="52.9922%" y="869" width="0.0578%" height="15" fill="rgb(207,137,27)" fg:x="1833" fg:w="2"/><text x="53.2422%" y="879.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (2 samples, 0.06%)</title><rect x="52.9922%" y="853" width="0.0578%" height="15" fill="rgb(210,8,46)" fg:x="1833" fg:w="2"/><text x="53.2422%" y="863.50"></text></g><g><title>combine::parser::Parser::parse_mode_impl (2 samples, 0.06%)</title><rect x="52.9922%" y="837" width="0.0578%" height="15" fill="rgb(240,16,54)" fg:x="1833" fg:w="2"/><text x="53.2422%" y="847.50"></text></g><g><title>combine::parser::Parser::parse_first (2 samples, 0.06%)</title><rect x="52.9922%" y="821" width="0.0578%" height="15" fill="rgb(211,209,29)" fg:x="1833" fg:w="2"/><text x="53.2422%" y="831.50"></text></g><g><title>combine::parser::Parser::parse_partial (2 samples, 0.06%)</title><rect x="52.9922%" y="805" width="0.0578%" height="15" fill="rgb(226,228,24)" fg:x="1833" fg:w="2"/><text x="53.2422%" y="815.50"></text></g><g><title>&lt;combine::parser::token::Any&lt;Input&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_lazy (2 samples, 0.06%)</title><rect x="52.9922%" y="789" width="0.0578%" height="15" fill="rgb(222,84,9)" fg:x="1833" fg:w="2"/><text x="53.2422%" y="799.50"></text></g><g><title>combine::stream::uncons (2 samples, 0.06%)</title><rect x="52.9922%" y="773" width="0.0578%" height="15" fill="rgb(234,203,30)" fg:x="1833" fg:w="2"/><text x="53.2422%" y="783.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::StreamOnce&gt;::uncons (2 samples, 0.06%)</title><rect x="52.9922%" y="757" width="0.0578%" height="15" fill="rgb(238,109,14)" fg:x="1833" fg:w="2"/><text x="53.2422%" y="767.50"></text></g><g><title>&lt;combine::stream::MaybePartialStream&lt;S&gt; as combine::stream::StreamOnce&gt;::uncons (2 samples, 0.06%)</title><rect x="52.9922%" y="741" width="0.0578%" height="15" fill="rgb(233,206,34)" fg:x="1833" fg:w="2"/><text x="53.2422%" y="751.50"></text></g><g><title>&lt;&amp;[T] as combine::stream::StreamOnce&gt;::uncons (2 samples, 0.06%)</title><rect x="52.9922%" y="725" width="0.0578%" height="15" fill="rgb(220,167,47)" fg:x="1833" fg:w="2"/><text x="53.2422%" y="735.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (1 samples, 0.03%)</title><rect x="53.0211%" y="709" width="0.0289%" height="15" fill="rgb(238,105,10)" fg:x="1834" fg:w="1"/><text x="53.2711%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.03%)</title><rect x="53.0500%" y="869" width="0.0289%" height="15" fill="rgb(213,227,17)" fg:x="1835" fg:w="1"/><text x="53.3000%" y="879.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="53.0500%" y="853" width="0.0289%" height="15" fill="rgb(217,132,38)" fg:x="1835" fg:w="1"/><text x="53.3000%" y="863.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="53.0500%" y="837" width="0.0289%" height="15" fill="rgb(242,146,4)" fg:x="1835" fg:w="1"/><text x="53.3000%" y="847.50"></text></g><g><title>combine::parser::Parser::parse_mode (23 samples, 0.66%)</title><rect x="52.4429%" y="917" width="0.6649%" height="15" fill="rgb(212,61,9)" fg:x="1814" fg:w="23"/><text x="52.6929%" y="927.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (23 samples, 0.66%)</title><rect x="52.4429%" y="901" width="0.6649%" height="15" fill="rgb(247,126,22)" fg:x="1814" fg:w="23"/><text x="52.6929%" y="911.50"></text></g><g><title>&lt;combine::parser::sequence::ThenPartial&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (23 samples, 0.66%)</title><rect x="52.4429%" y="885" width="0.6649%" height="15" fill="rgb(220,196,2)" fg:x="1814" fg:w="23"/><text x="52.6929%" y="895.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}} (1 samples, 0.03%)</title><rect x="53.0789%" y="869" width="0.0289%" height="15" fill="rgb(208,46,4)" fg:x="1836" fg:w="1"/><text x="53.3289%" y="879.50"></text></g><g><title>combine::parser::Parser::right (1 samples, 0.03%)</title><rect x="53.0789%" y="853" width="0.0289%" height="15" fill="rgb(252,104,46)" fg:x="1836" fg:w="1"/><text x="53.3289%" y="863.50"></text></g><g><title>combine::parser::Parser::parse_mode (454 samples, 13.13%)</title><rect x="40.2428%" y="965" width="13.1252%" height="15" fill="rgb(237,152,48)" fg:x="1392" fg:w="454"/><text x="40.4928%" y="975.50">combine::parser::Par..</text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (454 samples, 13.13%)</title><rect x="40.2428%" y="949" width="13.1252%" height="15" fill="rgb(221,59,37)" fg:x="1392" fg:w="454"/><text x="40.4928%" y="959.50">&lt;combine::parser::Fi..</text></g><g><title>&lt;combine::parser::sequence::ThenPartial&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (449 samples, 12.98%)</title><rect x="40.3874%" y="933" width="12.9806%" height="15" fill="rgb(209,202,51)" fg:x="1397" fg:w="449"/><text x="40.6374%" y="943.50">&lt;combine::parser::se..</text></g><g><title>redis::parser::value::{{closure}}::{{closure}} (9 samples, 0.26%)</title><rect x="53.1078%" y="917" width="0.2602%" height="15" fill="rgb(228,81,30)" fg:x="1837" fg:w="9"/><text x="53.3578%" y="927.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (508 samples, 14.69%)</title><rect x="38.7106%" y="1205" width="14.6863%" height="15" fill="rgb(227,42,39)" fg:x="1339" fg:w="508"/><text x="38.9606%" y="1215.50">&lt;core::iter::adapters:..</text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (506 samples, 14.63%)</title><rect x="38.7684%" y="1189" width="14.6285%" height="15" fill="rgb(221,26,2)" fg:x="1341" fg:w="506"/><text x="39.0184%" y="1199.50">&lt;&amp;mut I as core::iter:..</text></g><g><title>&lt;combine::parser::repeat::Iter&lt;Input,P,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (506 samples, 14.63%)</title><rect x="38.7684%" y="1173" width="14.6285%" height="15" fill="rgb(254,61,31)" fg:x="1341" fg:w="506"/><text x="39.0184%" y="1183.50">&lt;combine::parser::repe..</text></g><g><title>combine::parser::Parser::parse_mode (501 samples, 14.48%)</title><rect x="38.9130%" y="1157" width="14.4840%" height="15" fill="rgb(222,173,38)" fg:x="1346" fg:w="501"/><text x="39.1630%" y="1167.50">combine::parser::Parse..</text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (501 samples, 14.48%)</title><rect x="38.9130%" y="1141" width="14.4840%" height="15" fill="rgb(218,50,12)" fg:x="1346" fg:w="501"/><text x="39.1630%" y="1151.50">&lt;combine::parser::Firs..</text></g><g><title>combine::parser::Parser::parse_mode_impl (501 samples, 14.48%)</title><rect x="38.9130%" y="1125" width="14.4840%" height="15" fill="rgb(223,88,40)" fg:x="1346" fg:w="501"/><text x="39.1630%" y="1135.50">combine::parser::Parse..</text></g><g><title>&lt;&amp;mut P as combine::parser::Parser&lt;Input&gt;&gt;::parse_first (501 samples, 14.48%)</title><rect x="38.9130%" y="1109" width="14.4840%" height="15" fill="rgb(237,54,19)" fg:x="1346" fg:w="501"/><text x="39.1630%" y="1119.50">&lt;&amp;mut P as combine::pa..</text></g><g><title>&lt;combine::parser::combinator::Opaque&lt;F,Input,O,S&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_first (501 samples, 14.48%)</title><rect x="38.9130%" y="1093" width="14.4840%" height="15" fill="rgb(251,129,25)" fg:x="1346" fg:w="501"/><text x="39.1630%" y="1103.50">&lt;combine::parser::comb..</text></g><g><title>combine::parser::Parser::parse_mode (501 samples, 14.48%)</title><rect x="38.9130%" y="1077" width="14.4840%" height="15" fill="rgb(238,97,19)" fg:x="1346" fg:w="501"/><text x="39.1630%" y="1087.50">combine::parser::Parse..</text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (501 samples, 14.48%)</title><rect x="38.9130%" y="1061" width="14.4840%" height="15" fill="rgb(240,169,18)" fg:x="1346" fg:w="501"/><text x="39.1630%" y="1071.50">&lt;combine::parser::Firs..</text></g><g><title>&lt;combine::parser::combinator::Opaque&lt;F,Input,O,S&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (501 samples, 14.48%)</title><rect x="38.9130%" y="1045" width="14.4840%" height="15" fill="rgb(230,187,49)" fg:x="1346" fg:w="501"/><text x="39.1630%" y="1055.50">&lt;combine::parser::comb..</text></g><g><title>redis::parser::value::{{closure}} (488 samples, 14.11%)</title><rect x="39.2888%" y="1029" width="14.1081%" height="15" fill="rgb(209,44,26)" fg:x="1359" fg:w="488"/><text x="39.5388%" y="1039.50">redis::parser::value:..</text></g><g><title>&lt;combine::parser::combinator::Opaque&lt;F,Input,O,S&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl::{{closure}} (488 samples, 14.11%)</title><rect x="39.2888%" y="1013" width="14.1081%" height="15" fill="rgb(244,0,6)" fg:x="1359" fg:w="488"/><text x="39.5388%" y="1023.50">&lt;combine::parser::com..</text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_first (480 samples, 13.88%)</title><rect x="39.5201%" y="997" width="13.8768%" height="15" fill="rgb(248,18,21)" fg:x="1367" fg:w="480"/><text x="39.7701%" y="1007.50">&lt;combine::parser::com..</text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (479 samples, 13.85%)</title><rect x="39.5490%" y="981" width="13.8479%" height="15" fill="rgb(245,180,19)" fg:x="1368" fg:w="479"/><text x="39.7990%" y="991.50">&lt;combine::parser::com..</text></g><g><title>core::option::Option&lt;T&gt;::is_none (1 samples, 0.03%)</title><rect x="53.3680%" y="965" width="0.0289%" height="15" fill="rgb(252,118,36)" fg:x="1846" fg:w="1"/><text x="53.6180%" y="975.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.03%)</title><rect x="53.3680%" y="949" width="0.0289%" height="15" fill="rgb(210,224,19)" fg:x="1846" fg:w="1"/><text x="53.6180%" y="959.50"></text></g><g><title>&lt;combine::parser::repeat::SuggestSizeHint&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (524 samples, 15.15%)</title><rect x="38.7106%" y="1237" width="15.1489%" height="15" fill="rgb(218,30,24)" fg:x="1339" fg:w="524"/><text x="38.9606%" y="1247.50">&lt;combine::parser::repea..</text></g><g><title>&lt;core::iter::adapters::inspect::Inspect&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (524 samples, 15.15%)</title><rect x="38.7106%" y="1221" width="15.1489%" height="15" fill="rgb(219,75,50)" fg:x="1339" fg:w="524"/><text x="38.9606%" y="1231.50">&lt;core::iter::adapters::..</text></g><g><title>core::iter::adapters::inspect::Inspect&lt;I,F&gt;::do_inspect (16 samples, 0.46%)</title><rect x="53.3969%" y="1205" width="0.4626%" height="15" fill="rgb(234,72,50)" fg:x="1847" fg:w="16"/><text x="53.6469%" y="1215.50"></text></g><g><title>&lt;core::iter::adapters::scan::Scan&lt;I,St,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (535 samples, 15.47%)</title><rect x="38.7106%" y="1253" width="15.4669%" height="15" fill="rgb(219,100,48)" fg:x="1339" fg:w="535"/><text x="38.9606%" y="1263.50">&lt;core::iter::adapters::s..</text></g><g><title>&lt;redis::parser::ResultExtend&lt;T,E&gt; as core::iter::traits::collect::Extend&lt;core::result::Result&lt;U,E&gt;&gt;&gt;::extend::{{closure}} (11 samples, 0.32%)</title><rect x="53.8595%" y="1237" width="0.3180%" height="15" fill="rgb(253,5,41)" fg:x="1863" fg:w="11"/><text x="54.1095%" y="1247.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="54.1775%" y="1253" width="0.0289%" height="15" fill="rgb(247,181,11)" fg:x="1874" fg:w="1"/><text x="54.4275%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="54.1775%" y="1237" width="0.0289%" height="15" fill="rgb(222,223,25)" fg:x="1874" fg:w="1"/><text x="54.4275%" y="1247.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.03%)</title><rect x="54.2353%" y="1189" width="0.0289%" height="15" fill="rgb(214,198,28)" fg:x="1876" fg:w="1"/><text x="54.4853%" y="1199.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="54.2931%" y="1173" width="0.0289%" height="15" fill="rgb(230,46,43)" fg:x="1878" fg:w="1"/><text x="54.5431%" y="1183.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="54.2931%" y="1157" width="0.0289%" height="15" fill="rgb(233,65,53)" fg:x="1878" fg:w="1"/><text x="54.5431%" y="1167.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="54.3221%" y="1173" width="0.0289%" height="15" fill="rgb(221,121,27)" fg:x="1879" fg:w="1"/><text x="54.5721%" y="1183.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.20%)</title><rect x="54.2642%" y="1189" width="0.2024%" height="15" fill="rgb(247,70,47)" fg:x="1877" fg:w="7"/><text x="54.5142%" y="1199.50"></text></g><g><title>malloc (4 samples, 0.12%)</title><rect x="54.3510%" y="1173" width="0.1156%" height="15" fill="rgb(228,85,35)" fg:x="1880" fg:w="4"/><text x="54.6010%" y="1183.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (10 samples, 0.29%)</title><rect x="54.2064%" y="1253" width="0.2891%" height="15" fill="rgb(209,50,18)" fg:x="1875" fg:w="10"/><text x="54.4564%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.29%)</title><rect x="54.2064%" y="1237" width="0.2891%" height="15" fill="rgb(250,19,35)" fg:x="1875" fg:w="10"/><text x="54.4564%" y="1247.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.26%)</title><rect x="54.2353%" y="1221" width="0.2602%" height="15" fill="rgb(253,107,29)" fg:x="1876" fg:w="9"/><text x="54.4853%" y="1231.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 0.26%)</title><rect x="54.2353%" y="1205" width="0.2602%" height="15" fill="rgb(252,179,29)" fg:x="1876" fg:w="9"/><text x="54.4853%" y="1215.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.03%)</title><rect x="54.4666%" y="1189" width="0.0289%" height="15" fill="rgb(238,194,6)" fg:x="1884" fg:w="1"/><text x="54.7166%" y="1199.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.03%)</title><rect x="54.4666%" y="1173" width="0.0289%" height="15" fill="rgb(238,164,29)" fg:x="1884" fg:w="1"/><text x="54.7166%" y="1183.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="54.4955%" y="1253" width="0.0289%" height="15" fill="rgb(224,25,9)" fg:x="1885" fg:w="1"/><text x="54.7455%" y="1263.50"></text></g><g><title>&lt;redis::parser::ResultExtend&lt;T,E&gt; as core::iter::traits::collect::Extend&lt;core::result::Result&lt;U,E&gt;&gt;&gt;::extend (558 samples, 16.13%)</title><rect x="38.4215%" y="1317" width="16.1318%" height="15" fill="rgb(244,153,23)" fg:x="1329" fg:w="558"/><text x="38.6715%" y="1327.50">&lt;redis::parser::ResultExt..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (550 samples, 15.90%)</title><rect x="38.6528%" y="1301" width="15.9005%" height="15" fill="rgb(212,203,14)" fg:x="1337" fg:w="550"/><text x="38.9028%" y="1311.50">&lt;alloc::vec::Vec&lt;T,A&gt; as..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (550 samples, 15.90%)</title><rect x="38.6528%" y="1285" width="15.9005%" height="15" fill="rgb(220,164,20)" fg:x="1337" fg:w="550"/><text x="38.9028%" y="1295.50">&lt;alloc::vec::Vec&lt;T,A&gt; as..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (550 samples, 15.90%)</title><rect x="38.6528%" y="1269" width="15.9005%" height="15" fill="rgb(222,203,48)" fg:x="1337" fg:w="550"/><text x="38.9028%" y="1279.50">alloc::vec::Vec&lt;T,A&gt;::ex..</text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="54.5244%" y="1253" width="0.0289%" height="15" fill="rgb(215,159,22)" fg:x="1886" fg:w="1"/><text x="54.7744%" y="1263.50"></text></g><g><title>combine::parser::Parser::partial_iter (3 samples, 0.09%)</title><rect x="54.5533%" y="1317" width="0.0867%" height="15" fill="rgb(216,183,47)" fg:x="1887" fg:w="3"/><text x="54.8033%" y="1327.50"></text></g><g><title>combine::parser::repeat::Iter&lt;Input,P,S,M&gt;::new (3 samples, 0.09%)</title><rect x="54.5533%" y="1301" width="0.0867%" height="15" fill="rgb(229,195,25)" fg:x="1887" fg:w="3"/><text x="54.8033%" y="1311.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="55.3917%" y="1269" width="0.0289%" height="15" fill="rgb(224,132,51)" fg:x="1916" fg:w="1"/><text x="55.6417%" y="1279.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="55.4496%" y="1253" width="0.0289%" height="15" fill="rgb(240,63,7)" fg:x="1918" fg:w="1"/><text x="55.6996%" y="1263.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (4 samples, 0.12%)</title><rect x="55.4206%" y="1269" width="0.1156%" height="15" fill="rgb(249,182,41)" fg:x="1917" fg:w="4"/><text x="55.6706%" y="1279.50"></text></g><g><title>combine::stream::easy::Errors&lt;T,R,P&gt;::add_error::{{closure}} (2 samples, 0.06%)</title><rect x="55.4785%" y="1253" width="0.0578%" height="15" fill="rgb(243,47,26)" fg:x="1919" fg:w="2"/><text x="55.7285%" y="1263.50"></text></g><g><title>core::cmp::PartialEq::ne (2 samples, 0.06%)</title><rect x="55.4785%" y="1237" width="0.0578%" height="15" fill="rgb(233,48,2)" fg:x="1919" fg:w="2"/><text x="55.7285%" y="1247.50"></text></g><g><title>&lt;combine::stream::easy::Error&lt;T,R&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.06%)</title><rect x="55.4785%" y="1221" width="0.0578%" height="15" fill="rgb(244,165,34)" fg:x="1919" fg:w="2"/><text x="55.7285%" y="1231.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="55.5363%" y="1221" width="0.0289%" height="15" fill="rgb(207,89,7)" fg:x="1921" fg:w="1"/><text x="55.7863%" y="1231.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.06%)</title><rect x="55.5652%" y="1221" width="0.0578%" height="15" fill="rgb(244,117,36)" fg:x="1922" fg:w="2"/><text x="55.8152%" y="1231.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.03%)</title><rect x="55.6230%" y="1221" width="0.0289%" height="15" fill="rgb(226,144,34)" fg:x="1924" fg:w="1"/><text x="55.8730%" y="1231.50"></text></g><g><title>__rust_realloc (1 samples, 0.03%)</title><rect x="55.6808%" y="1157" width="0.0289%" height="15" fill="rgb(213,23,19)" fg:x="1926" fg:w="1"/><text x="55.9308%" y="1167.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (63 samples, 1.82%)</title><rect x="55.6808%" y="1205" width="1.8213%" height="15" fill="rgb(217,75,12)" fg:x="1926" fg:w="63"/><text x="55.9308%" y="1215.50">&lt;..</text></g><g><title>alloc::alloc::Global::grow_impl (63 samples, 1.82%)</title><rect x="55.6808%" y="1189" width="1.8213%" height="15" fill="rgb(224,159,17)" fg:x="1926" fg:w="63"/><text x="55.9308%" y="1199.50">a..</text></g><g><title>alloc::alloc::realloc (63 samples, 1.82%)</title><rect x="55.6808%" y="1173" width="1.8213%" height="15" fill="rgb(217,118,1)" fg:x="1926" fg:w="63"/><text x="55.9308%" y="1183.50">a..</text></g><g><title>realloc (62 samples, 1.79%)</title><rect x="55.7097%" y="1157" width="1.7924%" height="15" fill="rgb(232,180,48)" fg:x="1927" fg:w="62"/><text x="55.9597%" y="1167.50">r..</text></g><g><title>[libc.so.6] (55 samples, 1.59%)</title><rect x="55.9121%" y="1141" width="1.5901%" height="15" fill="rgb(230,27,33)" fg:x="1934" fg:w="55"/><text x="56.1621%" y="1151.50"></text></g><g><title>[libc.so.6] (48 samples, 1.39%)</title><rect x="56.1145%" y="1125" width="1.3877%" height="15" fill="rgb(205,31,21)" fg:x="1941" fg:w="48"/><text x="56.3645%" y="1135.50"></text></g><g><title>[libc.so.6] (6 samples, 0.17%)</title><rect x="57.3287%" y="1109" width="0.1735%" height="15" fill="rgb(253,59,4)" fg:x="1983" fg:w="6"/><text x="57.5787%" y="1119.50"></text></g><g><title>alloc::raw_vec::finish_grow (66 samples, 1.91%)</title><rect x="55.6519%" y="1221" width="1.9081%" height="15" fill="rgb(224,201,9)" fg:x="1925" fg:w="66"/><text x="55.9019%" y="1231.50">a..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.06%)</title><rect x="57.5022%" y="1205" width="0.0578%" height="15" fill="rgb(229,206,30)" fg:x="1989" fg:w="2"/><text x="57.7522%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (71 samples, 2.05%)</title><rect x="55.5363%" y="1253" width="2.0526%" height="15" fill="rgb(212,67,47)" fg:x="1921" fg:w="71"/><text x="55.7863%" y="1263.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (71 samples, 2.05%)</title><rect x="55.5363%" y="1237" width="2.0526%" height="15" fill="rgb(211,96,50)" fg:x="1921" fg:w="71"/><text x="55.7863%" y="1247.50">a..</text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.03%)</title><rect x="57.5600%" y="1221" width="0.0289%" height="15" fill="rgb(252,114,18)" fg:x="1991" fg:w="1"/><text x="57.8100%" y="1231.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.03%)</title><rect x="57.5600%" y="1205" width="0.0289%" height="15" fill="rgb(223,58,37)" fg:x="1991" fg:w="1"/><text x="57.8100%" y="1215.50"></text></g><g><title>combine::parser::repeat::Iter&lt;Input,P,S,M&gt;::fail (105 samples, 3.04%)</title><rect x="54.6401%" y="1317" width="3.0356%" height="15" fill="rgb(237,70,4)" fg:x="1890" fg:w="105"/><text x="54.8901%" y="1327.50">com..</text></g><g><title>&lt;combine::stream::easy::Errors&lt;Item,Range,Position&gt; as combine::error::ParseError&lt;Item,Range,Position&gt;&gt;::add (80 samples, 2.31%)</title><rect x="55.3628%" y="1301" width="2.3128%" height="15" fill="rgb(244,85,46)" fg:x="1915" fg:w="80"/><text x="55.6128%" y="1311.50">&lt;..</text></g><g><title>combine::stream::easy::Errors&lt;T,R,P&gt;::add_error (80 samples, 2.31%)</title><rect x="55.3628%" y="1285" width="2.3128%" height="15" fill="rgb(223,39,52)" fg:x="1915" fg:w="80"/><text x="55.6128%" y="1295.50">c..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (74 samples, 2.14%)</title><rect x="55.5363%" y="1269" width="2.1393%" height="15" fill="rgb(218,200,14)" fg:x="1921" fg:w="74"/><text x="55.7863%" y="1279.50">a..</text></g><g><title>core::ptr::write (3 samples, 0.09%)</title><rect x="57.5889%" y="1253" width="0.0867%" height="15" fill="rgb(208,171,16)" fg:x="1992" fg:w="3"/><text x="57.8389%" y="1263.50"></text></g><g><title>combine::parser::repeat::suggest_size_hint (1 samples, 0.03%)</title><rect x="57.6756%" y="1317" width="0.0289%" height="15" fill="rgb(234,200,18)" fg:x="1995" fg:w="1"/><text x="57.9256%" y="1327.50"></text></g><g><title>combine::parser::Parser::parse_committed_mode (729 samples, 21.08%)</title><rect x="36.6869%" y="1461" width="21.0755%" height="15" fill="rgb(228,45,11)" fg:x="1269" fg:w="729"/><text x="36.9369%" y="1471.50">combine::parser::Parser::parse_co..</text></g><g><title>combine::parser::ParseMode::parse_committed (728 samples, 21.05%)</title><rect x="36.7158%" y="1445" width="21.0465%" height="15" fill="rgb(237,182,11)" fg:x="1270" fg:w="728"/><text x="36.9658%" y="1455.50">combine::parser::ParseMode::parse..</text></g><g><title>&lt;combine::parser::combinator::Either&lt;L,R&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (726 samples, 20.99%)</title><rect x="36.7736%" y="1429" width="20.9887%" height="15" fill="rgb(241,175,49)" fg:x="1272" fg:w="726"/><text x="37.0236%" y="1439.50">&lt;combine::parser::combinator::Eit..</text></g><g><title>combine::parser::Parser::parse_mode (725 samples, 20.96%)</title><rect x="36.8025%" y="1413" width="20.9598%" height="15" fill="rgb(247,38,35)" fg:x="1273" fg:w="725"/><text x="37.0525%" y="1423.50">combine::parser::Parser::parse_mo..</text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (725 samples, 20.96%)</title><rect x="36.8025%" y="1397" width="20.9598%" height="15" fill="rgb(228,39,49)" fg:x="1273" fg:w="725"/><text x="37.0525%" y="1407.50">&lt;combine::parser::FirstMode as co..</text></g><g><title>&lt;combine::parser::combinator::Map&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (725 samples, 20.96%)</title><rect x="36.8025%" y="1381" width="20.9598%" height="15" fill="rgb(226,101,26)" fg:x="1273" fg:w="725"/><text x="37.0525%" y="1391.50">&lt;combine::parser::combinator::Map..</text></g><g><title>combine::parser::Parser::parse_mode (722 samples, 20.87%)</title><rect x="36.8893%" y="1365" width="20.8731%" height="15" fill="rgb(206,141,19)" fg:x="1276" fg:w="722"/><text x="37.1393%" y="1375.50">combine::parser::Parser::parse_mo..</text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (722 samples, 20.87%)</title><rect x="36.8893%" y="1349" width="20.8731%" height="15" fill="rgb(211,200,13)" fg:x="1276" fg:w="722"/><text x="37.1393%" y="1359.50">&lt;combine::parser::FirstMode as co..</text></g><g><title>&lt;combine::parser::repeat::CountMinMax&lt;F,P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (722 samples, 20.87%)</title><rect x="36.8893%" y="1333" width="20.8731%" height="15" fill="rgb(241,121,6)" fg:x="1276" fg:w="722"/><text x="37.1393%" y="1343.50">&lt;combine::parser::repeat::CountMi..</text></g><g><title>core::fmt::Arguments::new_v1 (2 samples, 0.06%)</title><rect x="57.7045%" y="1317" width="0.0578%" height="15" fill="rgb(234,221,29)" fg:x="1996" fg:w="2"/><text x="57.9545%" y="1327.50"></text></g><g><title>&lt;combine::parser::range::Take&lt;Input&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_lazy (1 samples, 0.03%)</title><rect x="58.0804%" y="1253" width="0.0289%" height="15" fill="rgb(229,136,5)" fg:x="2009" fg:w="1"/><text x="58.3304%" y="1263.50"></text></g><g><title>combine::stream::uncons_range (1 samples, 0.03%)</title><rect x="58.0804%" y="1237" width="0.0289%" height="15" fill="rgb(238,36,11)" fg:x="2009" fg:w="1"/><text x="58.3304%" y="1247.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::RangeStreamOnce&gt;::uncons_range (1 samples, 0.03%)</title><rect x="58.0804%" y="1221" width="0.0289%" height="15" fill="rgb(251,55,41)" fg:x="2009" fg:w="1"/><text x="58.3304%" y="1231.50"></text></g><g><title>&lt;combine::stream::MaybePartialStream&lt;S&gt; as combine::stream::RangeStreamOnce&gt;::uncons_range (1 samples, 0.03%)</title><rect x="58.0804%" y="1205" width="0.0289%" height="15" fill="rgb(242,34,40)" fg:x="2009" fg:w="1"/><text x="58.3304%" y="1215.50"></text></g><g><title>&lt;&amp;[T] as combine::stream::RangeStreamOnce&gt;::uncons_range (1 samples, 0.03%)</title><rect x="58.0804%" y="1189" width="0.0289%" height="15" fill="rgb(215,42,17)" fg:x="2009" fg:w="1"/><text x="58.3304%" y="1199.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::ResetStream&gt;::reset (1 samples, 0.03%)</title><rect x="58.1093%" y="1253" width="0.0289%" height="15" fill="rgb(207,44,46)" fg:x="2010" fg:w="1"/><text x="58.3593%" y="1263.50"></text></g><g><title>&lt;combine::stream::MaybePartialStream&lt;S&gt; as combine::stream::ResetStream&gt;::reset (1 samples, 0.03%)</title><rect x="58.1093%" y="1237" width="0.0289%" height="15" fill="rgb(211,206,28)" fg:x="2010" fg:w="1"/><text x="58.3593%" y="1247.50"></text></g><g><title>&lt;&amp;[T] as combine::stream::ResetStream&gt;::reset (1 samples, 0.03%)</title><rect x="58.1093%" y="1221" width="0.0289%" height="15" fill="rgb(237,167,16)" fg:x="2010" fg:w="1"/><text x="58.3593%" y="1231.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (2 samples, 0.06%)</title><rect x="58.3117%" y="853" width="0.0578%" height="15" fill="rgb(233,66,6)" fg:x="2017" fg:w="2"/><text x="58.5617%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.06%)</title><rect x="58.3117%" y="837" width="0.0578%" height="15" fill="rgb(246,123,29)" fg:x="2017" fg:w="2"/><text x="58.5617%" y="847.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (6 samples, 0.17%)</title><rect x="58.3695%" y="837" width="0.1735%" height="15" fill="rgb(209,62,40)" fg:x="2019" fg:w="6"/><text x="58.6195%" y="847.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (6 samples, 0.17%)</title><rect x="58.3695%" y="821" width="0.1735%" height="15" fill="rgb(218,4,25)" fg:x="2019" fg:w="6"/><text x="58.6195%" y="831.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (5 samples, 0.14%)</title><rect x="58.3984%" y="805" width="0.1446%" height="15" fill="rgb(253,91,49)" fg:x="2020" fg:w="5"/><text x="58.6484%" y="815.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (5 samples, 0.14%)</title><rect x="58.3984%" y="789" width="0.1446%" height="15" fill="rgb(228,155,29)" fg:x="2020" fg:w="5"/><text x="58.6484%" y="799.50"></text></g><g><title>memchr::vector::x86avx2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m256i&gt;::movemask (3 samples, 0.09%)</title><rect x="58.4562%" y="773" width="0.0867%" height="15" fill="rgb(243,57,37)" fg:x="2022" fg:w="3"/><text x="58.7062%" y="783.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (3 samples, 0.09%)</title><rect x="58.4562%" y="757" width="0.0867%" height="15" fill="rgb(244,167,17)" fg:x="2022" fg:w="3"/><text x="58.7062%" y="767.50"></text></g><g><title>&lt;combine::parser::byte::take_until_bytes&lt;Input&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl::{{closure}} (11 samples, 0.32%)</title><rect x="58.2538%" y="965" width="0.3180%" height="15" fill="rgb(207,181,38)" fg:x="2015" fg:w="11"/><text x="58.5038%" y="975.50"></text></g><g><title>combine::parser::byte::memslice (11 samples, 0.32%)</title><rect x="58.2538%" y="949" width="0.3180%" height="15" fill="rgb(211,8,23)" fg:x="2015" fg:w="11"/><text x="58.5038%" y="959.50"></text></g><g><title>&lt;memchr::memchr::Memchr as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.26%)</title><rect x="58.3117%" y="933" width="0.2602%" height="15" fill="rgb(235,11,44)" fg:x="2017" fg:w="9"/><text x="58.5617%" y="943.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (9 samples, 0.26%)</title><rect x="58.3117%" y="917" width="0.2602%" height="15" fill="rgb(248,18,52)" fg:x="2017" fg:w="9"/><text x="58.5617%" y="927.50"></text></g><g><title>&lt;memchr::memchr::Memchr as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (9 samples, 0.26%)</title><rect x="58.3117%" y="901" width="0.2602%" height="15" fill="rgb(208,4,7)" fg:x="2017" fg:w="9"/><text x="58.5617%" y="911.50"></text></g><g><title>memchr::memchr::memchr_raw (9 samples, 0.26%)</title><rect x="58.3117%" y="885" width="0.2602%" height="15" fill="rgb(240,17,39)" fg:x="2017" fg:w="9"/><text x="58.5617%" y="895.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (9 samples, 0.26%)</title><rect x="58.3117%" y="869" width="0.2602%" height="15" fill="rgb(207,170,3)" fg:x="2017" fg:w="9"/><text x="58.5617%" y="879.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (7 samples, 0.20%)</title><rect x="58.3695%" y="853" width="0.2024%" height="15" fill="rgb(236,100,52)" fg:x="2019" fg:w="7"/><text x="58.6195%" y="863.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::new_unchecked (1 samples, 0.03%)</title><rect x="58.5429%" y="837" width="0.0289%" height="15" fill="rgb(246,78,51)" fg:x="2025" fg:w="1"/><text x="58.7929%" y="847.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::new (1 samples, 0.03%)</title><rect x="58.5429%" y="821" width="0.0289%" height="15" fill="rgb(211,17,15)" fg:x="2025" fg:w="1"/><text x="58.7929%" y="831.50"></text></g><g><title>memchr::vector::x86avx2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m256i&gt;::splat (1 samples, 0.03%)</title><rect x="58.5429%" y="805" width="0.0289%" height="15" fill="rgb(209,59,46)" fg:x="2025" fg:w="1"/><text x="58.7929%" y="815.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set1_epi8 (1 samples, 0.03%)</title><rect x="58.5429%" y="789" width="0.0289%" height="15" fill="rgb(210,92,25)" fg:x="2025" fg:w="1"/><text x="58.7929%" y="799.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_epi8 (1 samples, 0.03%)</title><rect x="58.5429%" y="773" width="0.0289%" height="15" fill="rgb(238,174,52)" fg:x="2025" fg:w="1"/><text x="58.7929%" y="783.50"></text></g><g><title>core::core_arch::simd::i8x32::new (1 samples, 0.03%)</title><rect x="58.5429%" y="757" width="0.0289%" height="15" fill="rgb(230,73,7)" fg:x="2025" fg:w="1"/><text x="58.7929%" y="767.50"></text></g><g><title>&lt;combine::parser::combinator::Ignore&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (13 samples, 0.38%)</title><rect x="58.2538%" y="1045" width="0.3758%" height="15" fill="rgb(243,124,40)" fg:x="2015" fg:w="13"/><text x="58.5038%" y="1055.50"></text></g><g><title>combine::parser::Parser::parse_mode (13 samples, 0.38%)</title><rect x="58.2538%" y="1029" width="0.3758%" height="15" fill="rgb(244,170,11)" fg:x="2015" fg:w="13"/><text x="58.5038%" y="1039.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (13 samples, 0.38%)</title><rect x="58.2538%" y="1013" width="0.3758%" height="15" fill="rgb(207,114,54)" fg:x="2015" fg:w="13"/><text x="58.5038%" y="1023.50"></text></g><g><title>&lt;combine::parser::byte::take_until_bytes&lt;Input&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (13 samples, 0.38%)</title><rect x="58.2538%" y="997" width="0.3758%" height="15" fill="rgb(205,42,20)" fg:x="2015" fg:w="13"/><text x="58.5038%" y="1007.50"></text></g><g><title>&lt;combine::parser::range::TakeFn&lt;F,Input&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (13 samples, 0.38%)</title><rect x="58.2538%" y="981" width="0.3758%" height="15" fill="rgb(230,30,28)" fg:x="2015" fg:w="13"/><text x="58.5038%" y="991.50"></text></g><g><title>combine::stream::uncons_range (2 samples, 0.06%)</title><rect x="58.5718%" y="965" width="0.0578%" height="15" fill="rgb(205,73,54)" fg:x="2026" fg:w="2"/><text x="58.8218%" y="975.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::RangeStreamOnce&gt;::uncons_range (1 samples, 0.03%)</title><rect x="58.6008%" y="949" width="0.0289%" height="15" fill="rgb(254,227,23)" fg:x="2027" fg:w="1"/><text x="58.8508%" y="959.50"></text></g><g><title>&lt;combine::stream::MaybePartialStream&lt;S&gt; as combine::stream::RangeStreamOnce&gt;::uncons_range (1 samples, 0.03%)</title><rect x="58.6008%" y="933" width="0.0289%" height="15" fill="rgb(228,202,34)" fg:x="2027" fg:w="1"/><text x="58.8508%" y="943.50"></text></g><g><title>&lt;&amp;[T] as combine::stream::RangeStreamOnce&gt;::uncons_range (1 samples, 0.03%)</title><rect x="58.6008%" y="917" width="0.0289%" height="15" fill="rgb(222,225,37)" fg:x="2027" fg:w="1"/><text x="58.8508%" y="927.50"></text></g><g><title>combine::parser::Parser::parse_mode (14 samples, 0.40%)</title><rect x="58.2538%" y="1077" width="0.4047%" height="15" fill="rgb(221,14,54)" fg:x="2015" fg:w="14"/><text x="58.5038%" y="1087.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (14 samples, 0.40%)</title><rect x="58.2538%" y="1061" width="0.4047%" height="15" fill="rgb(254,102,2)" fg:x="2015" fg:w="14"/><text x="58.5038%" y="1071.50"></text></g><g><title>&lt;combine::parser::combinator::Map&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (1 samples, 0.03%)</title><rect x="58.6297%" y="1045" width="0.0289%" height="15" fill="rgb(232,104,17)" fg:x="2028" fg:w="1"/><text x="58.8797%" y="1055.50"></text></g><g><title>combine::parser::Parser::parse_mode (1 samples, 0.03%)</title><rect x="58.6297%" y="1029" width="0.0289%" height="15" fill="rgb(250,220,14)" fg:x="2028" fg:w="1"/><text x="58.8797%" y="1039.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (1 samples, 0.03%)</title><rect x="58.6297%" y="1013" width="0.0289%" height="15" fill="rgb(241,158,9)" fg:x="2028" fg:w="1"/><text x="58.8797%" y="1023.50"></text></g><g><title>combine::parser::Parser::parse_mode_impl (1 samples, 0.03%)</title><rect x="58.6297%" y="997" width="0.0289%" height="15" fill="rgb(246,9,43)" fg:x="2028" fg:w="1"/><text x="58.8797%" y="1007.50"></text></g><g><title>combine::parser::Parser::parse_first (1 samples, 0.03%)</title><rect x="58.6297%" y="981" width="0.0289%" height="15" fill="rgb(206,73,33)" fg:x="2028" fg:w="1"/><text x="58.8797%" y="991.50"></text></g><g><title>combine::parser::Parser::parse_partial (1 samples, 0.03%)</title><rect x="58.6297%" y="965" width="0.0289%" height="15" fill="rgb(222,79,8)" fg:x="2028" fg:w="1"/><text x="58.8797%" y="975.50"></text></g><g><title>&lt;combine::parser::range::Take&lt;Input&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_lazy (1 samples, 0.03%)</title><rect x="58.6297%" y="949" width="0.0289%" height="15" fill="rgb(234,8,54)" fg:x="2028" fg:w="1"/><text x="58.8797%" y="959.50"></text></g><g><title>combine::stream::uncons_range (1 samples, 0.03%)</title><rect x="58.6297%" y="933" width="0.0289%" height="15" fill="rgb(209,134,38)" fg:x="2028" fg:w="1"/><text x="58.8797%" y="943.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::RangeStreamOnce&gt;::uncons_range (1 samples, 0.03%)</title><rect x="58.6297%" y="917" width="0.0289%" height="15" fill="rgb(230,127,29)" fg:x="2028" fg:w="1"/><text x="58.8797%" y="927.50"></text></g><g><title>&lt;combine::stream::MaybePartialStream&lt;S&gt; as combine::stream::RangeStreamOnce&gt;::uncons_range (1 samples, 0.03%)</title><rect x="58.6297%" y="901" width="0.0289%" height="15" fill="rgb(242,44,41)" fg:x="2028" fg:w="1"/><text x="58.8797%" y="911.50"></text></g><g><title>&lt;&amp;[T] as combine::stream::RangeStreamOnce&gt;::uncons_range (1 samples, 0.03%)</title><rect x="58.6297%" y="885" width="0.0289%" height="15" fill="rgb(222,56,43)" fg:x="2028" fg:w="1"/><text x="58.8797%" y="895.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.03%)</title><rect x="58.6297%" y="869" width="0.0289%" height="15" fill="rgb(238,39,47)" fg:x="2028" fg:w="1"/><text x="58.8797%" y="879.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.03%)</title><rect x="58.6297%" y="853" width="0.0289%" height="15" fill="rgb(226,79,43)" fg:x="2028" fg:w="1"/><text x="58.8797%" y="863.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.03%)</title><rect x="58.6297%" y="837" width="0.0289%" height="15" fill="rgb(242,105,53)" fg:x="2028" fg:w="1"/><text x="58.8797%" y="847.50"></text></g><g><title>combine::parser::Parser::parse_mode (26 samples, 0.75%)</title><rect x="57.9358%" y="1365" width="0.7517%" height="15" fill="rgb(251,132,46)" fg:x="2004" fg:w="26"/><text x="58.1858%" y="1375.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (26 samples, 0.75%)</title><rect x="57.9358%" y="1349" width="0.7517%" height="15" fill="rgb(231,77,14)" fg:x="2004" fg:w="26"/><text x="58.1858%" y="1359.50"></text></g><g><title>&lt;combine::parser::range::Recognize&lt;Input,P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (26 samples, 0.75%)</title><rect x="57.9358%" y="1333" width="0.7517%" height="15" fill="rgb(240,135,9)" fg:x="2004" fg:w="26"/><text x="58.1858%" y="1343.50"></text></g><g><title>combine::parser::Parser::parse_mode (24 samples, 0.69%)</title><rect x="57.9936%" y="1317" width="0.6938%" height="15" fill="rgb(248,109,14)" fg:x="2006" fg:w="24"/><text x="58.2436%" y="1327.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (24 samples, 0.69%)</title><rect x="57.9936%" y="1301" width="0.6938%" height="15" fill="rgb(227,146,52)" fg:x="2006" fg:w="24"/><text x="58.2436%" y="1311.50"></text></g><g><title>&lt;combine::parser::combinator::Map&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (24 samples, 0.69%)</title><rect x="57.9936%" y="1285" width="0.6938%" height="15" fill="rgb(232,54,3)" fg:x="2006" fg:w="24"/><text x="58.2436%" y="1295.50"></text></g><g><title>&lt;combine::parser::range::RecognizeWithValue&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (21 samples, 0.61%)</title><rect x="58.0804%" y="1269" width="0.6071%" height="15" fill="rgb(229,201,43)" fg:x="2009" fg:w="21"/><text x="58.3304%" y="1279.50"></text></g><g><title>combine::parser::Parser::parse_mode (19 samples, 0.55%)</title><rect x="58.1382%" y="1253" width="0.5493%" height="15" fill="rgb(252,161,33)" fg:x="2011" fg:w="19"/><text x="58.3882%" y="1263.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (19 samples, 0.55%)</title><rect x="58.1382%" y="1237" width="0.5493%" height="15" fill="rgb(226,146,40)" fg:x="2011" fg:w="19"/><text x="58.3882%" y="1247.50"></text></g><g><title>combine::parser::Parser::parse_mode_impl (19 samples, 0.55%)</title><rect x="58.1382%" y="1221" width="0.5493%" height="15" fill="rgb(219,47,25)" fg:x="2011" fg:w="19"/><text x="58.3882%" y="1231.50"></text></g><g><title>&lt;&amp;mut P as combine::parser::Parser&lt;Input&gt;&gt;::parse_first (19 samples, 0.55%)</title><rect x="58.1382%" y="1205" width="0.5493%" height="15" fill="rgb(250,135,13)" fg:x="2011" fg:w="19"/><text x="58.3882%" y="1215.50"></text></g><g><title>&lt;combine::parser::sequence::With&lt;P1,P2&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_first (19 samples, 0.55%)</title><rect x="58.1382%" y="1189" width="0.5493%" height="15" fill="rgb(219,229,18)" fg:x="2011" fg:w="19"/><text x="58.3882%" y="1199.50"></text></g><g><title>combine::parser::Parser::parse_mode (19 samples, 0.55%)</title><rect x="58.1382%" y="1173" width="0.5493%" height="15" fill="rgb(217,152,27)" fg:x="2011" fg:w="19"/><text x="58.3882%" y="1183.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (19 samples, 0.55%)</title><rect x="58.1382%" y="1157" width="0.5493%" height="15" fill="rgb(225,71,47)" fg:x="2011" fg:w="19"/><text x="58.3882%" y="1167.50"></text></g><g><title>&lt;combine::parser::sequence::With&lt;P1,P2&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (19 samples, 0.55%)</title><rect x="58.1382%" y="1141" width="0.5493%" height="15" fill="rgb(220,139,14)" fg:x="2011" fg:w="19"/><text x="58.3882%" y="1151.50"></text></g><g><title>combine::parser::Parser::parse_mode (19 samples, 0.55%)</title><rect x="58.1382%" y="1125" width="0.5493%" height="15" fill="rgb(247,54,32)" fg:x="2011" fg:w="19"/><text x="58.3882%" y="1135.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (19 samples, 0.55%)</title><rect x="58.1382%" y="1109" width="0.5493%" height="15" fill="rgb(252,131,39)" fg:x="2011" fg:w="19"/><text x="58.3882%" y="1119.50"></text></g><g><title>combine::parser::sequence::&lt;impl combine::parser::Parser&lt;Input&gt; for (A,B)&gt;::parse_mode_impl (19 samples, 0.55%)</title><rect x="58.1382%" y="1093" width="0.5493%" height="15" fill="rgb(210,108,39)" fg:x="2011" fg:w="19"/><text x="58.3882%" y="1103.50"></text></g><g><title>combine::parser::sequence::SequenceState&lt;T,U&gt;::unwrap_value (1 samples, 0.03%)</title><rect x="58.6586%" y="1077" width="0.0289%" height="15" fill="rgb(205,23,29)" fg:x="2029" fg:w="1"/><text x="58.9086%" y="1087.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.03%)</title><rect x="58.6586%" y="1061" width="0.0289%" height="15" fill="rgb(246,139,46)" fg:x="2029" fg:w="1"/><text x="58.9086%" y="1071.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="58.6586%" y="1045" width="0.0289%" height="15" fill="rgb(250,81,26)" fg:x="2029" fg:w="1"/><text x="58.9086%" y="1055.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="58.6586%" y="1029" width="0.0289%" height="15" fill="rgb(214,104,7)" fg:x="2029" fg:w="1"/><text x="58.9086%" y="1039.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (6 samples, 0.17%)</title><rect x="58.6875%" y="1349" width="0.1735%" height="15" fill="rgb(233,189,8)" fg:x="2030" fg:w="6"/><text x="58.9375%" y="1359.50"></text></g><g><title>combine::parser::Parser::parse_mode (39 samples, 1.13%)</title><rect x="57.8202%" y="1413" width="1.1275%" height="15" fill="rgb(228,141,17)" fg:x="2000" fg:w="39"/><text x="58.0702%" y="1423.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (39 samples, 1.13%)</title><rect x="57.8202%" y="1397" width="1.1275%" height="15" fill="rgb(247,157,1)" fg:x="2000" fg:w="39"/><text x="58.0702%" y="1407.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (39 samples, 1.13%)</title><rect x="57.8202%" y="1381" width="1.1275%" height="15" fill="rgb(249,225,5)" fg:x="2000" fg:w="39"/><text x="58.0702%" y="1391.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (9 samples, 0.26%)</title><rect x="58.6875%" y="1365" width="0.2602%" height="15" fill="rgb(242,55,13)" fg:x="2030" fg:w="9"/><text x="58.9375%" y="1375.50"></text></g><g><title>core::str::converts::from_utf8 (3 samples, 0.09%)</title><rect x="58.8609%" y="1349" width="0.0867%" height="15" fill="rgb(230,49,50)" fg:x="2036" fg:w="3"/><text x="59.1109%" y="1359.50"></text></g><g><title>core::str::validations::run_utf8_validation (3 samples, 0.09%)</title><rect x="58.8609%" y="1333" width="0.0867%" height="15" fill="rgb(241,111,38)" fg:x="2036" fg:w="3"/><text x="59.1109%" y="1343.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.03%)</title><rect x="58.9188%" y="1317" width="0.0289%" height="15" fill="rgb(252,155,4)" fg:x="2038" fg:w="1"/><text x="59.1688%" y="1327.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (3 samples, 0.09%)</title><rect x="58.9477%" y="1397" width="0.0867%" height="15" fill="rgb(212,69,32)" fg:x="2039" fg:w="3"/><text x="59.1977%" y="1407.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for i64&gt;::from_str (3 samples, 0.09%)</title><rect x="58.9477%" y="1381" width="0.0867%" height="15" fill="rgb(243,107,47)" fg:x="2039" fg:w="3"/><text x="59.1977%" y="1391.50"></text></g><g><title>core::num::from_str_radix (3 samples, 0.09%)</title><rect x="58.9477%" y="1365" width="0.0867%" height="15" fill="rgb(247,130,12)" fg:x="2039" fg:w="3"/><text x="59.1977%" y="1375.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="59.0055%" y="1349" width="0.0289%" height="15" fill="rgb(233,74,16)" fg:x="2041" fg:w="1"/><text x="59.2555%" y="1359.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (1 samples, 0.03%)</title><rect x="59.0344%" y="1317" width="0.0289%" height="15" fill="rgb(208,58,18)" fg:x="2042" fg:w="1"/><text x="59.2844%" y="1327.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim::{{closure}} (1 samples, 0.03%)</title><rect x="59.0344%" y="1301" width="0.0289%" height="15" fill="rgb(242,225,1)" fg:x="2042" fg:w="1"/><text x="59.2844%" y="1311.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (1 samples, 0.03%)</title><rect x="59.0344%" y="1285" width="0.0289%" height="15" fill="rgb(249,39,40)" fg:x="2042" fg:w="1"/><text x="59.2844%" y="1295.50"></text></g><g><title>combine::parser::Parser::parse_mode (46 samples, 1.33%)</title><rect x="57.7624%" y="1461" width="1.3299%" height="15" fill="rgb(207,72,44)" fg:x="1998" fg:w="46"/><text x="58.0124%" y="1471.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (46 samples, 1.33%)</title><rect x="57.7624%" y="1445" width="1.3299%" height="15" fill="rgb(215,193,12)" fg:x="1998" fg:w="46"/><text x="58.0124%" y="1455.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (46 samples, 1.33%)</title><rect x="57.7624%" y="1429" width="1.3299%" height="15" fill="rgb(248,41,39)" fg:x="1998" fg:w="46"/><text x="58.0124%" y="1439.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (5 samples, 0.14%)</title><rect x="58.9477%" y="1413" width="0.1446%" height="15" fill="rgb(253,85,4)" fg:x="2039" fg:w="5"/><text x="59.1977%" y="1423.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim (2 samples, 0.06%)</title><rect x="59.0344%" y="1397" width="0.0578%" height="15" fill="rgb(243,70,31)" fg:x="2042" fg:w="2"/><text x="59.2844%" y="1407.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (2 samples, 0.06%)</title><rect x="59.0344%" y="1381" width="0.0578%" height="15" fill="rgb(253,195,26)" fg:x="2042" fg:w="2"/><text x="59.2844%" y="1391.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_reject (2 samples, 0.06%)</title><rect x="59.0344%" y="1365" width="0.0578%" height="15" fill="rgb(243,42,11)" fg:x="2042" fg:w="2"/><text x="59.2844%" y="1375.50"></text></g><g><title>core::str::pattern::Searcher::next_reject (2 samples, 0.06%)</title><rect x="59.0344%" y="1349" width="0.0578%" height="15" fill="rgb(239,66,17)" fg:x="2042" fg:w="2"/><text x="59.2844%" y="1359.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (2 samples, 0.06%)</title><rect x="59.0344%" y="1333" width="0.0578%" height="15" fill="rgb(217,132,21)" fg:x="2042" fg:w="2"/><text x="59.2844%" y="1343.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="59.0633%" y="1317" width="0.0289%" height="15" fill="rgb(252,202,21)" fg:x="2043" fg:w="1"/><text x="59.3133%" y="1327.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="59.0633%" y="1301" width="0.0289%" height="15" fill="rgb(233,98,36)" fg:x="2043" fg:w="1"/><text x="59.3133%" y="1311.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.03%)</title><rect x="59.0633%" y="1285" width="0.0289%" height="15" fill="rgb(216,153,54)" fg:x="2043" fg:w="1"/><text x="59.3133%" y="1295.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="59.0633%" y="1269" width="0.0289%" height="15" fill="rgb(250,99,7)" fg:x="2043" fg:w="1"/><text x="59.3133%" y="1279.50"></text></g><g><title>&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;A,B,C,D,E,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_first (785 samples, 22.69%)</title><rect x="36.4267%" y="1541" width="22.6944%" height="15" fill="rgb(207,56,50)" fg:x="1260" fg:w="785"/><text x="36.6767%" y="1551.50">&lt;redis::parser::value::{{closure}}::..</text></g><g><title>&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;A,B,C,D,E,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (785 samples, 22.69%)</title><rect x="36.4267%" y="1525" width="22.6944%" height="15" fill="rgb(244,61,34)" fg:x="1260" fg:w="785"/><text x="36.6767%" y="1535.50">&lt;redis::parser::value::{{closure}}::..</text></g><g><title>combine::parser::Parser::parse_mode (784 samples, 22.67%)</title><rect x="36.4556%" y="1509" width="22.6655%" height="15" fill="rgb(241,50,38)" fg:x="1261" fg:w="784"/><text x="36.7056%" y="1519.50">combine::parser::Parser::parse_mode</text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (784 samples, 22.67%)</title><rect x="36.4556%" y="1493" width="22.6655%" height="15" fill="rgb(212,166,30)" fg:x="1261" fg:w="784"/><text x="36.7056%" y="1503.50">&lt;combine::parser::FirstMode as combi..</text></g><g><title>&lt;combine::parser::sequence::ThenPartial&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (783 samples, 22.64%)</title><rect x="36.4845%" y="1477" width="22.6366%" height="15" fill="rgb(249,127,32)" fg:x="1262" fg:w="783"/><text x="36.7345%" y="1487.50">&lt;combine::parser::sequence::ThenPart..</text></g><g><title>core::ptr::drop_in_place&lt;combine::parser::combinator::Either&lt;combine::parser::combinator::Map&lt;combine::parser::token::Value&lt;combine::stream::easy::Stream&lt;combine::stream::MaybePartialStream&lt;&amp;[u8]&gt;&gt;,redis::types::Value&gt;,core::result::Result&lt;redis::types::Value,redis::types::RedisError&gt;::Ok&gt;,combine::parser::combinator::Map&lt;combine::parser::repeat::CountMinMax&lt;redis::parser::ResultExtend&lt;alloc::vec::Vec&lt;redis::types::Value&gt;,redis::types::RedisError&gt;,combine::parser::combinator::Opaque&lt;redis::parser::value&lt;combine::stream::easy::Stream&lt;combine::stream::MaybePartialStream&lt;&amp;[u8]&gt;&gt;&gt;::{{closure}},combine::stream::easy::Stream&lt;combine::stream::MaybePartialStream&lt;&amp;[u8]&gt;&gt;,core::result::Result&lt;redis::types::Value,redis::types::RedisError&gt;,combine::parser::combinator::AnySendSyncPartialState&gt;&gt;,redis::parser::value&lt;combine::stream::easy::Stream&lt;combine::stream::MaybePartialStream&lt;&amp;[u8]&gt;&gt;&gt;::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="59.0922%" y="1461" width="0.0289%" height="15" fill="rgb(209,103,0)" fg:x="2044" fg:w="1"/><text x="59.3422%" y="1471.50"></text></g><g><title>&lt;dyn core::any::Any+core::marker::Send+core::marker::Sync&gt;::downcast_mut (1 samples, 0.03%)</title><rect x="61.2605%" y="965" width="0.0289%" height="15" fill="rgb(238,209,51)" fg:x="2119" fg:w="1"/><text x="61.5105%" y="975.50"></text></g><g><title>&lt;dyn core::any::Any&gt;::downcast_mut (1 samples, 0.03%)</title><rect x="61.2605%" y="949" width="0.0289%" height="15" fill="rgb(237,56,23)" fg:x="2119" fg:w="1"/><text x="61.5105%" y="959.50"></text></g><g><title>&lt;dyn core::any::Any&gt;::is (1 samples, 0.03%)</title><rect x="61.2605%" y="933" width="0.0289%" height="15" fill="rgb(215,153,46)" fg:x="2119" fg:w="1"/><text x="61.5105%" y="943.50"></text></g><g><title>&lt;T as core::any::Any&gt;::type_id (1 samples, 0.03%)</title><rect x="61.2605%" y="917" width="0.0289%" height="15" fill="rgb(224,49,31)" fg:x="2119" fg:w="1"/><text x="61.5105%" y="927.50"></text></g><g><title>combine::error::ParseResult&lt;T,E&gt;::map (10 samples, 0.29%)</title><rect x="62.7060%" y="645" width="0.2891%" height="15" fill="rgb(250,18,42)" fg:x="2169" fg:w="10"/><text x="62.9560%" y="655.50"></text></g><g><title>combine::error::ParseResult&lt;T,E&gt;::map (5 samples, 0.14%)</title><rect x="62.9951%" y="437" width="0.1446%" height="15" fill="rgb(215,176,39)" fg:x="2179" fg:w="5"/><text x="63.2451%" y="447.50"></text></g><g><title>&lt;combine::parser::combinator::Ignore&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (26 samples, 0.75%)</title><rect x="62.9951%" y="565" width="0.7517%" height="15" fill="rgb(223,77,29)" fg:x="2179" fg:w="26"/><text x="63.2451%" y="575.50"></text></g><g><title>combine::parser::Parser::parse_mode (26 samples, 0.75%)</title><rect x="62.9951%" y="549" width="0.7517%" height="15" fill="rgb(234,94,52)" fg:x="2179" fg:w="26"/><text x="63.2451%" y="559.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (26 samples, 0.75%)</title><rect x="62.9951%" y="533" width="0.7517%" height="15" fill="rgb(220,154,50)" fg:x="2179" fg:w="26"/><text x="63.2451%" y="543.50"></text></g><g><title>&lt;combine::parser::error::Expected&lt;P,S&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (26 samples, 0.75%)</title><rect x="62.9951%" y="517" width="0.7517%" height="15" fill="rgb(212,11,10)" fg:x="2179" fg:w="26"/><text x="63.2451%" y="527.50"></text></g><g><title>combine::parser::Parser::parse_mode (26 samples, 0.75%)</title><rect x="62.9951%" y="501" width="0.7517%" height="15" fill="rgb(205,166,19)" fg:x="2179" fg:w="26"/><text x="63.2451%" y="511.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (26 samples, 0.75%)</title><rect x="62.9951%" y="485" width="0.7517%" height="15" fill="rgb(244,198,16)" fg:x="2179" fg:w="26"/><text x="63.2451%" y="495.50"></text></g><g><title>&lt;combine::parser::combinator::NoPartial&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (26 samples, 0.75%)</title><rect x="62.9951%" y="469" width="0.7517%" height="15" fill="rgb(219,69,12)" fg:x="2179" fg:w="26"/><text x="63.2451%" y="479.50"></text></g><g><title>&lt;combine::parser::sequence::With&lt;P1,P2&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_lazy (26 samples, 0.75%)</title><rect x="62.9951%" y="453" width="0.7517%" height="15" fill="rgb(245,30,7)" fg:x="2179" fg:w="26"/><text x="63.2451%" y="463.50"></text></g><g><title>combine::parser::Parser::parse_lazy (21 samples, 0.61%)</title><rect x="63.1396%" y="437" width="0.6071%" height="15" fill="rgb(218,221,48)" fg:x="2184" fg:w="21"/><text x="63.3896%" y="447.50"></text></g><g><title>combine::parser::sequence::&lt;impl combine::parser::Parser&lt;Input&gt; for (A,B)&gt;::parse_first (2 samples, 0.06%)</title><rect x="63.6889%" y="421" width="0.0578%" height="15" fill="rgb(216,66,15)" fg:x="2203" fg:w="2"/><text x="63.9389%" y="431.50"></text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.06%)</title><rect x="63.6889%" y="405" width="0.0578%" height="15" fill="rgb(226,122,50)" fg:x="2203" fg:w="2"/><text x="63.9389%" y="415.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (2 samples, 0.06%)</title><rect x="63.6889%" y="389" width="0.0578%" height="15" fill="rgb(239,156,16)" fg:x="2203" fg:w="2"/><text x="63.9389%" y="399.50"></text></g><g><title>combine::parser::sequence::&lt;impl combine::parser::Parser&lt;Input&gt; for (A,B)&gt;::parse_mode_impl (2 samples, 0.06%)</title><rect x="63.6889%" y="373" width="0.0578%" height="15" fill="rgb(224,27,38)" fg:x="2203" fg:w="2"/><text x="63.9389%" y="383.50"></text></g><g><title>combine::parser::Parser::parse_mode (3 samples, 0.09%)</title><rect x="63.7467%" y="549" width="0.0867%" height="15" fill="rgb(224,39,27)" fg:x="2205" fg:w="3"/><text x="63.9967%" y="559.50"></text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (3 samples, 0.09%)</title><rect x="63.7467%" y="533" width="0.0867%" height="15" fill="rgb(215,92,29)" fg:x="2205" fg:w="3"/><text x="63.9967%" y="543.50"></text></g><g><title>combine::parser::Parser::parse_mode_impl (3 samples, 0.09%)</title><rect x="63.7467%" y="517" width="0.0867%" height="15" fill="rgb(207,159,16)" fg:x="2205" fg:w="3"/><text x="63.9967%" y="527.50"></text></g><g><title>combine::parser::Parser::parse_partial (3 samples, 0.09%)</title><rect x="63.7467%" y="501" width="0.0867%" height="15" fill="rgb(238,163,47)" fg:x="2205" fg:w="3"/><text x="63.9967%" y="511.50"></text></g><g><title>&lt;combine::parser::range::Take&lt;Input&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_lazy (3 samples, 0.09%)</title><rect x="63.7467%" y="485" width="0.0867%" height="15" fill="rgb(219,91,49)" fg:x="2205" fg:w="3"/><text x="63.9967%" y="495.50"></text></g><g><title>combine::stream::uncons_range (3 samples, 0.09%)</title><rect x="63.7467%" y="469" width="0.0867%" height="15" fill="rgb(227,167,31)" fg:x="2205" fg:w="3"/><text x="63.9967%" y="479.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::RangeStreamOnce&gt;::uncons_range (2 samples, 0.06%)</title><rect x="63.7757%" y="453" width="0.0578%" height="15" fill="rgb(234,80,54)" fg:x="2206" fg:w="2"/><text x="64.0257%" y="463.50"></text></g><g><title>&lt;combine::stream::MaybePartialStream&lt;S&gt; as combine::stream::RangeStreamOnce&gt;::uncons_range (2 samples, 0.06%)</title><rect x="63.7757%" y="437" width="0.0578%" height="15" fill="rgb(212,114,2)" fg:x="2206" fg:w="2"/><text x="64.0257%" y="447.50"></text></g><g><title>&lt;&amp;[T] as combine::stream::RangeStreamOnce&gt;::uncons_range (2 samples, 0.06%)</title><rect x="63.7757%" y="421" width="0.0578%" height="15" fill="rgb(234,50,24)" fg:x="2206" fg:w="2"/><text x="64.0257%" y="431.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="63.8624%" y="373" width="0.0289%" height="15" fill="rgb(221,68,8)" fg:x="2209" fg:w="1"/><text x="64.1124%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="63.8624%" y="357" width="0.0289%" height="15" fill="rgb(254,180,31)" fg:x="2209" fg:w="1"/><text x="64.1124%" y="367.50"></text></g><g><title>core::ptr::read_volatile (2 samples, 0.06%)</title><rect x="63.8913%" y="373" width="0.0578%" height="15" fill="rgb(247,130,50)" fg:x="2210" fg:w="2"/><text x="64.1413%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (20 samples, 0.58%)</title><rect x="63.8335%" y="469" width="0.5782%" height="15" fill="rgb(211,109,4)" fg:x="2208" fg:w="20"/><text x="64.0835%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (20 samples, 0.58%)</title><rect x="63.8335%" y="453" width="0.5782%" height="15" fill="rgb(238,50,21)" fg:x="2208" fg:w="20"/><text x="64.0835%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (20 samples, 0.58%)</title><rect x="63.8335%" y="437" width="0.5782%" height="15" fill="rgb(225,57,45)" fg:x="2208" fg:w="20"/><text x="64.0835%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (19 samples, 0.55%)</title><rect x="63.8624%" y="421" width="0.5493%" height="15" fill="rgb(209,196,50)" fg:x="2209" fg:w="19"/><text x="64.1124%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (19 samples, 0.55%)</title><rect x="63.8624%" y="405" width="0.5493%" height="15" fill="rgb(242,140,13)" fg:x="2209" fg:w="19"/><text x="64.1124%" y="415.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.55%)</title><rect x="63.8624%" y="389" width="0.5493%" height="15" fill="rgb(217,111,7)" fg:x="2209" fg:w="19"/><text x="64.1124%" y="399.50"></text></g><g><title>malloc (16 samples, 0.46%)</title><rect x="63.9491%" y="373" width="0.4626%" height="15" fill="rgb(253,193,51)" fg:x="2212" fg:w="16"/><text x="64.1991%" y="383.50"></text></g><g><title>combine::parser::Parser::parse_mode (53 samples, 1.53%)</title><rect x="62.9951%" y="597" width="1.5322%" height="15" fill="rgb(252,70,29)" fg:x="2179" fg:w="53"/><text x="63.2451%" y="607.50"></text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (53 samples, 1.53%)</title><rect x="62.9951%" y="581" width="1.5322%" height="15" fill="rgb(232,127,12)" fg:x="2179" fg:w="53"/><text x="63.2451%" y="591.50"></text></g><g><title>&lt;combine::parser::combinator::Map&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (27 samples, 0.78%)</title><rect x="63.7467%" y="565" width="0.7806%" height="15" fill="rgb(211,180,21)" fg:x="2205" fg:w="27"/><text x="63.9967%" y="575.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (24 samples, 0.69%)</title><rect x="63.8335%" y="549" width="0.6938%" height="15" fill="rgb(229,72,13)" fg:x="2208" fg:w="24"/><text x="64.0835%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (24 samples, 0.69%)</title><rect x="63.8335%" y="533" width="0.6938%" height="15" fill="rgb(240,211,49)" fg:x="2208" fg:w="24"/><text x="64.0835%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (24 samples, 0.69%)</title><rect x="63.8335%" y="517" width="0.6938%" height="15" fill="rgb(219,149,40)" fg:x="2208" fg:w="24"/><text x="64.0835%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (24 samples, 0.69%)</title><rect x="63.8335%" y="501" width="0.6938%" height="15" fill="rgb(210,127,46)" fg:x="2208" fg:w="24"/><text x="64.0835%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (24 samples, 0.69%)</title><rect x="63.8335%" y="485" width="0.6938%" height="15" fill="rgb(220,106,7)" fg:x="2208" fg:w="24"/><text x="64.0835%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.12%)</title><rect x="64.4117%" y="469" width="0.1156%" height="15" fill="rgb(249,31,22)" fg:x="2228" fg:w="4"/><text x="64.6617%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.12%)</title><rect x="64.4117%" y="453" width="0.1156%" height="15" fill="rgb(253,1,49)" fg:x="2228" fg:w="4"/><text x="64.6617%" y="463.50"></text></g><g><title>[libc.so.6] (2 samples, 0.06%)</title><rect x="64.4695%" y="437" width="0.0578%" height="15" fill="rgb(227,144,33)" fg:x="2230" fg:w="2"/><text x="64.7195%" y="447.50"></text></g><g><title>combine::parser::Parser::parse_mode (114 samples, 3.30%)</title><rect x="61.2894%" y="965" width="3.2958%" height="15" fill="rgb(249,163,44)" fg:x="2120" fg:w="114"/><text x="61.5394%" y="975.50">com..</text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (112 samples, 3.24%)</title><rect x="61.3472%" y="949" width="3.2379%" height="15" fill="rgb(234,15,39)" fg:x="2122" fg:w="112"/><text x="61.5972%" y="959.50">&lt;co..</text></g><g><title>&lt;combine::parser::sequence::ThenPartial&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (111 samples, 3.21%)</title><rect x="61.3761%" y="933" width="3.2090%" height="15" fill="rgb(207,66,16)" fg:x="2123" fg:w="111"/><text x="61.6261%" y="943.50">&lt;co..</text></g><g><title>combine::parser::Parser::parse_committed_mode (98 samples, 2.83%)</title><rect x="61.7520%" y="917" width="2.8332%" height="15" fill="rgb(233,112,24)" fg:x="2136" fg:w="98"/><text x="62.0020%" y="927.50">co..</text></g><g><title>combine::parser::ParseMode::parse_committed (98 samples, 2.83%)</title><rect x="61.7520%" y="901" width="2.8332%" height="15" fill="rgb(230,90,22)" fg:x="2136" fg:w="98"/><text x="62.0020%" y="911.50">co..</text></g><g><title>combine::parser::Parser::parse_mode_impl (93 samples, 2.69%)</title><rect x="61.8965%" y="885" width="2.6886%" height="15" fill="rgb(229,61,13)" fg:x="2141" fg:w="93"/><text x="62.1465%" y="895.50">co..</text></g><g><title>&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;A,B,C,D,E,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (93 samples, 2.69%)</title><rect x="61.8965%" y="869" width="2.6886%" height="15" fill="rgb(225,57,24)" fg:x="2141" fg:w="93"/><text x="62.1465%" y="879.50">&lt;r..</text></g><g><title>&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;A,B,C,D,E,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (93 samples, 2.69%)</title><rect x="61.8965%" y="853" width="2.6886%" height="15" fill="rgb(208,169,48)" fg:x="2141" fg:w="93"/><text x="62.1465%" y="863.50">&lt;r..</text></g><g><title>combine::parser::Parser::parse_mode (92 samples, 2.66%)</title><rect x="61.9254%" y="837" width="2.6597%" height="15" fill="rgb(244,218,51)" fg:x="2142" fg:w="92"/><text x="62.1754%" y="847.50">co..</text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (91 samples, 2.63%)</title><rect x="61.9543%" y="821" width="2.6308%" height="15" fill="rgb(214,148,10)" fg:x="2143" fg:w="91"/><text x="62.2043%" y="831.50">&lt;c..</text></g><g><title>&lt;combine::parser::combinator::Map&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (91 samples, 2.63%)</title><rect x="61.9543%" y="805" width="2.6308%" height="15" fill="rgb(225,174,27)" fg:x="2143" fg:w="91"/><text x="62.2043%" y="815.50">&lt;c..</text></g><g><title>combine::parser::Parser::parse_mode (86 samples, 2.49%)</title><rect x="62.0989%" y="789" width="2.4863%" height="15" fill="rgb(230,96,26)" fg:x="2148" fg:w="86"/><text x="62.3489%" y="799.50">co..</text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (86 samples, 2.49%)</title><rect x="62.0989%" y="773" width="2.4863%" height="15" fill="rgb(232,10,30)" fg:x="2148" fg:w="86"/><text x="62.3489%" y="783.50">&lt;c..</text></g><g><title>&lt;combine::parser::sequence::ThenPartial&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (86 samples, 2.49%)</title><rect x="62.0989%" y="757" width="2.4863%" height="15" fill="rgb(222,8,50)" fg:x="2148" fg:w="86"/><text x="62.3489%" y="767.50">&lt;c..</text></g><g><title>combine::parser::Parser::parse_committed_mode (77 samples, 2.23%)</title><rect x="62.3591%" y="741" width="2.2261%" height="15" fill="rgb(213,81,27)" fg:x="2157" fg:w="77"/><text x="62.6091%" y="751.50">c..</text></g><g><title>combine::parser::ParseMode::parse_committed (77 samples, 2.23%)</title><rect x="62.3591%" y="725" width="2.2261%" height="15" fill="rgb(245,50,10)" fg:x="2157" fg:w="77"/><text x="62.6091%" y="735.50">c..</text></g><g><title>&lt;combine::parser::combinator::Either&lt;L,R&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (65 samples, 1.88%)</title><rect x="62.7060%" y="709" width="1.8792%" height="15" fill="rgb(216,100,18)" fg:x="2169" fg:w="65"/><text x="62.9560%" y="719.50">&lt;..</text></g><g><title>combine::parser::Parser::parse_mode (65 samples, 1.88%)</title><rect x="62.7060%" y="693" width="1.8792%" height="15" fill="rgb(236,147,54)" fg:x="2169" fg:w="65"/><text x="62.9560%" y="703.50">c..</text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (65 samples, 1.88%)</title><rect x="62.7060%" y="677" width="1.8792%" height="15" fill="rgb(205,143,26)" fg:x="2169" fg:w="65"/><text x="62.9560%" y="687.50">&lt;..</text></g><g><title>&lt;combine::parser::sequence::Skip&lt;P1,P2&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (65 samples, 1.88%)</title><rect x="62.7060%" y="661" width="1.8792%" height="15" fill="rgb(236,26,9)" fg:x="2169" fg:w="65"/><text x="62.9560%" y="671.50">&lt;..</text></g><g><title>combine::parser::Parser::parse_mode (55 samples, 1.59%)</title><rect x="62.9951%" y="645" width="1.5901%" height="15" fill="rgb(221,165,53)" fg:x="2179" fg:w="55"/><text x="63.2451%" y="655.50"></text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (55 samples, 1.59%)</title><rect x="62.9951%" y="629" width="1.5901%" height="15" fill="rgb(214,110,17)" fg:x="2179" fg:w="55"/><text x="63.2451%" y="639.50"></text></g><g><title>combine::parser::sequence::&lt;impl combine::parser::Parser&lt;Input&gt; for (A,B)&gt;::parse_mode_impl (55 samples, 1.59%)</title><rect x="62.9951%" y="613" width="1.5901%" height="15" fill="rgb(237,197,12)" fg:x="2179" fg:w="55"/><text x="63.2451%" y="623.50"></text></g><g><title>combine::parser::sequence::SequenceState&lt;T,U&gt;::unwrap_value (2 samples, 0.06%)</title><rect x="64.5273%" y="597" width="0.0578%" height="15" fill="rgb(205,84,17)" fg:x="2232" fg:w="2"/><text x="64.7773%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (2 samples, 0.06%)</title><rect x="64.5273%" y="581" width="0.0578%" height="15" fill="rgb(237,18,45)" fg:x="2232" fg:w="2"/><text x="64.7773%" y="591.50"></text></g><g><title>core::mem::replace (2 samples, 0.06%)</title><rect x="64.5273%" y="565" width="0.0578%" height="15" fill="rgb(221,87,14)" fg:x="2232" fg:w="2"/><text x="64.7773%" y="575.50"></text></g><g><title>core::ptr::read (2 samples, 0.06%)</title><rect x="64.5273%" y="549" width="0.0578%" height="15" fill="rgb(238,186,15)" fg:x="2232" fg:w="2"/><text x="64.7773%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (136 samples, 3.93%)</title><rect x="60.6823%" y="1205" width="3.9318%" height="15" fill="rgb(208,115,11)" fg:x="2099" fg:w="136"/><text x="60.9323%" y="1215.50">&lt;cor..</text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (136 samples, 3.93%)</title><rect x="60.6823%" y="1189" width="3.9318%" height="15" fill="rgb(254,175,0)" fg:x="2099" fg:w="136"/><text x="60.9323%" y="1199.50">&lt;&amp;mu..</text></g><g><title>&lt;combine::parser::repeat::Iter&lt;Input,P,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (136 samples, 3.93%)</title><rect x="60.6823%" y="1173" width="3.9318%" height="15" fill="rgb(227,24,42)" fg:x="2099" fg:w="136"/><text x="60.9323%" y="1183.50">&lt;com..</text></g><g><title>combine::parser::Parser::parse_mode (131 samples, 3.79%)</title><rect x="60.8268%" y="1157" width="3.7872%" height="15" fill="rgb(223,211,37)" fg:x="2104" fg:w="131"/><text x="61.0768%" y="1167.50">comb..</text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (131 samples, 3.79%)</title><rect x="60.8268%" y="1141" width="3.7872%" height="15" fill="rgb(235,49,27)" fg:x="2104" fg:w="131"/><text x="61.0768%" y="1151.50">&lt;com..</text></g><g><title>combine::parser::Parser::parse_mode_impl (125 samples, 3.61%)</title><rect x="61.0003%" y="1125" width="3.6138%" height="15" fill="rgb(254,97,51)" fg:x="2110" fg:w="125"/><text x="61.2503%" y="1135.50">comb..</text></g><g><title>&lt;&amp;mut P as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (125 samples, 3.61%)</title><rect x="61.0003%" y="1109" width="3.6138%" height="15" fill="rgb(249,51,40)" fg:x="2110" fg:w="125"/><text x="61.2503%" y="1119.50">&lt;&amp;mu..</text></g><g><title>&lt;combine::parser::combinator::Opaque&lt;F,Input,O,S&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (125 samples, 3.61%)</title><rect x="61.0003%" y="1093" width="3.6138%" height="15" fill="rgb(210,128,45)" fg:x="2110" fg:w="125"/><text x="61.2503%" y="1103.50">&lt;com..</text></g><g><title>combine::parser::Parser::parse_mode (125 samples, 3.61%)</title><rect x="61.0003%" y="1077" width="3.6138%" height="15" fill="rgb(224,137,50)" fg:x="2110" fg:w="125"/><text x="61.2503%" y="1087.50">comb..</text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (125 samples, 3.61%)</title><rect x="61.0003%" y="1061" width="3.6138%" height="15" fill="rgb(242,15,9)" fg:x="2110" fg:w="125"/><text x="61.2503%" y="1071.50">&lt;com..</text></g><g><title>&lt;combine::parser::combinator::Opaque&lt;F,Input,O,S&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (125 samples, 3.61%)</title><rect x="61.0003%" y="1045" width="3.6138%" height="15" fill="rgb(233,187,41)" fg:x="2110" fg:w="125"/><text x="61.2503%" y="1055.50">&lt;com..</text></g><g><title>redis::parser::value::{{closure}} (124 samples, 3.58%)</title><rect x="61.0292%" y="1029" width="3.5849%" height="15" fill="rgb(227,2,29)" fg:x="2111" fg:w="124"/><text x="61.2792%" y="1039.50">redi..</text></g><g><title>&lt;combine::parser::combinator::Opaque&lt;F,Input,O,S&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl::{{closure}} (124 samples, 3.58%)</title><rect x="61.0292%" y="1013" width="3.5849%" height="15" fill="rgb(222,70,3)" fg:x="2111" fg:w="124"/><text x="61.2792%" y="1023.50">&lt;com..</text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (124 samples, 3.58%)</title><rect x="61.0292%" y="997" width="3.5849%" height="15" fill="rgb(213,11,42)" fg:x="2111" fg:w="124"/><text x="61.2792%" y="1007.50">&lt;com..</text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (124 samples, 3.58%)</title><rect x="61.0292%" y="981" width="3.5849%" height="15" fill="rgb(225,150,9)" fg:x="2111" fg:w="124"/><text x="61.2792%" y="991.50">&lt;com..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.03%)</title><rect x="64.5851%" y="965" width="0.0289%" height="15" fill="rgb(230,162,45)" fg:x="2234" fg:w="1"/><text x="64.8351%" y="975.50"></text></g><g><title>&lt;combine::parser::repeat::SuggestSizeHint&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (139 samples, 4.02%)</title><rect x="60.6823%" y="1237" width="4.0185%" height="15" fill="rgb(222,14,52)" fg:x="2099" fg:w="139"/><text x="60.9323%" y="1247.50">&lt;com..</text></g><g><title>&lt;core::iter::adapters::inspect::Inspect&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (139 samples, 4.02%)</title><rect x="60.6823%" y="1221" width="4.0185%" height="15" fill="rgb(254,198,14)" fg:x="2099" fg:w="139"/><text x="60.9323%" y="1231.50">&lt;cor..</text></g><g><title>core::iter::adapters::inspect::Inspect&lt;I,F&gt;::do_inspect (3 samples, 0.09%)</title><rect x="64.6141%" y="1205" width="0.0867%" height="15" fill="rgb(220,217,30)" fg:x="2235" fg:w="3"/><text x="64.8641%" y="1215.50"></text></g><g><title>&lt;core::iter::adapters::scan::Scan&lt;I,St,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (144 samples, 4.16%)</title><rect x="60.6823%" y="1253" width="4.1631%" height="15" fill="rgb(215,146,41)" fg:x="2099" fg:w="144"/><text x="60.9323%" y="1263.50">&lt;core..</text></g><g><title>&lt;redis::parser::ResultExtend&lt;T,E&gt; as core::iter::traits::collect::Extend&lt;core::result::Result&lt;U,E&gt;&gt;&gt;::extend::{{closure}} (5 samples, 0.14%)</title><rect x="64.7008%" y="1237" width="0.1446%" height="15" fill="rgb(217,27,36)" fg:x="2238" fg:w="5"/><text x="64.9508%" y="1247.50"></text></g><g><title>&lt;redis::parser::ResultExtend&lt;T,E&gt; as core::iter::traits::collect::Extend&lt;core::result::Result&lt;U,E&gt;&gt;&gt;::extend (165 samples, 4.77%)</title><rect x="60.1041%" y="1317" width="4.7702%" height="15" fill="rgb(219,218,39)" fg:x="2079" fg:w="165"/><text x="60.3541%" y="1327.50">&lt;redis..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (152 samples, 4.39%)</title><rect x="60.4799%" y="1301" width="4.3943%" height="15" fill="rgb(219,4,42)" fg:x="2092" fg:w="152"/><text x="60.7299%" y="1311.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (150 samples, 4.34%)</title><rect x="60.5377%" y="1285" width="4.3365%" height="15" fill="rgb(249,119,36)" fg:x="2094" fg:w="150"/><text x="60.7877%" y="1295.50">&lt;allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (150 samples, 4.34%)</title><rect x="60.5377%" y="1269" width="4.3365%" height="15" fill="rgb(209,23,33)" fg:x="2094" fg:w="150"/><text x="60.7877%" y="1279.50">alloc..</text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="64.8453%" y="1253" width="0.0289%" height="15" fill="rgb(211,10,0)" fg:x="2243" fg:w="1"/><text x="65.0953%" y="1263.50"></text></g><g><title>combine::error::ParseResult&lt;T,E&gt;::map (3 samples, 0.09%)</title><rect x="64.8742%" y="1317" width="0.0867%" height="15" fill="rgb(208,99,37)" fg:x="2244" fg:w="3"/><text x="65.1242%" y="1327.50"></text></g><g><title>combine::parser::Parser::partial_iter (4 samples, 0.12%)</title><rect x="64.9610%" y="1317" width="0.1156%" height="15" fill="rgb(213,132,31)" fg:x="2247" fg:w="4"/><text x="65.2110%" y="1327.50"></text></g><g><title>combine::parser::repeat::Iter&lt;Input,P,S,M&gt;::new (4 samples, 0.12%)</title><rect x="64.9610%" y="1301" width="0.1156%" height="15" fill="rgb(243,129,40)" fg:x="2247" fg:w="4"/><text x="65.2110%" y="1311.50"></text></g><g><title>combine::parser::repeat::Iter&lt;Input,P,S,M&gt;::into_result_fast (4 samples, 0.12%)</title><rect x="65.0766%" y="1317" width="0.1156%" height="15" fill="rgb(210,66,33)" fg:x="2251" fg:w="4"/><text x="65.3266%" y="1327.50"></text></g><g><title>core::mem::take (4 samples, 0.12%)</title><rect x="65.0766%" y="1301" width="0.1156%" height="15" fill="rgb(209,189,4)" fg:x="2251" fg:w="4"/><text x="65.3266%" y="1311.50"></text></g><g><title>core::mem::replace (4 samples, 0.12%)</title><rect x="65.0766%" y="1285" width="0.1156%" height="15" fill="rgb(214,107,37)" fg:x="2251" fg:w="4"/><text x="65.3266%" y="1295.50"></text></g><g><title>core::ptr::read (4 samples, 0.12%)</title><rect x="65.0766%" y="1269" width="0.1156%" height="15" fill="rgb(245,88,54)" fg:x="2251" fg:w="4"/><text x="65.3266%" y="1279.50"></text></g><g><title>combine::parser::repeat::suggest_size_hint (3 samples, 0.09%)</title><rect x="65.1923%" y="1317" width="0.0867%" height="15" fill="rgb(205,146,20)" fg:x="2255" fg:w="3"/><text x="65.4423%" y="1327.50"></text></g><g><title>core::cmp::min (1 samples, 0.03%)</title><rect x="65.2501%" y="1301" width="0.0289%" height="15" fill="rgb(220,161,25)" fg:x="2257" fg:w="1"/><text x="65.5001%" y="1311.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.03%)</title><rect x="65.2501%" y="1285" width="0.0289%" height="15" fill="rgb(215,152,15)" fg:x="2257" fg:w="1"/><text x="65.5001%" y="1295.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.03%)</title><rect x="65.2501%" y="1269" width="0.0289%" height="15" fill="rgb(233,192,44)" fg:x="2257" fg:w="1"/><text x="65.5001%" y="1279.50"></text></g><g><title>&lt;combine::parser::combinator::Either&lt;L,R&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (183 samples, 5.29%)</title><rect x="60.0173%" y="1429" width="5.2905%" height="15" fill="rgb(240,170,46)" fg:x="2076" fg:w="183"/><text x="60.2673%" y="1439.50">&lt;combi..</text></g><g><title>combine::parser::Parser::parse_mode (183 samples, 5.29%)</title><rect x="60.0173%" y="1413" width="5.2905%" height="15" fill="rgb(207,104,33)" fg:x="2076" fg:w="183"/><text x="60.2673%" y="1423.50">combin..</text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (183 samples, 5.29%)</title><rect x="60.0173%" y="1397" width="5.2905%" height="15" fill="rgb(219,21,39)" fg:x="2076" fg:w="183"/><text x="60.2673%" y="1407.50">&lt;combi..</text></g><g><title>&lt;combine::parser::combinator::Map&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (183 samples, 5.29%)</title><rect x="60.0173%" y="1381" width="5.2905%" height="15" fill="rgb(214,133,29)" fg:x="2076" fg:w="183"/><text x="60.2673%" y="1391.50">&lt;combi..</text></g><g><title>combine::parser::Parser::parse_mode (180 samples, 5.20%)</title><rect x="60.1041%" y="1365" width="5.2038%" height="15" fill="rgb(226,93,6)" fg:x="2079" fg:w="180"/><text x="60.3541%" y="1375.50">combin..</text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (180 samples, 5.20%)</title><rect x="60.1041%" y="1349" width="5.2038%" height="15" fill="rgb(252,222,34)" fg:x="2079" fg:w="180"/><text x="60.3541%" y="1359.50">&lt;combi..</text></g><g><title>&lt;combine::parser::repeat::CountMinMax&lt;F,P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (180 samples, 5.20%)</title><rect x="60.1041%" y="1333" width="5.2038%" height="15" fill="rgb(252,92,48)" fg:x="2079" fg:w="180"/><text x="60.3541%" y="1343.50">&lt;combi..</text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (1 samples, 0.03%)</title><rect x="65.2790%" y="1317" width="0.0289%" height="15" fill="rgb(245,223,24)" fg:x="2258" fg:w="1"/><text x="65.5290%" y="1327.50"></text></g><g><title>combine::parser::Parser::parse_committed_mode (195 samples, 5.64%)</title><rect x="59.6993%" y="1461" width="5.6375%" height="15" fill="rgb(205,176,3)" fg:x="2065" fg:w="195"/><text x="59.9493%" y="1471.50">combine..</text></g><g><title>combine::parser::ParseMode::parse_committed (195 samples, 5.64%)</title><rect x="59.6993%" y="1445" width="5.6375%" height="15" fill="rgb(235,151,15)" fg:x="2065" fg:w="195"/><text x="59.9493%" y="1455.50">combine..</text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::ResetStream&gt;::checkpoint (1 samples, 0.03%)</title><rect x="65.3079%" y="1429" width="0.0289%" height="15" fill="rgb(237,209,11)" fg:x="2259" fg:w="1"/><text x="65.5579%" y="1439.50"></text></g><g><title>&lt;combine::stream::MaybePartialStream&lt;S&gt; as combine::stream::ResetStream&gt;::checkpoint (1 samples, 0.03%)</title><rect x="65.3079%" y="1413" width="0.0289%" height="15" fill="rgb(243,227,24)" fg:x="2259" fg:w="1"/><text x="65.5579%" y="1423.50"></text></g><g><title>&lt;&amp;[T] as combine::stream::ResetStream&gt;::checkpoint (1 samples, 0.03%)</title><rect x="65.3079%" y="1397" width="0.0289%" height="15" fill="rgb(239,193,16)" fg:x="2259" fg:w="1"/><text x="65.5579%" y="1407.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for &amp;T&gt;::clone (1 samples, 0.03%)</title><rect x="65.3079%" y="1381" width="0.0289%" height="15" fill="rgb(231,27,9)" fg:x="2259" fg:w="1"/><text x="65.5579%" y="1391.50"></text></g><g><title>core::ptr::drop_in_place&lt;combine::parser::combinator::Either&lt;combine::parser::combinator::Map&lt;combine::parser::token::Value&lt;combine::stream::easy::Stream&lt;combine::stream::MaybePartialStream&lt;&amp;[u8]&gt;&gt;,redis::types::Value&gt;,core::result::Result&lt;redis::types::Value,redis::types::RedisError&gt;::Ok&gt;,combine::parser::combinator::Map&lt;combine::parser::repeat::CountMinMax&lt;redis::parser::ResultExtend&lt;alloc::vec::Vec&lt;redis::types::Value&gt;,redis::types::RedisError&gt;,combine::parser::combinator::Opaque&lt;redis::parser::value&lt;combine::stream::easy::Stream&lt;combine::stream::MaybePartialStream&lt;&amp;[u8]&gt;&gt;&gt;::{{closure}},combine::stream::easy::Stream&lt;combine::stream::MaybePartialStream&lt;&amp;[u8]&gt;&gt;,core::result::Result&lt;redis::types::Value,redis::types::RedisError&gt;,combine::parser::combinator::AnySendSyncPartialState&gt;&gt;,redis::parser::value&lt;combine::stream::easy::Stream&lt;combine::stream::MaybePartialStream&lt;&amp;[u8]&gt;&gt;&gt;::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="65.3368%" y="1461" width="0.0289%" height="15" fill="rgb(219,169,10)" fg:x="2260" fg:w="1"/><text x="65.5868%" y="1471.50"></text></g><g><title>combine::parser::Parser::parse_committed_mode (1,018 samples, 29.43%)</title><rect x="35.9642%" y="1589" width="29.4305%" height="15" fill="rgb(244,229,43)" fg:x="1244" fg:w="1018"/><text x="36.2142%" y="1599.50">combine::parser::Parser::parse_committed_mode</text></g><g><title>combine::parser::ParseMode::parse_committed (1,018 samples, 29.43%)</title><rect x="35.9642%" y="1573" width="29.4305%" height="15" fill="rgb(254,38,20)" fg:x="1244" fg:w="1018"/><text x="36.2142%" y="1583.50">combine::parser::ParseMode::parse_committed</text></g><g><title>combine::parser::Parser::parse_mode_impl (1,002 samples, 28.97%)</title><rect x="36.4267%" y="1557" width="28.9679%" height="15" fill="rgb(250,47,30)" fg:x="1260" fg:w="1002"/><text x="36.6767%" y="1567.50">combine::parser::Parser::parse_mode_impl</text></g><g><title>&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;A,B,C,D,E,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (217 samples, 6.27%)</title><rect x="59.1211%" y="1541" width="6.2735%" height="15" fill="rgb(224,124,36)" fg:x="2045" fg:w="217"/><text x="59.3711%" y="1551.50">&lt;redis::..</text></g><g><title>&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;A,B,C,D,E,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (217 samples, 6.27%)</title><rect x="59.1211%" y="1525" width="6.2735%" height="15" fill="rgb(246,68,51)" fg:x="2045" fg:w="217"/><text x="59.3711%" y="1535.50">&lt;redis::..</text></g><g><title>combine::parser::Parser::parse_mode (211 samples, 6.10%)</title><rect x="59.2946%" y="1509" width="6.1000%" height="15" fill="rgb(253,43,49)" fg:x="2051" fg:w="211"/><text x="59.5446%" y="1519.50">combine:..</text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (210 samples, 6.07%)</title><rect x="59.3235%" y="1493" width="6.0711%" height="15" fill="rgb(219,54,36)" fg:x="2052" fg:w="210"/><text x="59.5735%" y="1503.50">&lt;combine..</text></g><g><title>&lt;combine::parser::sequence::ThenPartial&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (209 samples, 6.04%)</title><rect x="59.3524%" y="1477" width="6.0422%" height="15" fill="rgb(227,133,34)" fg:x="2053" fg:w="209"/><text x="59.6024%" y="1487.50">&lt;combine..</text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (1 samples, 0.03%)</title><rect x="65.3657%" y="1461" width="0.0289%" height="15" fill="rgb(247,227,15)" fg:x="2261" fg:w="1"/><text x="65.6157%" y="1471.50"></text></g><g><title>combine::parser::Parser::parse_committed_mode (8 samples, 0.23%)</title><rect x="65.5103%" y="1541" width="0.2313%" height="15" fill="rgb(229,96,14)" fg:x="2266" fg:w="8"/><text x="65.7603%" y="1551.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (8 samples, 0.23%)</title><rect x="65.5103%" y="1525" width="0.2313%" height="15" fill="rgb(220,79,17)" fg:x="2266" fg:w="8"/><text x="65.7603%" y="1535.50"></text></g><g><title>&lt;combine::parser::combinator::Either&lt;L,R&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (1 samples, 0.03%)</title><rect x="65.7126%" y="1509" width="0.0289%" height="15" fill="rgb(205,131,53)" fg:x="2273" fg:w="1"/><text x="65.9626%" y="1519.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::StreamOnce&gt;::uncons (1 samples, 0.03%)</title><rect x="65.7415%" y="1445" width="0.0289%" height="15" fill="rgb(209,50,29)" fg:x="2274" fg:w="1"/><text x="65.9915%" y="1455.50"></text></g><g><title>&lt;combine::stream::MaybePartialStream&lt;S&gt; as combine::stream::StreamOnce&gt;::uncons (1 samples, 0.03%)</title><rect x="65.7415%" y="1429" width="0.0289%" height="15" fill="rgb(245,86,46)" fg:x="2274" fg:w="1"/><text x="65.9915%" y="1439.50"></text></g><g><title>&lt;&amp;[T] as combine::stream::StreamOnce&gt;::uncons (1 samples, 0.03%)</title><rect x="65.7415%" y="1413" width="0.0289%" height="15" fill="rgb(235,66,46)" fg:x="2274" fg:w="1"/><text x="65.9915%" y="1423.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="65.7705%" y="1333" width="0.0289%" height="15" fill="rgb(232,148,31)" fg:x="2275" fg:w="1"/><text x="66.0205%" y="1343.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="65.7705%" y="1317" width="0.0289%" height="15" fill="rgb(217,149,8)" fg:x="2275" fg:w="1"/><text x="66.0205%" y="1327.50"></text></g><g><title>combine::parser::Parser::parse_mode (3 samples, 0.09%)</title><rect x="65.7415%" y="1541" width="0.0867%" height="15" fill="rgb(209,183,11)" fg:x="2274" fg:w="3"/><text x="65.9915%" y="1551.50"></text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (3 samples, 0.09%)</title><rect x="65.7415%" y="1525" width="0.0867%" height="15" fill="rgb(208,55,20)" fg:x="2274" fg:w="3"/><text x="65.9915%" y="1535.50"></text></g><g><title>combine::parser::Parser::parse_mode_impl (3 samples, 0.09%)</title><rect x="65.7415%" y="1509" width="0.0867%" height="15" fill="rgb(218,39,14)" fg:x="2274" fg:w="3"/><text x="65.9915%" y="1519.50"></text></g><g><title>combine::parser::Parser::parse_partial (3 samples, 0.09%)</title><rect x="65.7415%" y="1493" width="0.0867%" height="15" fill="rgb(216,169,33)" fg:x="2274" fg:w="3"/><text x="65.9915%" y="1503.50"></text></g><g><title>&lt;combine::parser::token::Any&lt;Input&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_lazy (3 samples, 0.09%)</title><rect x="65.7415%" y="1477" width="0.0867%" height="15" fill="rgb(233,80,24)" fg:x="2274" fg:w="3"/><text x="65.9915%" y="1487.50"></text></g><g><title>combine::stream::uncons (3 samples, 0.09%)</title><rect x="65.7415%" y="1461" width="0.0867%" height="15" fill="rgb(213,179,31)" fg:x="2274" fg:w="3"/><text x="65.9915%" y="1471.50"></text></g><g><title>combine::stream::wrap_stream_error (2 samples, 0.06%)</title><rect x="65.7705%" y="1445" width="0.0578%" height="15" fill="rgb(209,19,5)" fg:x="2275" fg:w="2"/><text x="66.0205%" y="1455.50"></text></g><g><title>&lt;combine::stream::easy::Errors&lt;Item,Range,Position&gt; as combine::error::ParseError&lt;Item,Range,Position&gt;&gt;::from_error (2 samples, 0.06%)</title><rect x="65.7705%" y="1429" width="0.0578%" height="15" fill="rgb(219,18,35)" fg:x="2275" fg:w="2"/><text x="66.0205%" y="1439.50"></text></g><g><title>combine::stream::easy::Errors&lt;T,R,P&gt;::new (2 samples, 0.06%)</title><rect x="65.7705%" y="1413" width="0.0578%" height="15" fill="rgb(209,169,16)" fg:x="2275" fg:w="2"/><text x="66.0205%" y="1423.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.06%)</title><rect x="65.7705%" y="1397" width="0.0578%" height="15" fill="rgb(245,90,51)" fg:x="2275" fg:w="2"/><text x="66.0205%" y="1407.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.06%)</title><rect x="65.7705%" y="1381" width="0.0578%" height="15" fill="rgb(220,99,45)" fg:x="2275" fg:w="2"/><text x="66.0205%" y="1391.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.06%)</title><rect x="65.7705%" y="1365" width="0.0578%" height="15" fill="rgb(249,89,25)" fg:x="2275" fg:w="2"/><text x="66.0205%" y="1375.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.06%)</title><rect x="65.7705%" y="1349" width="0.0578%" height="15" fill="rgb(239,193,0)" fg:x="2275" fg:w="2"/><text x="66.0205%" y="1359.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="65.7994%" y="1333" width="0.0289%" height="15" fill="rgb(231,126,1)" fg:x="2276" fg:w="1"/><text x="66.0494%" y="1343.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.03%)</title><rect x="65.8283%" y="1541" width="0.0289%" height="15" fill="rgb(243,166,3)" fg:x="2277" fg:w="1"/><text x="66.0783%" y="1551.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="65.8283%" y="1525" width="0.0289%" height="15" fill="rgb(223,22,34)" fg:x="2277" fg:w="1"/><text x="66.0783%" y="1535.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="65.8283%" y="1509" width="0.0289%" height="15" fill="rgb(251,52,51)" fg:x="2277" fg:w="1"/><text x="66.0783%" y="1519.50"></text></g><g><title>combine::parser::Parser::parse_mode (19 samples, 0.55%)</title><rect x="65.3946%" y="1589" width="0.5493%" height="15" fill="rgb(221,165,28)" fg:x="2262" fg:w="19"/><text x="65.6446%" y="1599.50"></text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (19 samples, 0.55%)</title><rect x="65.3946%" y="1573" width="0.5493%" height="15" fill="rgb(218,121,47)" fg:x="2262" fg:w="19"/><text x="65.6446%" y="1583.50"></text></g><g><title>&lt;combine::parser::sequence::ThenPartial&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (19 samples, 0.55%)</title><rect x="65.3946%" y="1557" width="0.5493%" height="15" fill="rgb(209,120,9)" fg:x="2262" fg:w="19"/><text x="65.6446%" y="1567.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}} (3 samples, 0.09%)</title><rect x="65.8572%" y="1541" width="0.0867%" height="15" fill="rgb(236,68,12)" fg:x="2278" fg:w="3"/><text x="66.1072%" y="1551.50"></text></g><g><title>combine::parser::Parser::right (2 samples, 0.06%)</title><rect x="65.8861%" y="1525" width="0.0578%" height="15" fill="rgb(225,194,26)" fg:x="2279" fg:w="2"/><text x="66.1361%" y="1535.50"></text></g><g><title>&lt;combine::parser::combinator::Opaque&lt;F,Input,O,S&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl::{{closure}} (1,080 samples, 31.22%)</title><rect x="34.8656%" y="1685" width="31.2229%" height="15" fill="rgb(231,84,39)" fg:x="1206" fg:w="1080"/><text x="35.1156%" y="1695.50">&lt;combine::parser::combinator::Opaque&lt;F,Input,O,S&gt; ..</text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (1,079 samples, 31.19%)</title><rect x="34.8945%" y="1669" width="31.1940%" height="15" fill="rgb(210,11,45)" fg:x="1207" fg:w="1079"/><text x="35.1445%" y="1679.50">&lt;combine::parser::combinator::AnySendSyncPartialSt..</text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (1,078 samples, 31.17%)</title><rect x="34.9234%" y="1653" width="31.1651%" height="15" fill="rgb(224,54,52)" fg:x="1208" fg:w="1078"/><text x="35.1734%" y="1663.50">&lt;combine::parser::combinator::AnySendSyncPartialSt..</text></g><g><title>combine::parser::Parser::parse_mode (1,068 samples, 30.88%)</title><rect x="35.2125%" y="1637" width="30.8760%" height="15" fill="rgb(238,102,14)" fg:x="1218" fg:w="1068"/><text x="35.4625%" y="1647.50">combine::parser::Parser::parse_mode</text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (1,068 samples, 30.88%)</title><rect x="35.2125%" y="1621" width="30.8760%" height="15" fill="rgb(243,160,52)" fg:x="1218" fg:w="1068"/><text x="35.4625%" y="1631.50">&lt;combine::parser::PartialMode as combine::parser::..</text></g><g><title>&lt;combine::parser::sequence::ThenPartial&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (1,067 samples, 30.85%)</title><rect x="35.2414%" y="1605" width="30.8471%" height="15" fill="rgb(216,114,19)" fg:x="1219" fg:w="1067"/><text x="35.4914%" y="1615.50">&lt;combine::parser::sequence::ThenPartial&lt;P,F&gt; as co..</text></g><g><title>redis::parser::value::{{closure}}::{{closure}} (5 samples, 0.14%)</title><rect x="65.9439%" y="1589" width="0.1446%" height="15" fill="rgb(244,166,37)" fg:x="2281" fg:w="5"/><text x="66.1939%" y="1599.50"></text></g><g><title>combine::parser::Parser::parse_with_state (1,117 samples, 32.29%)</title><rect x="33.8248%" y="1797" width="32.2926%" height="15" fill="rgb(246,29,44)" fg:x="1170" fg:w="1117"/><text x="34.0748%" y="1807.50">combine::parser::Parser::parse_with_state</text></g><g><title>combine::parser::Parser::parse_stream_partial (1,111 samples, 32.12%)</title><rect x="33.9983%" y="1781" width="32.1191%" height="15" fill="rgb(215,56,53)" fg:x="1176" fg:w="1111"/><text x="34.2483%" y="1791.50">combine::parser::Parser::parse_stream_partial</text></g><g><title>&lt;combine::parser::combinator::Opaque&lt;F,Input,O,S&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (1,103 samples, 31.89%)</title><rect x="34.2295%" y="1765" width="31.8878%" height="15" fill="rgb(217,60,2)" fg:x="1184" fg:w="1103"/><text x="34.4795%" y="1775.50">&lt;combine::parser::combinator::Opaque&lt;F,Input,O,S&gt; as..</text></g><g><title>combine::parser::Parser::parse_mode (1,103 samples, 31.89%)</title><rect x="34.2295%" y="1749" width="31.8878%" height="15" fill="rgb(207,26,24)" fg:x="1184" fg:w="1103"/><text x="34.4795%" y="1759.50">combine::parser::Parser::parse_mode</text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (1,103 samples, 31.89%)</title><rect x="34.2295%" y="1733" width="31.8878%" height="15" fill="rgb(252,210,15)" fg:x="1184" fg:w="1103"/><text x="34.4795%" y="1743.50">&lt;combine::parser::PartialMode as combine::parser::Pa..</text></g><g><title>&lt;combine::parser::combinator::Opaque&lt;F,Input,O,S&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (1,103 samples, 31.89%)</title><rect x="34.2295%" y="1717" width="31.8878%" height="15" fill="rgb(253,209,26)" fg:x="1184" fg:w="1103"/><text x="34.4795%" y="1727.50">&lt;combine::parser::combinator::Opaque&lt;F,Input,O,S&gt; as..</text></g><g><title>redis::parser::value::{{closure}} (1,081 samples, 31.25%)</title><rect x="34.8656%" y="1701" width="31.2518%" height="15" fill="rgb(238,170,14)" fg:x="1206" fg:w="1081"/><text x="35.1156%" y="1711.50">redis::parser::value::{{closure}}</text></g><g><title>combine::parser::combinator::any_send_sync_partial_state (1 samples, 0.03%)</title><rect x="66.0885%" y="1685" width="0.0289%" height="15" fill="rgb(216,178,15)" fg:x="2286" fg:w="1"/><text x="66.3385%" y="1695.50"></text></g><g><title>__rust_dealloc (1 samples, 0.03%)</title><rect x="66.1463%" y="1733" width="0.0289%" height="15" fill="rgb(250,197,2)" fg:x="2288" fg:w="1"/><text x="66.3963%" y="1743.50"></text></g><g><title>cfree (9 samples, 0.26%)</title><rect x="66.1752%" y="1733" width="0.2602%" height="15" fill="rgb(212,70,42)" fg:x="2289" fg:w="9"/><text x="66.4252%" y="1743.50"></text></g><g><title>[libc.so.6] (5 samples, 0.14%)</title><rect x="66.2908%" y="1717" width="0.1446%" height="15" fill="rgb(227,213,9)" fg:x="2293" fg:w="5"/><text x="66.5408%" y="1727.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.35%)</title><rect x="66.1174%" y="1765" width="0.3469%" height="15" fill="rgb(245,99,25)" fg:x="2287" fg:w="12"/><text x="66.3674%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;[combine::stream::easy::Error&lt;u8,&amp;[u8]&gt;]&gt; (12 samples, 0.35%)</title><rect x="66.1174%" y="1749" width="0.3469%" height="15" fill="rgb(250,82,29)" fg:x="2287" fg:w="12"/><text x="66.3674%" y="1759.50"></text></g><g><title>core::ptr::drop_in_place&lt;combine::stream::easy::Error&lt;u8,&amp;[u8]&gt;&gt; (1 samples, 0.03%)</title><rect x="66.4354%" y="1733" width="0.0289%" height="15" fill="rgb(241,226,54)" fg:x="2298" fg:w="1"/><text x="66.6854%" y="1743.50"></text></g><g><title>combine::stream::decode (1,175 samples, 33.97%)</title><rect x="33.0153%" y="1813" width="33.9694%" height="15" fill="rgb(221,99,41)" fg:x="1142" fg:w="1175"/><text x="33.2653%" y="1823.50">combine::stream::decode</text></g><g><title>core::ptr::drop_in_place&lt;combine::stream::easy::Errors&lt;u8,&amp;[u8],combine::stream::PointerOffset&lt;[u8]&gt;&gt;&gt; (30 samples, 0.87%)</title><rect x="66.1174%" y="1797" width="0.8673%" height="15" fill="rgb(213,90,21)" fg:x="2287" fg:w="30"/><text x="66.3674%" y="1807.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;combine::stream::easy::Error&lt;u8,&amp;[u8]&gt;&gt;&gt; (30 samples, 0.87%)</title><rect x="66.1174%" y="1781" width="0.8673%" height="15" fill="rgb(205,208,24)" fg:x="2287" fg:w="30"/><text x="66.3674%" y="1791.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;combine::stream::easy::Error&lt;u8,&amp;[u8]&gt;&gt;&gt; (18 samples, 0.52%)</title><rect x="66.4643%" y="1765" width="0.5204%" height="15" fill="rgb(246,31,12)" fg:x="2299" fg:w="18"/><text x="66.7143%" y="1775.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.52%)</title><rect x="66.4643%" y="1749" width="0.5204%" height="15" fill="rgb(213,154,6)" fg:x="2299" fg:w="18"/><text x="66.7143%" y="1759.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.49%)</title><rect x="66.4932%" y="1733" width="0.4915%" height="15" fill="rgb(222,163,29)" fg:x="2300" fg:w="17"/><text x="66.7432%" y="1743.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.49%)</title><rect x="66.4932%" y="1717" width="0.4915%" height="15" fill="rgb(227,201,8)" fg:x="2300" fg:w="17"/><text x="66.7432%" y="1727.50"></text></g><g><title>cfree (17 samples, 0.49%)</title><rect x="66.4932%" y="1701" width="0.4915%" height="15" fill="rgb(233,9,32)" fg:x="2300" fg:w="17"/><text x="66.7432%" y="1711.50"></text></g><g><title>[libc.so.6] (14 samples, 0.40%)</title><rect x="66.5799%" y="1685" width="0.4047%" height="15" fill="rgb(217,54,24)" fg:x="2303" fg:w="14"/><text x="66.8299%" y="1695.50"></text></g><g><title>[libc.so.6] (5 samples, 0.14%)</title><rect x="66.8401%" y="1669" width="0.1446%" height="15" fill="rgb(235,192,0)" fg:x="2312" fg:w="5"/><text x="67.0901%" y="1679.50"></text></g><g><title>[libc.so.6] (2 samples, 0.06%)</title><rect x="66.9269%" y="1653" width="0.0578%" height="15" fill="rgb(235,45,9)" fg:x="2315" fg:w="2"/><text x="67.1769%" y="1663.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (1 samples, 0.03%)</title><rect x="67.1292%" y="1765" width="0.0289%" height="15" fill="rgb(246,42,40)" fg:x="2322" fg:w="1"/><text x="67.3792%" y="1775.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_vec_pos (1 samples, 0.03%)</title><rect x="67.1581%" y="1717" width="0.0289%" height="15" fill="rgb(248,111,24)" fg:x="2323" fg:w="1"/><text x="67.4081%" y="1727.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (11 samples, 0.32%)</title><rect x="67.1581%" y="1765" width="0.3180%" height="15" fill="rgb(249,65,22)" fg:x="2323" fg:w="11"/><text x="67.4081%" y="1775.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (11 samples, 0.32%)</title><rect x="67.1581%" y="1749" width="0.3180%" height="15" fill="rgb(238,111,51)" fg:x="2323" fg:w="11"/><text x="67.4081%" y="1759.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (11 samples, 0.32%)</title><rect x="67.1581%" y="1733" width="0.3180%" height="15" fill="rgb(250,118,22)" fg:x="2323" fg:w="11"/><text x="67.4081%" y="1743.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.29%)</title><rect x="67.1870%" y="1717" width="0.2891%" height="15" fill="rgb(234,84,26)" fg:x="2324" fg:w="10"/><text x="67.4370%" y="1727.50"></text></g><g><title>[libc.so.6] (10 samples, 0.29%)</title><rect x="67.1870%" y="1701" width="0.2891%" height="15" fill="rgb(243,172,12)" fg:x="2324" fg:w="10"/><text x="67.4370%" y="1711.50"></text></g><g><title>bytes::buf::uninit_slice::UninitSlice::write_byte (17 samples, 0.49%)</title><rect x="67.4761%" y="1765" width="0.4915%" height="15" fill="rgb(236,150,49)" fg:x="2334" fg:w="17"/><text x="67.7261%" y="1775.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (17 samples, 0.49%)</title><rect x="67.4761%" y="1749" width="0.4915%" height="15" fill="rgb(225,197,26)" fg:x="2334" fg:w="17"/><text x="67.7261%" y="1759.50"></text></g><g><title>core::ptr::write (17 samples, 0.49%)</title><rect x="67.4761%" y="1733" width="0.4915%" height="15" fill="rgb(214,17,42)" fg:x="2334" fg:w="17"/><text x="67.7261%" y="1743.50"></text></g><g><title>[libc.so.6] (17 samples, 0.49%)</title><rect x="67.4761%" y="1717" width="0.4915%" height="15" fill="rgb(224,165,40)" fg:x="2334" fg:w="17"/><text x="67.7261%" y="1727.50"></text></g><g><title>recv (47 samples, 1.36%)</title><rect x="68.0544%" y="1669" width="1.3588%" height="15" fill="rgb(246,100,4)" fg:x="2354" fg:w="47"/><text x="68.3044%" y="1679.50"></text></g><g><title>&lt;combine::stream::buf_reader::Buffer as combine::stream::buf_reader::CombineSyncRead&lt;R&gt;&gt;::extend_buf_sync (87 samples, 2.52%)</title><rect x="67.0136%" y="1797" width="2.5152%" height="15" fill="rgb(222,103,0)" fg:x="2318" fg:w="87"/><text x="67.2636%" y="1807.50">&lt;c..</text></g><g><title>combine::stream::buf_reader::extend_buf_sync (87 samples, 2.52%)</title><rect x="67.0136%" y="1781" width="2.5152%" height="15" fill="rgb(227,189,26)" fg:x="2318" fg:w="87"/><text x="67.2636%" y="1791.50">co..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (54 samples, 1.56%)</title><rect x="67.9676%" y="1765" width="1.5611%" height="15" fill="rgb(214,202,17)" fg:x="2351" fg:w="54"/><text x="68.2176%" y="1775.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (54 samples, 1.56%)</title><rect x="67.9676%" y="1749" width="1.5611%" height="15" fill="rgb(229,111,3)" fg:x="2351" fg:w="54"/><text x="68.2176%" y="1759.50"></text></g><g><title>std::net::udp::UdpSocket::recv (54 samples, 1.56%)</title><rect x="67.9676%" y="1733" width="1.5611%" height="15" fill="rgb(229,172,15)" fg:x="2351" fg:w="54"/><text x="68.2176%" y="1743.50"></text></g><g><title>std::sys_common::net::UdpSocket::recv (53 samples, 1.53%)</title><rect x="67.9965%" y="1717" width="1.5322%" height="15" fill="rgb(230,224,35)" fg:x="2352" fg:w="53"/><text x="68.2465%" y="1727.50"></text></g><g><title>std::sys::unix::net::Socket::read (53 samples, 1.53%)</title><rect x="67.9965%" y="1701" width="1.5322%" height="15" fill="rgb(251,141,6)" fg:x="2352" fg:w="53"/><text x="68.2465%" y="1711.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (52 samples, 1.50%)</title><rect x="68.0254%" y="1685" width="1.5033%" height="15" fill="rgb(225,208,6)" fg:x="2353" fg:w="52"/><text x="68.2754%" y="1695.50"></text></g><g><title>std::sys::unix::cvt (4 samples, 0.12%)</title><rect x="69.4131%" y="1669" width="0.1156%" height="15" fill="rgb(246,181,16)" fg:x="2401" fg:w="4"/><text x="69.6631%" y="1679.50"></text></g><g><title>std::io::error::Error::last_os_error (2 samples, 0.06%)</title><rect x="69.4709%" y="1653" width="0.0578%" height="15" fill="rgb(227,129,36)" fg:x="2403" fg:w="2"/><text x="69.7209%" y="1663.50"></text></g><g><title>std::sys::unix::os::errno (2 samples, 0.06%)</title><rect x="69.4709%" y="1637" width="0.0578%" height="15" fill="rgb(248,117,24)" fg:x="2403" fg:w="2"/><text x="69.7209%" y="1647.50"></text></g><g><title>__errno_location (2 samples, 0.06%)</title><rect x="69.4709%" y="1621" width="0.0578%" height="15" fill="rgb(214,185,35)" fg:x="2403" fg:w="2"/><text x="69.7209%" y="1631.50"></text></g><g><title>combine::stream::decoder::Decoder&lt;S,P,C&gt;::__before_parse (90 samples, 2.60%)</title><rect x="66.9847%" y="1813" width="2.6019%" height="15" fill="rgb(236,150,34)" fg:x="2317" fg:w="90"/><text x="67.2347%" y="1823.50">co..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.06%)</title><rect x="69.5288%" y="1797" width="0.0578%" height="15" fill="rgb(243,228,27)" fg:x="2405" fg:w="2"/><text x="69.7788%" y="1807.50"></text></g><g><title>[exchange-matching-engine] (1 samples, 0.03%)</title><rect x="69.5866%" y="1765" width="0.0289%" height="15" fill="rgb(245,77,44)" fg:x="2407" fg:w="1"/><text x="69.8366%" y="1775.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (1 samples, 0.03%)</title><rect x="69.5866%" y="1749" width="0.0289%" height="15" fill="rgb(235,214,42)" fg:x="2407" fg:w="1"/><text x="69.8366%" y="1759.50"></text></g><g><title>redis::connection::Connection::recv_response (1,294 samples, 37.41%)</title><rect x="32.2637%" y="1861" width="37.4097%" height="15" fill="rgb(221,74,3)" fg:x="1116" fg:w="1294"/><text x="32.5137%" y="1871.50">redis::connection::Connection::recv_response</text></g><g><title>redis::connection::Connection::read_response (1,294 samples, 37.41%)</title><rect x="32.2637%" y="1845" width="37.4097%" height="15" fill="rgb(206,121,29)" fg:x="1116" fg:w="1294"/><text x="32.5137%" y="1855.50">redis::connection::Connection::read_response</text></g><g><title>redis::parser::Parser::parse_value (1,283 samples, 37.09%)</title><rect x="32.5817%" y="1829" width="37.0916%" height="15" fill="rgb(249,131,53)" fg:x="1127" fg:w="1283"/><text x="32.8317%" y="1839.50">redis::parser::Parser::parse_value</text></g><g><title>combine::stream::decoder::Decoder&lt;S,P,C&gt;::advance (3 samples, 0.09%)</title><rect x="69.5866%" y="1813" width="0.0867%" height="15" fill="rgb(236,170,29)" fg:x="2407" fg:w="3"/><text x="69.8366%" y="1823.50"></text></g><g><title>&lt;combine::stream::buf_reader::Buffer as combine::stream::buf_reader::CombineBuffer&lt;R&gt;&gt;::advance (3 samples, 0.09%)</title><rect x="69.5866%" y="1797" width="0.0867%" height="15" fill="rgb(247,96,15)" fg:x="2407" fg:w="3"/><text x="69.8366%" y="1807.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (3 samples, 0.09%)</title><rect x="69.5866%" y="1781" width="0.0867%" height="15" fill="rgb(211,210,7)" fg:x="2407" fg:w="3"/><text x="69.8366%" y="1791.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (2 samples, 0.06%)</title><rect x="69.6155%" y="1765" width="0.0578%" height="15" fill="rgb(240,88,50)" fg:x="2408" fg:w="2"/><text x="69.8655%" y="1775.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_vec_pos (1 samples, 0.03%)</title><rect x="69.6444%" y="1749" width="0.0289%" height="15" fill="rgb(209,229,26)" fg:x="2409" fg:w="1"/><text x="69.8944%" y="1759.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&lt;&amp;str&gt;&gt;::eq (1 samples, 0.03%)</title><rect x="70.2804%" y="1845" width="0.0289%" height="15" fill="rgb(210,68,23)" fg:x="2431" fg:w="1"/><text x="70.5304%" y="1855.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.03%)</title><rect x="70.2804%" y="1829" width="0.0289%" height="15" fill="rgb(229,180,13)" fg:x="2431" fg:w="1"/><text x="70.5304%" y="1839.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.03%)</title><rect x="70.2804%" y="1813" width="0.0289%" height="15" fill="rgb(236,53,44)" fg:x="2431" fg:w="1"/><text x="70.5304%" y="1823.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.03%)</title><rect x="70.2804%" y="1797" width="0.0289%" height="15" fill="rgb(244,214,29)" fg:x="2431" fg:w="1"/><text x="70.5304%" y="1807.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.03%)</title><rect x="70.2804%" y="1781" width="0.0289%" height="15" fill="rgb(220,75,29)" fg:x="2431" fg:w="1"/><text x="70.5304%" y="1791.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.12%)</title><rect x="70.3093%" y="1845" width="0.1156%" height="15" fill="rgb(214,183,37)" fg:x="2432" fg:w="4"/><text x="70.5593%" y="1855.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (4 samples, 0.12%)</title><rect x="70.3093%" y="1829" width="0.1156%" height="15" fill="rgb(239,117,29)" fg:x="2432" fg:w="4"/><text x="70.5593%" y="1839.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="70.4250%" y="1845" width="0.0578%" height="15" fill="rgb(237,171,35)" fg:x="2436" fg:w="2"/><text x="70.6750%" y="1855.50"></text></g><g><title>core::ptr::drop_in_place&lt;[redis::types::Value]&gt; (1 samples, 0.03%)</title><rect x="70.4539%" y="1829" width="0.0289%" height="15" fill="rgb(229,178,53)" fg:x="2437" fg:w="1"/><text x="70.7039%" y="1839.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.12%)</title><rect x="70.4828%" y="1845" width="0.1156%" height="15" fill="rgb(210,102,19)" fg:x="2438" fg:w="4"/><text x="70.7328%" y="1855.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.06%)</title><rect x="70.5984%" y="1845" width="0.0578%" height="15" fill="rgb(235,127,22)" fg:x="2442" fg:w="2"/><text x="70.8484%" y="1855.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.06%)</title><rect x="70.5984%" y="1829" width="0.0578%" height="15" fill="rgb(244,31,31)" fg:x="2442" fg:w="2"/><text x="70.8484%" y="1839.50"></text></g><g><title>cfree (24 samples, 0.69%)</title><rect x="70.6563%" y="1845" width="0.6938%" height="15" fill="rgb(231,43,21)" fg:x="2444" fg:w="24"/><text x="70.9063%" y="1855.50"></text></g><g><title>[libc.so.6] (14 samples, 0.40%)</title><rect x="70.9454%" y="1829" width="0.4047%" height="15" fill="rgb(217,131,35)" fg:x="2454" fg:w="14"/><text x="71.1954%" y="1839.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (2 samples, 0.06%)</title><rect x="71.3501%" y="1845" width="0.0578%" height="15" fill="rgb(221,149,4)" fg:x="2468" fg:w="2"/><text x="71.6001%" y="1855.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::ok (11 samples, 0.32%)</title><rect x="71.4079%" y="1845" width="0.3180%" height="15" fill="rgb(232,170,28)" fg:x="2470" fg:w="11"/><text x="71.6579%" y="1855.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="71.7259%" y="1813" width="0.0289%" height="15" fill="rgb(238,56,10)" fg:x="2481" fg:w="1"/><text x="71.9759%" y="1823.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="71.7838%" y="1589" width="0.0289%" height="15" fill="rgb(235,196,14)" fg:x="2483" fg:w="1"/><text x="72.0338%" y="1599.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="71.7838%" y="1573" width="0.0289%" height="15" fill="rgb(216,45,48)" fg:x="2483" fg:w="1"/><text x="72.0338%" y="1583.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="71.8127%" y="1589" width="0.0289%" height="15" fill="rgb(238,213,17)" fg:x="2484" fg:w="1"/><text x="72.0627%" y="1599.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 0.23%)</title><rect x="71.7548%" y="1685" width="0.2313%" height="15" fill="rgb(212,13,2)" fg:x="2482" fg:w="8"/><text x="72.0048%" y="1695.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.23%)</title><rect x="71.7548%" y="1669" width="0.2313%" height="15" fill="rgb(240,114,20)" fg:x="2482" fg:w="8"/><text x="72.0048%" y="1679.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.23%)</title><rect x="71.7548%" y="1653" width="0.2313%" height="15" fill="rgb(228,41,40)" fg:x="2482" fg:w="8"/><text x="72.0048%" y="1663.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.20%)</title><rect x="71.7838%" y="1637" width="0.2024%" height="15" fill="rgb(244,132,35)" fg:x="2483" fg:w="7"/><text x="72.0338%" y="1647.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.20%)</title><rect x="71.7838%" y="1621" width="0.2024%" height="15" fill="rgb(253,189,4)" fg:x="2483" fg:w="7"/><text x="72.0338%" y="1631.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.20%)</title><rect x="71.7838%" y="1605" width="0.2024%" height="15" fill="rgb(224,37,19)" fg:x="2483" fg:w="7"/><text x="72.0338%" y="1615.50"></text></g><g><title>malloc (5 samples, 0.14%)</title><rect x="71.8416%" y="1589" width="0.1446%" height="15" fill="rgb(235,223,18)" fg:x="2485" fg:w="5"/><text x="72.0916%" y="1599.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (9 samples, 0.26%)</title><rect x="71.7548%" y="1813" width="0.2602%" height="15" fill="rgb(235,163,25)" fg:x="2482" fg:w="9"/><text x="72.0048%" y="1823.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (9 samples, 0.26%)</title><rect x="71.7548%" y="1797" width="0.2602%" height="15" fill="rgb(217,145,28)" fg:x="2482" fg:w="9"/><text x="72.0048%" y="1807.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (9 samples, 0.26%)</title><rect x="71.7548%" y="1781" width="0.2602%" height="15" fill="rgb(223,223,32)" fg:x="2482" fg:w="9"/><text x="72.0048%" y="1791.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (9 samples, 0.26%)</title><rect x="71.7548%" y="1765" width="0.2602%" height="15" fill="rgb(227,189,39)" fg:x="2482" fg:w="9"/><text x="72.0048%" y="1775.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (9 samples, 0.26%)</title><rect x="71.7548%" y="1749" width="0.2602%" height="15" fill="rgb(248,10,22)" fg:x="2482" fg:w="9"/><text x="72.0048%" y="1759.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.26%)</title><rect x="71.7548%" y="1733" width="0.2602%" height="15" fill="rgb(248,46,39)" fg:x="2482" fg:w="9"/><text x="72.0048%" y="1743.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.26%)</title><rect x="71.7548%" y="1717" width="0.2602%" height="15" fill="rgb(248,113,48)" fg:x="2482" fg:w="9"/><text x="72.0048%" y="1727.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.26%)</title><rect x="71.7548%" y="1701" width="0.2602%" height="15" fill="rgb(245,16,25)" fg:x="2482" fg:w="9"/><text x="72.0048%" y="1711.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.03%)</title><rect x="71.9861%" y="1685" width="0.0289%" height="15" fill="rgb(249,152,16)" fg:x="2490" fg:w="1"/><text x="72.2361%" y="1695.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="71.9861%" y="1669" width="0.0289%" height="15" fill="rgb(250,16,1)" fg:x="2490" fg:w="1"/><text x="72.2361%" y="1679.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="71.9861%" y="1653" width="0.0289%" height="15" fill="rgb(249,138,3)" fg:x="2490" fg:w="1"/><text x="72.2361%" y="1663.50"></text></g><g><title>&lt;alloc::string::String as redis::types::FromRedisValue&gt;::from_redis_value (17 samples, 0.49%)</title><rect x="71.7259%" y="1829" width="0.4915%" height="15" fill="rgb(227,71,41)" fg:x="2481" fg:w="17"/><text x="71.9759%" y="1839.50"></text></g><g><title>core::str::converts::from_utf8 (7 samples, 0.20%)</title><rect x="72.0150%" y="1813" width="0.2024%" height="15" fill="rgb(209,184,23)" fg:x="2491" fg:w="7"/><text x="72.2650%" y="1823.50"></text></g><g><title>core::str::validations::run_utf8_validation (6 samples, 0.17%)</title><rect x="72.0439%" y="1797" width="0.1735%" height="15" fill="rgb(223,215,31)" fg:x="2492" fg:w="6"/><text x="72.2939%" y="1807.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="72.4776%" y="1557" width="0.0578%" height="15" fill="rgb(210,146,28)" fg:x="2507" fg:w="2"/><text x="72.7276%" y="1567.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="72.6221%" y="1333" width="0.0289%" height="15" fill="rgb(209,183,41)" fg:x="2512" fg:w="1"/><text x="72.8721%" y="1343.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.03%)</title><rect x="72.6511%" y="1333" width="0.0289%" height="15" fill="rgb(209,224,45)" fg:x="2513" fg:w="1"/><text x="72.9011%" y="1343.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11 samples, 0.32%)</title><rect x="72.5643%" y="1429" width="0.3180%" height="15" fill="rgb(224,209,51)" fg:x="2510" fg:w="11"/><text x="72.8143%" y="1439.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.32%)</title><rect x="72.5643%" y="1413" width="0.3180%" height="15" fill="rgb(223,17,39)" fg:x="2510" fg:w="11"/><text x="72.8143%" y="1423.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (11 samples, 0.32%)</title><rect x="72.5643%" y="1397" width="0.3180%" height="15" fill="rgb(234,204,37)" fg:x="2510" fg:w="11"/><text x="72.8143%" y="1407.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 0.29%)</title><rect x="72.5932%" y="1381" width="0.2891%" height="15" fill="rgb(236,120,5)" fg:x="2511" fg:w="10"/><text x="72.8432%" y="1391.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.29%)</title><rect x="72.5932%" y="1365" width="0.2891%" height="15" fill="rgb(248,97,27)" fg:x="2511" fg:w="10"/><text x="72.8432%" y="1375.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.29%)</title><rect x="72.5932%" y="1349" width="0.2891%" height="15" fill="rgb(240,66,17)" fg:x="2511" fg:w="10"/><text x="72.8432%" y="1359.50"></text></g><g><title>malloc (7 samples, 0.20%)</title><rect x="72.6800%" y="1333" width="0.2024%" height="15" fill="rgb(210,79,3)" fg:x="2514" fg:w="7"/><text x="72.9300%" y="1343.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.52%)</title><rect x="72.4776%" y="1637" width="0.5204%" height="15" fill="rgb(214,176,27)" fg:x="2507" fg:w="18"/><text x="72.7276%" y="1647.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (18 samples, 0.52%)</title><rect x="72.4776%" y="1621" width="0.5204%" height="15" fill="rgb(235,185,3)" fg:x="2507" fg:w="18"/><text x="72.7276%" y="1631.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (18 samples, 0.52%)</title><rect x="72.4776%" y="1605" width="0.5204%" height="15" fill="rgb(227,24,12)" fg:x="2507" fg:w="18"/><text x="72.7276%" y="1615.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (18 samples, 0.52%)</title><rect x="72.4776%" y="1589" width="0.5204%" height="15" fill="rgb(252,169,48)" fg:x="2507" fg:w="18"/><text x="72.7276%" y="1599.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (18 samples, 0.52%)</title><rect x="72.4776%" y="1573" width="0.5204%" height="15" fill="rgb(212,65,1)" fg:x="2507" fg:w="18"/><text x="72.7276%" y="1583.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (16 samples, 0.46%)</title><rect x="72.5354%" y="1557" width="0.4626%" height="15" fill="rgb(242,39,24)" fg:x="2509" fg:w="16"/><text x="72.7854%" y="1567.50"></text></g><g><title>core::ops::function::FnMut::call_mut (16 samples, 0.46%)</title><rect x="72.5354%" y="1541" width="0.4626%" height="15" fill="rgb(249,32,23)" fg:x="2509" fg:w="16"/><text x="72.7854%" y="1551.50"></text></g><g><title>&lt;redis::types::Value as redis::types::FromRedisValue&gt;::from_redis_value (16 samples, 0.46%)</title><rect x="72.5354%" y="1525" width="0.4626%" height="15" fill="rgb(251,195,23)" fg:x="2509" fg:w="16"/><text x="72.7854%" y="1535.50"></text></g><g><title>&lt;redis::types::Value as core::clone::Clone&gt;::clone (16 samples, 0.46%)</title><rect x="72.5354%" y="1509" width="0.4626%" height="15" fill="rgb(236,174,8)" fg:x="2509" fg:w="16"/><text x="72.7854%" y="1519.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.43%)</title><rect x="72.5643%" y="1493" width="0.4337%" height="15" fill="rgb(220,197,8)" fg:x="2510" fg:w="15"/><text x="72.8143%" y="1503.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15 samples, 0.43%)</title><rect x="72.5643%" y="1477" width="0.4337%" height="15" fill="rgb(240,108,37)" fg:x="2510" fg:w="15"/><text x="72.8143%" y="1487.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.43%)</title><rect x="72.5643%" y="1461" width="0.4337%" height="15" fill="rgb(232,176,24)" fg:x="2510" fg:w="15"/><text x="72.8143%" y="1471.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 0.43%)</title><rect x="72.5643%" y="1445" width="0.4337%" height="15" fill="rgb(243,35,29)" fg:x="2510" fg:w="15"/><text x="72.8143%" y="1455.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.12%)</title><rect x="72.8823%" y="1429" width="0.1156%" height="15" fill="rgb(210,37,18)" fg:x="2521" fg:w="4"/><text x="73.1323%" y="1439.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.12%)</title><rect x="72.8823%" y="1413" width="0.1156%" height="15" fill="rgb(224,184,40)" fg:x="2521" fg:w="4"/><text x="73.1323%" y="1423.50"></text></g><g><title>[libc.so.6] (3 samples, 0.09%)</title><rect x="72.9112%" y="1397" width="0.0867%" height="15" fill="rgb(236,39,29)" fg:x="2522" fg:w="3"/><text x="73.1612%" y="1407.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (47 samples, 1.36%)</title><rect x="72.3620%" y="1669" width="1.3588%" height="15" fill="rgb(232,48,39)" fg:x="2503" fg:w="47"/><text x="72.6120%" y="1679.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (47 samples, 1.36%)</title><rect x="72.3620%" y="1653" width="1.3588%" height="15" fill="rgb(236,34,42)" fg:x="2503" fg:w="47"/><text x="72.6120%" y="1663.50"></text></g><g><title>core::ptr::write (25 samples, 0.72%)</title><rect x="72.9980%" y="1637" width="0.7228%" height="15" fill="rgb(243,106,37)" fg:x="2525" fg:w="25"/><text x="73.2480%" y="1647.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="73.7207%" y="1589" width="0.0289%" height="15" fill="rgb(218,96,6)" fg:x="2550" fg:w="1"/><text x="73.9707%" y="1599.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::{{closure}} (9 samples, 0.26%)</title><rect x="73.7496%" y="1573" width="0.2602%" height="15" fill="rgb(235,130,12)" fg:x="2551" fg:w="9"/><text x="73.9996%" y="1583.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::from_try (9 samples, 0.26%)</title><rect x="73.7496%" y="1557" width="0.2602%" height="15" fill="rgb(231,95,0)" fg:x="2551" fg:w="9"/><text x="73.9996%" y="1567.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (9 samples, 0.26%)</title><rect x="73.7496%" y="1541" width="0.2602%" height="15" fill="rgb(228,12,23)" fg:x="2551" fg:w="9"/><text x="73.9996%" y="1551.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="74.1255%" y="1365" width="0.0289%" height="15" fill="rgb(216,12,1)" fg:x="2564" fg:w="1"/><text x="74.3755%" y="1375.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="74.1255%" y="1349" width="0.0289%" height="15" fill="rgb(219,59,3)" fg:x="2564" fg:w="1"/><text x="74.3755%" y="1359.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="74.1544%" y="1365" width="0.0289%" height="15" fill="rgb(215,208,46)" fg:x="2565" fg:w="1"/><text x="74.4044%" y="1375.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.03%)</title><rect x="74.1833%" y="1365" width="0.0289%" height="15" fill="rgb(254,224,29)" fg:x="2566" fg:w="1"/><text x="74.4333%" y="1375.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.14%)</title><rect x="74.1255%" y="1461" width="0.1446%" height="15" fill="rgb(232,14,29)" fg:x="2564" fg:w="5"/><text x="74.3755%" y="1471.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.14%)</title><rect x="74.1255%" y="1445" width="0.1446%" height="15" fill="rgb(208,45,52)" fg:x="2564" fg:w="5"/><text x="74.3755%" y="1455.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.14%)</title><rect x="74.1255%" y="1429" width="0.1446%" height="15" fill="rgb(234,191,28)" fg:x="2564" fg:w="5"/><text x="74.3755%" y="1439.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.14%)</title><rect x="74.1255%" y="1413" width="0.1446%" height="15" fill="rgb(244,67,43)" fg:x="2564" fg:w="5"/><text x="74.3755%" y="1423.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.14%)</title><rect x="74.1255%" y="1397" width="0.1446%" height="15" fill="rgb(236,189,24)" fg:x="2564" fg:w="5"/><text x="74.3755%" y="1407.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.14%)</title><rect x="74.1255%" y="1381" width="0.1446%" height="15" fill="rgb(239,214,33)" fg:x="2564" fg:w="5"/><text x="74.3755%" y="1391.50"></text></g><g><title>malloc (2 samples, 0.06%)</title><rect x="74.2122%" y="1365" width="0.0578%" height="15" fill="rgb(226,176,41)" fg:x="2567" fg:w="2"/><text x="74.4622%" y="1375.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.58%)</title><rect x="73.7207%" y="1669" width="0.5782%" height="15" fill="rgb(248,47,8)" fg:x="2550" fg:w="20"/><text x="73.9707%" y="1679.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (20 samples, 0.58%)</title><rect x="73.7207%" y="1653" width="0.5782%" height="15" fill="rgb(218,81,44)" fg:x="2550" fg:w="20"/><text x="73.9707%" y="1663.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (20 samples, 0.58%)</title><rect x="73.7207%" y="1637" width="0.5782%" height="15" fill="rgb(213,98,6)" fg:x="2550" fg:w="20"/><text x="73.9707%" y="1647.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (20 samples, 0.58%)</title><rect x="73.7207%" y="1621" width="0.5782%" height="15" fill="rgb(222,85,22)" fg:x="2550" fg:w="20"/><text x="73.9707%" y="1631.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (20 samples, 0.58%)</title><rect x="73.7207%" y="1605" width="0.5782%" height="15" fill="rgb(239,46,39)" fg:x="2550" fg:w="20"/><text x="73.9707%" y="1615.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (19 samples, 0.55%)</title><rect x="73.7496%" y="1589" width="0.5493%" height="15" fill="rgb(237,12,29)" fg:x="2551" fg:w="19"/><text x="73.9996%" y="1599.50"></text></g><g><title>core::ops::function::FnMut::call_mut (10 samples, 0.29%)</title><rect x="74.0098%" y="1573" width="0.2891%" height="15" fill="rgb(214,77,8)" fg:x="2560" fg:w="10"/><text x="74.2598%" y="1583.50"></text></g><g><title>&lt;redis::types::Value as redis::types::FromRedisValue&gt;::from_redis_value (9 samples, 0.26%)</title><rect x="74.0387%" y="1557" width="0.2602%" height="15" fill="rgb(217,168,37)" fg:x="2561" fg:w="9"/><text x="74.2887%" y="1567.50"></text></g><g><title>&lt;redis::types::Value as core::clone::Clone&gt;::clone (9 samples, 0.26%)</title><rect x="74.0387%" y="1541" width="0.2602%" height="15" fill="rgb(221,217,23)" fg:x="2561" fg:w="9"/><text x="74.2887%" y="1551.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.17%)</title><rect x="74.1255%" y="1525" width="0.1735%" height="15" fill="rgb(243,229,36)" fg:x="2564" fg:w="6"/><text x="74.3755%" y="1535.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.17%)</title><rect x="74.1255%" y="1509" width="0.1735%" height="15" fill="rgb(251,163,40)" fg:x="2564" fg:w="6"/><text x="74.3755%" y="1519.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.17%)</title><rect x="74.1255%" y="1493" width="0.1735%" height="15" fill="rgb(237,222,12)" fg:x="2564" fg:w="6"/><text x="74.3755%" y="1503.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.17%)</title><rect x="74.1255%" y="1477" width="0.1735%" height="15" fill="rgb(248,132,6)" fg:x="2564" fg:w="6"/><text x="74.3755%" y="1487.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.03%)</title><rect x="74.2700%" y="1461" width="0.0289%" height="15" fill="rgb(227,167,50)" fg:x="2569" fg:w="1"/><text x="74.5200%" y="1471.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="74.2700%" y="1445" width="0.0289%" height="15" fill="rgb(242,84,37)" fg:x="2569" fg:w="1"/><text x="74.5200%" y="1455.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="74.2700%" y="1429" width="0.0289%" height="15" fill="rgb(212,4,50)" fg:x="2569" fg:w="1"/><text x="74.5200%" y="1439.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7 samples, 0.20%)</title><rect x="74.2989%" y="1669" width="0.2024%" height="15" fill="rgb(230,228,32)" fg:x="2570" fg:w="7"/><text x="74.5489%" y="1679.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.20%)</title><rect x="74.2989%" y="1653" width="0.2024%" height="15" fill="rgb(248,217,23)" fg:x="2570" fg:w="7"/><text x="74.5489%" y="1663.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.20%)</title><rect x="74.2989%" y="1637" width="0.2024%" height="15" fill="rgb(238,197,32)" fg:x="2570" fg:w="7"/><text x="74.5489%" y="1647.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.20%)</title><rect x="74.2989%" y="1621" width="0.2024%" height="15" fill="rgb(236,106,1)" fg:x="2570" fg:w="7"/><text x="74.5489%" y="1631.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.14%)</title><rect x="74.3568%" y="1605" width="0.1446%" height="15" fill="rgb(219,228,13)" fg:x="2572" fg:w="5"/><text x="74.6068%" y="1615.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.14%)</title><rect x="74.3568%" y="1589" width="0.1446%" height="15" fill="rgb(238,30,35)" fg:x="2572" fg:w="5"/><text x="74.6068%" y="1599.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.14%)</title><rect x="74.3568%" y="1573" width="0.1446%" height="15" fill="rgb(236,70,23)" fg:x="2572" fg:w="5"/><text x="74.6068%" y="1583.50"></text></g><g><title>malloc (5 samples, 0.14%)</title><rect x="74.3568%" y="1557" width="0.1446%" height="15" fill="rgb(249,104,48)" fg:x="2572" fg:w="5"/><text x="74.6068%" y="1567.50"></text></g><g><title>redis::connection::PubSub::get_message (1,520 samples, 43.94%)</title><rect x="30.6447%" y="1877" width="43.9433%" height="15" fill="rgb(254,117,50)" fg:x="1060" fg:w="1520"/><text x="30.8947%" y="1887.50">redis::connection::PubSub::get_message</text></g><g><title>redis::connection::Msg::from_value (170 samples, 4.91%)</title><rect x="69.6733%" y="1861" width="4.9147%" height="15" fill="rgb(223,152,4)" fg:x="2410" fg:w="170"/><text x="69.9233%" y="1871.50">redis:..</text></g><g><title>redis::types::from_redis_value (99 samples, 2.86%)</title><rect x="71.7259%" y="1845" width="2.8621%" height="15" fill="rgb(245,6,2)" fg:x="2481" fg:w="99"/><text x="71.9759%" y="1855.50">re..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as redis::types::FromRedisValue&gt;::from_redis_value (82 samples, 2.37%)</title><rect x="72.2174%" y="1829" width="2.3706%" height="15" fill="rgb(249,150,24)" fg:x="2498" fg:w="82"/><text x="72.4674%" y="1839.50">&lt;a..</text></g><g><title>redis::types::FromRedisValue::from_redis_values (82 samples, 2.37%)</title><rect x="72.2174%" y="1813" width="2.3706%" height="15" fill="rgb(228,185,42)" fg:x="2498" fg:w="82"/><text x="72.4674%" y="1823.50">re..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (82 samples, 2.37%)</title><rect x="72.2174%" y="1797" width="2.3706%" height="15" fill="rgb(226,39,33)" fg:x="2498" fg:w="82"/><text x="72.4674%" y="1807.50">co..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (82 samples, 2.37%)</title><rect x="72.2174%" y="1781" width="2.3706%" height="15" fill="rgb(221,166,19)" fg:x="2498" fg:w="82"/><text x="72.4674%" y="1791.50">&lt;c..</text></g><g><title>core::iter::adapters::try_process (82 samples, 2.37%)</title><rect x="72.2174%" y="1765" width="2.3706%" height="15" fill="rgb(209,109,2)" fg:x="2498" fg:w="82"/><text x="72.4674%" y="1775.50">co..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (80 samples, 2.31%)</title><rect x="72.2752%" y="1749" width="2.3128%" height="15" fill="rgb(252,216,26)" fg:x="2500" fg:w="80"/><text x="72.5252%" y="1759.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (80 samples, 2.31%)</title><rect x="72.2752%" y="1733" width="2.3128%" height="15" fill="rgb(227,173,36)" fg:x="2500" fg:w="80"/><text x="72.5252%" y="1743.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (80 samples, 2.31%)</title><rect x="72.2752%" y="1717" width="2.3128%" height="15" fill="rgb(209,90,7)" fg:x="2500" fg:w="80"/><text x="72.5252%" y="1727.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (80 samples, 2.31%)</title><rect x="72.2752%" y="1701" width="2.3128%" height="15" fill="rgb(250,194,11)" fg:x="2500" fg:w="80"/><text x="72.5252%" y="1711.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (80 samples, 2.31%)</title><rect x="72.2752%" y="1685" width="2.3128%" height="15" fill="rgb(220,72,50)" fg:x="2500" fg:w="80"/><text x="72.5252%" y="1695.50">&lt;..</text></g><g><title>core::ptr::write (3 samples, 0.09%)</title><rect x="74.5013%" y="1669" width="0.0867%" height="15" fill="rgb(222,106,48)" fg:x="2577" fg:w="3"/><text x="74.7513%" y="1679.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.03%)</title><rect x="74.5880%" y="1845" width="0.0289%" height="15" fill="rgb(216,220,45)" fg:x="2580" fg:w="1"/><text x="74.8380%" y="1855.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;redis::types::Value&gt;&gt; (1 samples, 0.03%)</title><rect x="74.5880%" y="1829" width="0.0289%" height="15" fill="rgb(234,112,18)" fg:x="2580" fg:w="1"/><text x="74.8380%" y="1839.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="74.5880%" y="1813" width="0.0289%" height="15" fill="rgb(206,179,9)" fg:x="2580" fg:w="1"/><text x="74.8380%" y="1823.50"></text></g><g><title>core::ptr::drop_in_place&lt;[redis::types::Value]&gt; (1 samples, 0.03%)</title><rect x="74.5880%" y="1797" width="0.0289%" height="15" fill="rgb(215,115,40)" fg:x="2580" fg:w="1"/><text x="74.8380%" y="1807.50"></text></g><g><title>core::ptr::drop_in_place&lt;redis::types::Value&gt; (1 samples, 0.03%)</title><rect x="74.5880%" y="1781" width="0.0289%" height="15" fill="rgb(222,69,34)" fg:x="2580" fg:w="1"/><text x="74.8380%" y="1791.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.09%)</title><rect x="74.9639%" y="1749" width="0.0867%" height="15" fill="rgb(209,161,10)" fg:x="2593" fg:w="3"/><text x="75.2139%" y="1759.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.09%)</title><rect x="74.9639%" y="1733" width="0.0867%" height="15" fill="rgb(217,6,38)" fg:x="2593" fg:w="3"/><text x="75.2139%" y="1743.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.09%)</title><rect x="74.9639%" y="1717" width="0.0867%" height="15" fill="rgb(229,229,48)" fg:x="2593" fg:w="3"/><text x="75.2139%" y="1727.50"></text></g><g><title>realloc (3 samples, 0.09%)</title><rect x="74.9639%" y="1701" width="0.0867%" height="15" fill="rgb(225,21,28)" fg:x="2593" fg:w="3"/><text x="75.2139%" y="1711.50"></text></g><g><title>[libc.so.6] (2 samples, 0.06%)</title><rect x="74.9928%" y="1685" width="0.0578%" height="15" fill="rgb(206,33,13)" fg:x="2594" fg:w="2"/><text x="75.2428%" y="1695.50"></text></g><g><title>[libc.so.6] (2 samples, 0.06%)</title><rect x="74.9928%" y="1669" width="0.0578%" height="15" fill="rgb(242,178,17)" fg:x="2594" fg:w="2"/><text x="75.2428%" y="1679.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.12%)</title><rect x="74.9639%" y="1797" width="0.1156%" height="15" fill="rgb(220,162,5)" fg:x="2593" fg:w="4"/><text x="75.2139%" y="1807.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.12%)</title><rect x="74.9639%" y="1781" width="0.1156%" height="15" fill="rgb(210,33,43)" fg:x="2593" fg:w="4"/><text x="75.2139%" y="1791.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.12%)</title><rect x="74.9639%" y="1765" width="0.1156%" height="15" fill="rgb(216,116,54)" fg:x="2593" fg:w="4"/><text x="75.2139%" y="1775.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="75.0506%" y="1749" width="0.0289%" height="15" fill="rgb(249,92,24)" fg:x="2596" fg:w="1"/><text x="75.3006%" y="1759.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5 samples, 0.14%)</title><rect x="74.9639%" y="1813" width="0.1446%" height="15" fill="rgb(231,189,14)" fg:x="2593" fg:w="5"/><text x="75.2139%" y="1823.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="75.0795%" y="1797" width="0.0289%" height="15" fill="rgb(230,8,41)" fg:x="2597" fg:w="1"/><text x="75.3295%" y="1807.50"></text></g><g><title>&lt;combine::stream::buf_reader::Buffer as combine::stream::buf_reader::CombineBuffer&lt;R&gt;&gt;::buffer (1 samples, 0.03%)</title><rect x="75.3975%" y="1781" width="0.0289%" height="15" fill="rgb(249,7,27)" fg:x="2608" fg:w="1"/><text x="75.6475%" y="1791.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="75.3975%" y="1765" width="0.0289%" height="15" fill="rgb(232,86,5)" fg:x="2608" fg:w="1"/><text x="75.6475%" y="1775.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::convert::AsRef&lt;[u8]&gt;&gt;::as_ref (1 samples, 0.03%)</title><rect x="75.3975%" y="1749" width="0.0289%" height="15" fill="rgb(224,175,18)" fg:x="2608" fg:w="1"/><text x="75.6475%" y="1759.50"></text></g><g><title>bytes::bytes_mut::BytesMut::as_slice (1 samples, 0.03%)</title><rect x="75.3975%" y="1733" width="0.0289%" height="15" fill="rgb(220,129,12)" fg:x="2608" fg:w="1"/><text x="75.6475%" y="1743.50"></text></g><g><title>&lt;std::io::error::Error as core::convert::From&lt;std::io::error::ErrorKind&gt;&gt;::from (1 samples, 0.03%)</title><rect x="75.4264%" y="1781" width="0.0289%" height="15" fill="rgb(210,19,36)" fg:x="2609" fg:w="1"/><text x="75.6764%" y="1791.50"></text></g><g><title>std::io::error::repr_bitpacked::Repr::new_simple (1 samples, 0.03%)</title><rect x="75.4264%" y="1765" width="0.0289%" height="15" fill="rgb(219,96,14)" fg:x="2609" fg:w="1"/><text x="75.6764%" y="1775.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.03%)</title><rect x="75.4264%" y="1749" width="0.0289%" height="15" fill="rgb(249,106,1)" fg:x="2609" fg:w="1"/><text x="75.6764%" y="1759.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::runtime (1 samples, 0.03%)</title><rect x="75.4264%" y="1733" width="0.0289%" height="15" fill="rgb(249,155,20)" fg:x="2609" fg:w="1"/><text x="75.6764%" y="1743.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.03%)</title><rect x="75.4264%" y="1717" width="0.0289%" height="15" fill="rgb(244,168,9)" fg:x="2609" fg:w="1"/><text x="75.6764%" y="1727.50"></text></g><g><title>combine::stream::call_with2 (1 samples, 0.03%)</title><rect x="75.4553%" y="1781" width="0.0289%" height="15" fill="rgb(216,23,50)" fg:x="2610" fg:w="1"/><text x="75.7053%" y="1791.50"></text></g><g><title>redis::parser::Parser::parse_value::{{closure}} (1 samples, 0.03%)</title><rect x="75.4553%" y="1765" width="0.0289%" height="15" fill="rgb(224,219,20)" fg:x="2610" fg:w="1"/><text x="75.7053%" y="1775.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as core::convert::From&lt;S&gt;&gt;::from (1 samples, 0.03%)</title><rect x="75.4553%" y="1749" width="0.0289%" height="15" fill="rgb(222,156,15)" fg:x="2610" fg:w="1"/><text x="75.7053%" y="1759.50"></text></g><g><title>&lt;combine::stream::easy::Errors&lt;Item,Range,Position&gt; as combine::error::ParseError&lt;Item,Range,Position&gt;&gt;::is_unexpected_end_of_input (2 samples, 0.06%)</title><rect x="75.6866%" y="1765" width="0.0578%" height="15" fill="rgb(231,97,17)" fg:x="2618" fg:w="2"/><text x="75.9366%" y="1775.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (2 samples, 0.06%)</title><rect x="75.6866%" y="1749" width="0.0578%" height="15" fill="rgb(218,70,48)" fg:x="2618" fg:w="2"/><text x="75.9366%" y="1759.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2 samples, 0.06%)</title><rect x="75.6866%" y="1733" width="0.0578%" height="15" fill="rgb(212,196,52)" fg:x="2618" fg:w="2"/><text x="75.9366%" y="1743.50"></text></g><g><title>&lt;combine::stream::easy::Error&lt;Item,Range&gt; as combine::error::StreamError&lt;Item,Range&gt;&gt;::is_unexpected_end_of_input (2 samples, 0.06%)</title><rect x="75.6866%" y="1717" width="0.0578%" height="15" fill="rgb(243,203,18)" fg:x="2618" fg:w="2"/><text x="75.9366%" y="1727.50"></text></g><g><title>&lt;combine::stream::easy::Error&lt;T,R&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.06%)</title><rect x="75.6866%" y="1701" width="0.0578%" height="15" fill="rgb(252,125,41)" fg:x="2618" fg:w="2"/><text x="75.9366%" y="1711.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.03%)</title><rect x="75.7155%" y="1685" width="0.0289%" height="15" fill="rgb(223,180,33)" fg:x="2619" fg:w="1"/><text x="75.9655%" y="1695.50"></text></g><g><title>&lt;combine::stream::easy::Info&lt;T,R&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.03%)</title><rect x="75.7155%" y="1669" width="0.0289%" height="15" fill="rgb(254,159,46)" fg:x="2619" fg:w="1"/><text x="75.9655%" y="1679.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (4 samples, 0.12%)</title><rect x="75.9757%" y="1669" width="0.1156%" height="15" fill="rgb(254,38,10)" fg:x="2628" fg:w="4"/><text x="76.2257%" y="1679.50"></text></g><g><title>&lt;dyn core::any::Any+core::marker::Send+core::marker::Sync&gt;::downcast_mut (1 samples, 0.03%)</title><rect x="76.4961%" y="1605" width="0.0289%" height="15" fill="rgb(208,217,32)" fg:x="2646" fg:w="1"/><text x="76.7461%" y="1615.50"></text></g><g><title>&lt;dyn core::any::Any&gt;::downcast_mut (1 samples, 0.03%)</title><rect x="76.4961%" y="1589" width="0.0289%" height="15" fill="rgb(221,120,13)" fg:x="2646" fg:w="1"/><text x="76.7461%" y="1599.50"></text></g><g><title>&lt;dyn core::any::Any&gt;::is (1 samples, 0.03%)</title><rect x="76.4961%" y="1573" width="0.0289%" height="15" fill="rgb(246,54,52)" fg:x="2646" fg:w="1"/><text x="76.7461%" y="1583.50"></text></g><g><title>&lt;T as core::any::Any&gt;::type_id (1 samples, 0.03%)</title><rect x="76.4961%" y="1557" width="0.0289%" height="15" fill="rgb(242,34,25)" fg:x="2646" fg:w="1"/><text x="76.7461%" y="1567.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::Positioned&gt;::position (1 samples, 0.03%)</title><rect x="77.5947%" y="1333" width="0.0289%" height="15" fill="rgb(247,209,9)" fg:x="2684" fg:w="1"/><text x="77.8447%" y="1343.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::ResetStream&gt;::reset (1 samples, 0.03%)</title><rect x="77.7103%" y="1221" width="0.0289%" height="15" fill="rgb(228,71,26)" fg:x="2688" fg:w="1"/><text x="77.9603%" y="1231.50"></text></g><g><title>&lt;combine::stream::MaybePartialStream&lt;S&gt; as combine::stream::ResetStream&gt;::reset (1 samples, 0.03%)</title><rect x="77.7103%" y="1205" width="0.0289%" height="15" fill="rgb(222,145,49)" fg:x="2688" fg:w="1"/><text x="77.9603%" y="1215.50"></text></g><g><title>&lt;&amp;[T] as combine::stream::ResetStream&gt;::reset (1 samples, 0.03%)</title><rect x="77.7103%" y="1189" width="0.0289%" height="15" fill="rgb(218,121,17)" fg:x="2688" fg:w="1"/><text x="77.9603%" y="1199.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (3 samples, 0.09%)</title><rect x="77.9127%" y="821" width="0.0867%" height="15" fill="rgb(244,50,7)" fg:x="2695" fg:w="3"/><text x="78.1627%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.09%)</title><rect x="77.9127%" y="805" width="0.0867%" height="15" fill="rgb(246,229,37)" fg:x="2695" fg:w="3"/><text x="78.1627%" y="815.50"></text></g><g><title>memchr::arch::generic::memchr::fwd_byte_by_byte (1 samples, 0.03%)</title><rect x="78.0572%" y="789" width="0.0289%" height="15" fill="rgb(225,18,5)" fg:x="2700" fg:w="1"/><text x="78.3072%" y="799.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw::{{closure}} (1 samples, 0.03%)</title><rect x="78.0572%" y="773" width="0.0289%" height="15" fill="rgb(213,204,8)" fg:x="2700" fg:w="1"/><text x="78.3072%" y="783.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (1 samples, 0.03%)</title><rect x="78.0862%" y="789" width="0.0289%" height="15" fill="rgb(238,103,6)" fg:x="2701" fg:w="1"/><text x="78.3362%" y="799.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (1 samples, 0.03%)</title><rect x="78.0862%" y="773" width="0.0289%" height="15" fill="rgb(222,25,35)" fg:x="2701" fg:w="1"/><text x="78.3362%" y="783.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (1 samples, 0.03%)</title><rect x="78.0862%" y="757" width="0.0289%" height="15" fill="rgb(213,203,35)" fg:x="2701" fg:w="1"/><text x="78.3362%" y="767.50"></text></g><g><title>memchr::vector::x86avx2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m256i&gt;::movemask (1 samples, 0.03%)</title><rect x="78.0862%" y="741" width="0.0289%" height="15" fill="rgb(221,79,53)" fg:x="2701" fg:w="1"/><text x="78.3362%" y="751.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (1 samples, 0.03%)</title><rect x="78.0862%" y="725" width="0.0289%" height="15" fill="rgb(243,200,35)" fg:x="2701" fg:w="1"/><text x="78.3362%" y="735.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (7 samples, 0.20%)</title><rect x="77.9994%" y="805" width="0.2024%" height="15" fill="rgb(248,60,25)" fg:x="2698" fg:w="7"/><text x="78.2494%" y="815.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_sse2 (3 samples, 0.09%)</title><rect x="78.1151%" y="789" width="0.0867%" height="15" fill="rgb(227,53,46)" fg:x="2702" fg:w="3"/><text x="78.3651%" y="799.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (3 samples, 0.09%)</title><rect x="78.1151%" y="773" width="0.0867%" height="15" fill="rgb(216,120,32)" fg:x="2702" fg:w="3"/><text x="78.3651%" y="783.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (1 samples, 0.03%)</title><rect x="78.1729%" y="757" width="0.0289%" height="15" fill="rgb(220,134,1)" fg:x="2704" fg:w="1"/><text x="78.4229%" y="767.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (1 samples, 0.03%)</title><rect x="78.1729%" y="741" width="0.0289%" height="15" fill="rgb(237,168,5)" fg:x="2704" fg:w="1"/><text x="78.4229%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.03%)</title><rect x="78.1729%" y="725" width="0.0289%" height="15" fill="rgb(231,100,33)" fg:x="2704" fg:w="1"/><text x="78.4229%" y="735.50"></text></g><g><title>&lt;memchr::memchr::Memchr as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.40%)</title><rect x="77.9127%" y="901" width="0.4047%" height="15" fill="rgb(236,177,47)" fg:x="2695" fg:w="14"/><text x="78.1627%" y="911.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (14 samples, 0.40%)</title><rect x="77.9127%" y="885" width="0.4047%" height="15" fill="rgb(235,7,49)" fg:x="2695" fg:w="14"/><text x="78.1627%" y="895.50"></text></g><g><title>&lt;memchr::memchr::Memchr as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (14 samples, 0.40%)</title><rect x="77.9127%" y="869" width="0.4047%" height="15" fill="rgb(232,119,22)" fg:x="2695" fg:w="14"/><text x="78.1627%" y="879.50"></text></g><g><title>memchr::memchr::memchr_raw (14 samples, 0.40%)</title><rect x="77.9127%" y="853" width="0.4047%" height="15" fill="rgb(254,73,53)" fg:x="2695" fg:w="14"/><text x="78.1627%" y="863.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (14 samples, 0.40%)</title><rect x="77.9127%" y="837" width="0.4047%" height="15" fill="rgb(251,35,20)" fg:x="2695" fg:w="14"/><text x="78.1627%" y="847.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (11 samples, 0.32%)</title><rect x="77.9994%" y="821" width="0.3180%" height="15" fill="rgb(241,119,20)" fg:x="2698" fg:w="11"/><text x="78.2494%" y="831.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::new_unchecked (4 samples, 0.12%)</title><rect x="78.2018%" y="805" width="0.1156%" height="15" fill="rgb(207,102,14)" fg:x="2705" fg:w="4"/><text x="78.4518%" y="815.50"></text></g><g><title>&lt;combine::parser::byte::take_until_bytes&lt;Input&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl::{{closure}} (21 samples, 0.61%)</title><rect x="77.8549%" y="933" width="0.6071%" height="15" fill="rgb(248,201,50)" fg:x="2693" fg:w="21"/><text x="78.1049%" y="943.50"></text></g><g><title>combine::parser::byte::memslice (21 samples, 0.61%)</title><rect x="77.8549%" y="917" width="0.6071%" height="15" fill="rgb(222,185,44)" fg:x="2693" fg:w="21"/><text x="78.1049%" y="927.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (5 samples, 0.14%)</title><rect x="78.3174%" y="901" width="0.1446%" height="15" fill="rgb(218,107,18)" fg:x="2709" fg:w="5"/><text x="78.5674%" y="911.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.14%)</title><rect x="78.3174%" y="885" width="0.1446%" height="15" fill="rgb(237,177,39)" fg:x="2709" fg:w="5"/><text x="78.5674%" y="895.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (5 samples, 0.14%)</title><rect x="78.3174%" y="869" width="0.1446%" height="15" fill="rgb(246,69,6)" fg:x="2709" fg:w="5"/><text x="78.5674%" y="879.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (5 samples, 0.14%)</title><rect x="78.3174%" y="853" width="0.1446%" height="15" fill="rgb(234,208,37)" fg:x="2709" fg:w="5"/><text x="78.5674%" y="863.50"></text></g><g><title>[libc.so.6] (5 samples, 0.14%)</title><rect x="78.3174%" y="837" width="0.1446%" height="15" fill="rgb(225,4,6)" fg:x="2709" fg:w="5"/><text x="78.5674%" y="847.50"></text></g><g><title>&lt;combine::parser::combinator::Ignore&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (25 samples, 0.72%)</title><rect x="77.8260%" y="1013" width="0.7228%" height="15" fill="rgb(233,45,0)" fg:x="2692" fg:w="25"/><text x="78.0760%" y="1023.50"></text></g><g><title>combine::parser::Parser::parse_mode (25 samples, 0.72%)</title><rect x="77.8260%" y="997" width="0.7228%" height="15" fill="rgb(226,136,5)" fg:x="2692" fg:w="25"/><text x="78.0760%" y="1007.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (25 samples, 0.72%)</title><rect x="77.8260%" y="981" width="0.7228%" height="15" fill="rgb(211,91,47)" fg:x="2692" fg:w="25"/><text x="78.0760%" y="991.50"></text></g><g><title>&lt;combine::parser::byte::take_until_bytes&lt;Input&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (25 samples, 0.72%)</title><rect x="77.8260%" y="965" width="0.7228%" height="15" fill="rgb(242,88,51)" fg:x="2692" fg:w="25"/><text x="78.0760%" y="975.50"></text></g><g><title>&lt;combine::parser::range::TakeFn&lt;F,Input&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (25 samples, 0.72%)</title><rect x="77.8260%" y="949" width="0.7228%" height="15" fill="rgb(230,91,28)" fg:x="2692" fg:w="25"/><text x="78.0760%" y="959.50"></text></g><g><title>combine::stream::uncons_range (3 samples, 0.09%)</title><rect x="78.4620%" y="933" width="0.0867%" height="15" fill="rgb(254,186,29)" fg:x="2714" fg:w="3"/><text x="78.7120%" y="943.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::RangeStreamOnce&gt;::uncons_range (3 samples, 0.09%)</title><rect x="78.4620%" y="917" width="0.0867%" height="15" fill="rgb(238,6,4)" fg:x="2714" fg:w="3"/><text x="78.7120%" y="927.50"></text></g><g><title>&lt;combine::stream::MaybePartialStream&lt;S&gt; as combine::stream::RangeStreamOnce&gt;::uncons_range (3 samples, 0.09%)</title><rect x="78.4620%" y="901" width="0.0867%" height="15" fill="rgb(221,151,16)" fg:x="2714" fg:w="3"/><text x="78.7120%" y="911.50"></text></g><g><title>&lt;&amp;[T] as combine::stream::RangeStreamOnce&gt;::uncons_range (3 samples, 0.09%)</title><rect x="78.4620%" y="885" width="0.0867%" height="15" fill="rgb(251,143,52)" fg:x="2714" fg:w="3"/><text x="78.7120%" y="895.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.06%)</title><rect x="78.4909%" y="869" width="0.0578%" height="15" fill="rgb(206,90,15)" fg:x="2715" fg:w="2"/><text x="78.7409%" y="879.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (2 samples, 0.06%)</title><rect x="78.4909%" y="853" width="0.0578%" height="15" fill="rgb(218,35,8)" fg:x="2715" fg:w="2"/><text x="78.7409%" y="863.50"></text></g><g><title>combine::parser::Parser::parse_mode (34 samples, 0.98%)</title><rect x="77.6236%" y="1333" width="0.9829%" height="15" fill="rgb(239,215,6)" fg:x="2685" fg:w="34"/><text x="77.8736%" y="1343.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (34 samples, 0.98%)</title><rect x="77.6236%" y="1317" width="0.9829%" height="15" fill="rgb(245,116,39)" fg:x="2685" fg:w="34"/><text x="77.8736%" y="1327.50"></text></g><g><title>&lt;combine::parser::range::Recognize&lt;Input,P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (34 samples, 0.98%)</title><rect x="77.6236%" y="1301" width="0.9829%" height="15" fill="rgb(242,65,28)" fg:x="2685" fg:w="34"/><text x="77.8736%" y="1311.50"></text></g><g><title>combine::parser::Parser::parse_mode (32 samples, 0.93%)</title><rect x="77.6814%" y="1285" width="0.9251%" height="15" fill="rgb(252,132,53)" fg:x="2687" fg:w="32"/><text x="77.9314%" y="1295.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (32 samples, 0.93%)</title><rect x="77.6814%" y="1269" width="0.9251%" height="15" fill="rgb(224,159,50)" fg:x="2687" fg:w="32"/><text x="77.9314%" y="1279.50"></text></g><g><title>&lt;combine::parser::combinator::Map&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (32 samples, 0.93%)</title><rect x="77.6814%" y="1253" width="0.9251%" height="15" fill="rgb(224,93,4)" fg:x="2687" fg:w="32"/><text x="77.9314%" y="1263.50"></text></g><g><title>&lt;combine::parser::range::RecognizeWithValue&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (31 samples, 0.90%)</title><rect x="77.7103%" y="1237" width="0.8962%" height="15" fill="rgb(208,81,34)" fg:x="2688" fg:w="31"/><text x="77.9603%" y="1247.50"></text></g><g><title>combine::parser::Parser::parse_mode (30 samples, 0.87%)</title><rect x="77.7392%" y="1221" width="0.8673%" height="15" fill="rgb(233,92,54)" fg:x="2689" fg:w="30"/><text x="77.9892%" y="1231.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (30 samples, 0.87%)</title><rect x="77.7392%" y="1205" width="0.8673%" height="15" fill="rgb(237,21,14)" fg:x="2689" fg:w="30"/><text x="77.9892%" y="1215.50"></text></g><g><title>combine::parser::Parser::parse_mode_impl (30 samples, 0.87%)</title><rect x="77.7392%" y="1189" width="0.8673%" height="15" fill="rgb(249,128,51)" fg:x="2689" fg:w="30"/><text x="77.9892%" y="1199.50"></text></g><g><title>&lt;&amp;mut P as combine::parser::Parser&lt;Input&gt;&gt;::parse_first (30 samples, 0.87%)</title><rect x="77.7392%" y="1173" width="0.8673%" height="15" fill="rgb(223,129,24)" fg:x="2689" fg:w="30"/><text x="77.9892%" y="1183.50"></text></g><g><title>&lt;combine::parser::sequence::With&lt;P1,P2&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_first (30 samples, 0.87%)</title><rect x="77.7392%" y="1157" width="0.8673%" height="15" fill="rgb(231,168,25)" fg:x="2689" fg:w="30"/><text x="77.9892%" y="1167.50"></text></g><g><title>combine::parser::Parser::parse_mode (30 samples, 0.87%)</title><rect x="77.7392%" y="1141" width="0.8673%" height="15" fill="rgb(224,39,20)" fg:x="2689" fg:w="30"/><text x="77.9892%" y="1151.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (30 samples, 0.87%)</title><rect x="77.7392%" y="1125" width="0.8673%" height="15" fill="rgb(225,152,53)" fg:x="2689" fg:w="30"/><text x="77.9892%" y="1135.50"></text></g><g><title>&lt;combine::parser::sequence::With&lt;P1,P2&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (30 samples, 0.87%)</title><rect x="77.7392%" y="1109" width="0.8673%" height="15" fill="rgb(252,17,24)" fg:x="2689" fg:w="30"/><text x="77.9892%" y="1119.50"></text></g><g><title>combine::parser::Parser::parse_mode (30 samples, 0.87%)</title><rect x="77.7392%" y="1093" width="0.8673%" height="15" fill="rgb(250,114,30)" fg:x="2689" fg:w="30"/><text x="77.9892%" y="1103.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (30 samples, 0.87%)</title><rect x="77.7392%" y="1077" width="0.8673%" height="15" fill="rgb(229,5,4)" fg:x="2689" fg:w="30"/><text x="77.9892%" y="1087.50"></text></g><g><title>combine::parser::sequence::&lt;impl combine::parser::Parser&lt;Input&gt; for (A,B)&gt;::parse_mode_impl (30 samples, 0.87%)</title><rect x="77.7392%" y="1061" width="0.8673%" height="15" fill="rgb(225,176,49)" fg:x="2689" fg:w="30"/><text x="77.9892%" y="1071.50"></text></g><g><title>combine::parser::Parser::parse_mode (27 samples, 0.78%)</title><rect x="77.8260%" y="1045" width="0.7806%" height="15" fill="rgb(224,221,49)" fg:x="2692" fg:w="27"/><text x="78.0760%" y="1055.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (27 samples, 0.78%)</title><rect x="77.8260%" y="1029" width="0.7806%" height="15" fill="rgb(253,169,27)" fg:x="2692" fg:w="27"/><text x="78.0760%" y="1039.50"></text></g><g><title>&lt;combine::parser::combinator::Map&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (2 samples, 0.06%)</title><rect x="78.5487%" y="1013" width="0.0578%" height="15" fill="rgb(211,206,16)" fg:x="2717" fg:w="2"/><text x="78.7987%" y="1023.50"></text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.06%)</title><rect x="78.5487%" y="997" width="0.0578%" height="15" fill="rgb(244,87,35)" fg:x="2717" fg:w="2"/><text x="78.7987%" y="1007.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (2 samples, 0.06%)</title><rect x="78.5487%" y="981" width="0.0578%" height="15" fill="rgb(246,28,10)" fg:x="2717" fg:w="2"/><text x="78.7987%" y="991.50"></text></g><g><title>combine::parser::Parser::parse_mode_impl (2 samples, 0.06%)</title><rect x="78.5487%" y="965" width="0.0578%" height="15" fill="rgb(229,12,44)" fg:x="2717" fg:w="2"/><text x="78.7987%" y="975.50"></text></g><g><title>combine::parser::Parser::parse_first (2 samples, 0.06%)</title><rect x="78.5487%" y="949" width="0.0578%" height="15" fill="rgb(210,145,37)" fg:x="2717" fg:w="2"/><text x="78.7987%" y="959.50"></text></g><g><title>combine::parser::Parser::parse_partial (2 samples, 0.06%)</title><rect x="78.5487%" y="933" width="0.0578%" height="15" fill="rgb(227,112,52)" fg:x="2717" fg:w="2"/><text x="78.7987%" y="943.50"></text></g><g><title>&lt;combine::parser::range::Take&lt;Input&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_lazy (2 samples, 0.06%)</title><rect x="78.5487%" y="917" width="0.0578%" height="15" fill="rgb(238,155,34)" fg:x="2717" fg:w="2"/><text x="78.7987%" y="927.50"></text></g><g><title>combine::stream::uncons_range (2 samples, 0.06%)</title><rect x="78.5487%" y="901" width="0.0578%" height="15" fill="rgb(239,226,36)" fg:x="2717" fg:w="2"/><text x="78.7987%" y="911.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (8 samples, 0.23%)</title><rect x="78.6065%" y="1317" width="0.2313%" height="15" fill="rgb(230,16,23)" fg:x="2719" fg:w="8"/><text x="78.8565%" y="1327.50"></text></g><g><title>combine::parser::Parser::parse_mode (45 samples, 1.30%)</title><rect x="77.5947%" y="1381" width="1.3010%" height="15" fill="rgb(236,171,36)" fg:x="2684" fg:w="45"/><text x="77.8447%" y="1391.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (45 samples, 1.30%)</title><rect x="77.5947%" y="1365" width="1.3010%" height="15" fill="rgb(221,22,14)" fg:x="2684" fg:w="45"/><text x="77.8447%" y="1375.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (45 samples, 1.30%)</title><rect x="77.5947%" y="1349" width="1.3010%" height="15" fill="rgb(242,43,11)" fg:x="2684" fg:w="45"/><text x="77.8447%" y="1359.50"></text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (10 samples, 0.29%)</title><rect x="78.6065%" y="1333" width="0.2891%" height="15" fill="rgb(232,69,23)" fg:x="2719" fg:w="10"/><text x="78.8565%" y="1343.50"></text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.06%)</title><rect x="78.8378%" y="1317" width="0.0578%" height="15" fill="rgb(216,180,54)" fg:x="2727" fg:w="2"/><text x="79.0878%" y="1327.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="78.9245%" y="1317" width="0.0289%" height="15" fill="rgb(216,5,24)" fg:x="2730" fg:w="1"/><text x="79.1745%" y="1327.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (3 samples, 0.09%)</title><rect x="78.8956%" y="1365" width="0.0867%" height="15" fill="rgb(225,89,9)" fg:x="2729" fg:w="3"/><text x="79.1456%" y="1375.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for i64&gt;::from_str (3 samples, 0.09%)</title><rect x="78.8956%" y="1349" width="0.0867%" height="15" fill="rgb(243,75,33)" fg:x="2729" fg:w="3"/><text x="79.1456%" y="1359.50"></text></g><g><title>core::num::from_str_radix (2 samples, 0.06%)</title><rect x="78.9245%" y="1333" width="0.0578%" height="15" fill="rgb(247,141,45)" fg:x="2730" fg:w="2"/><text x="79.1745%" y="1343.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (1 samples, 0.03%)</title><rect x="78.9535%" y="1317" width="0.0289%" height="15" fill="rgb(232,177,36)" fg:x="2731" fg:w="1"/><text x="79.2035%" y="1327.50"></text></g><g><title>core::ops::range::RangeBounds::contains (1 samples, 0.03%)</title><rect x="78.9535%" y="1301" width="0.0289%" height="15" fill="rgb(219,125,36)" fg:x="2731" fg:w="1"/><text x="79.2035%" y="1311.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::ReverseSearcher&gt;::next_reject_back (1 samples, 0.03%)</title><rect x="79.0402%" y="1333" width="0.0289%" height="15" fill="rgb(227,94,9)" fg:x="2734" fg:w="1"/><text x="79.2902%" y="1343.50"></text></g><g><title>core::str::pattern::ReverseSearcher::next_reject_back (1 samples, 0.03%)</title><rect x="79.0402%" y="1317" width="0.0289%" height="15" fill="rgb(240,34,52)" fg:x="2734" fg:w="1"/><text x="79.2902%" y="1327.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::ReverseSearcher&gt;::next_back (1 samples, 0.03%)</title><rect x="79.0402%" y="1301" width="0.0289%" height="15" fill="rgb(216,45,12)" fg:x="2734" fg:w="1"/><text x="79.2902%" y="1311.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1 samples, 0.03%)</title><rect x="79.0402%" y="1285" width="0.0289%" height="15" fill="rgb(246,21,19)" fg:x="2734" fg:w="1"/><text x="79.2902%" y="1295.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1 samples, 0.03%)</title><rect x="79.0402%" y="1269" width="0.0289%" height="15" fill="rgb(213,98,42)" fg:x="2734" fg:w="1"/><text x="79.2902%" y="1279.50"></text></g><g><title>core::str::validations::next_code_point_reverse (1 samples, 0.03%)</title><rect x="79.0402%" y="1253" width="0.0289%" height="15" fill="rgb(250,136,47)" fg:x="2734" fg:w="1"/><text x="79.2902%" y="1263.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1 samples, 0.03%)</title><rect x="79.0402%" y="1237" width="0.0289%" height="15" fill="rgb(251,124,27)" fg:x="2734" fg:w="1"/><text x="79.2902%" y="1247.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (1 samples, 0.03%)</title><rect x="79.0980%" y="1285" width="0.0289%" height="15" fill="rgb(229,180,14)" fg:x="2736" fg:w="1"/><text x="79.3480%" y="1295.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim::{{closure}} (1 samples, 0.03%)</title><rect x="79.0980%" y="1269" width="0.0289%" height="15" fill="rgb(245,216,25)" fg:x="2736" fg:w="1"/><text x="79.3480%" y="1279.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (1 samples, 0.03%)</title><rect x="79.0980%" y="1253" width="0.0289%" height="15" fill="rgb(251,43,5)" fg:x="2736" fg:w="1"/><text x="79.3480%" y="1263.50"></text></g><g><title>combine::parser::Parser::parse_committed_mode (79 samples, 2.28%)</title><rect x="76.9587%" y="1557" width="2.2839%" height="15" fill="rgb(250,128,24)" fg:x="2662" fg:w="79"/><text x="77.2087%" y="1567.50">c..</text></g><g><title>combine::parser::ParseMode::parse_committed (78 samples, 2.25%)</title><rect x="76.9876%" y="1541" width="2.2550%" height="15" fill="rgb(217,117,27)" fg:x="2663" fg:w="78"/><text x="77.2376%" y="1551.50">c..</text></g><g><title>combine::parser::Parser::parse_mode_impl (70 samples, 2.02%)</title><rect x="77.2188%" y="1525" width="2.0237%" height="15" fill="rgb(245,147,4)" fg:x="2671" fg:w="70"/><text x="77.4688%" y="1535.50">c..</text></g><g><title>&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;A,B,C,D,E,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_first (70 samples, 2.02%)</title><rect x="77.2188%" y="1509" width="2.0237%" height="15" fill="rgb(242,201,35)" fg:x="2671" fg:w="70"/><text x="77.4688%" y="1519.50">&lt;..</text></g><g><title>&lt;redis::parser::value::{{closure}}::{{closure}}::Dispatch&lt;A,B,C,D,E,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (70 samples, 2.02%)</title><rect x="77.2188%" y="1493" width="2.0237%" height="15" fill="rgb(218,181,1)" fg:x="2671" fg:w="70"/><text x="77.4688%" y="1503.50">&lt;..</text></g><g><title>combine::parser::Parser::parse_mode (67 samples, 1.94%)</title><rect x="77.3056%" y="1477" width="1.9370%" height="15" fill="rgb(222,6,29)" fg:x="2674" fg:w="67"/><text x="77.5556%" y="1487.50">c..</text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (67 samples, 1.94%)</title><rect x="77.3056%" y="1461" width="1.9370%" height="15" fill="rgb(208,186,3)" fg:x="2674" fg:w="67"/><text x="77.5556%" y="1471.50">&lt;..</text></g><g><title>&lt;combine::parser::combinator::Map&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (67 samples, 1.94%)</title><rect x="77.3056%" y="1445" width="1.9370%" height="15" fill="rgb(216,36,26)" fg:x="2674" fg:w="67"/><text x="77.5556%" y="1455.50">&lt;..</text></g><g><title>combine::parser::Parser::parse_mode (63 samples, 1.82%)</title><rect x="77.4212%" y="1429" width="1.8213%" height="15" fill="rgb(248,201,23)" fg:x="2678" fg:w="63"/><text x="77.6712%" y="1439.50">c..</text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (63 samples, 1.82%)</title><rect x="77.4212%" y="1413" width="1.8213%" height="15" fill="rgb(251,170,31)" fg:x="2678" fg:w="63"/><text x="77.6712%" y="1423.50">&lt;..</text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (63 samples, 1.82%)</title><rect x="77.4212%" y="1397" width="1.8213%" height="15" fill="rgb(207,110,25)" fg:x="2678" fg:w="63"/><text x="77.6712%" y="1407.50">&lt;..</text></g><g><title>redis::parser::value::{{closure}}::{{closure}}::{{closure}}::{{closure}} (12 samples, 0.35%)</title><rect x="78.8956%" y="1381" width="0.3469%" height="15" fill="rgb(250,54,15)" fg:x="2729" fg:w="12"/><text x="79.1456%" y="1391.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim (9 samples, 0.26%)</title><rect x="78.9824%" y="1365" width="0.2602%" height="15" fill="rgb(227,68,33)" fg:x="2732" fg:w="9"/><text x="79.2324%" y="1375.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (7 samples, 0.20%)</title><rect x="79.0402%" y="1349" width="0.2024%" height="15" fill="rgb(238,34,41)" fg:x="2734" fg:w="7"/><text x="79.2902%" y="1359.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_reject (6 samples, 0.17%)</title><rect x="79.0691%" y="1333" width="0.1735%" height="15" fill="rgb(220,11,15)" fg:x="2735" fg:w="6"/><text x="79.3191%" y="1343.50"></text></g><g><title>core::str::pattern::Searcher::next_reject (6 samples, 0.17%)</title><rect x="79.0691%" y="1317" width="0.1735%" height="15" fill="rgb(246,111,35)" fg:x="2735" fg:w="6"/><text x="79.3191%" y="1327.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (6 samples, 0.17%)</title><rect x="79.0691%" y="1301" width="0.1735%" height="15" fill="rgb(209,88,53)" fg:x="2735" fg:w="6"/><text x="79.3191%" y="1311.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.12%)</title><rect x="79.1269%" y="1285" width="0.1156%" height="15" fill="rgb(231,185,47)" fg:x="2737" fg:w="4"/><text x="79.3769%" y="1295.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.12%)</title><rect x="79.1269%" y="1269" width="0.1156%" height="15" fill="rgb(233,154,1)" fg:x="2737" fg:w="4"/><text x="79.3769%" y="1279.50"></text></g><g><title>core::str::validations::next_code_point (4 samples, 0.12%)</title><rect x="79.1269%" y="1253" width="0.1156%" height="15" fill="rgb(225,15,46)" fg:x="2737" fg:w="4"/><text x="79.3769%" y="1263.50"></text></g><g><title>combine::parser::Parser::parse_committed_mode (3 samples, 0.09%)</title><rect x="79.2715%" y="1509" width="0.0867%" height="15" fill="rgb(211,135,41)" fg:x="2742" fg:w="3"/><text x="79.5215%" y="1519.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (3 samples, 0.09%)</title><rect x="79.2715%" y="1493" width="0.0867%" height="15" fill="rgb(208,54,0)" fg:x="2742" fg:w="3"/><text x="79.5215%" y="1503.50"></text></g><g><title>&lt;combine::parser::combinator::Either&lt;L,R&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (2 samples, 0.06%)</title><rect x="79.3004%" y="1477" width="0.0578%" height="15" fill="rgb(244,136,14)" fg:x="2743" fg:w="2"/><text x="79.5504%" y="1487.50"></text></g><g><title>combine::parser::Parser::parse_mode (2 samples, 0.06%)</title><rect x="79.3004%" y="1461" width="0.0578%" height="15" fill="rgb(241,56,14)" fg:x="2743" fg:w="2"/><text x="79.5504%" y="1471.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (2 samples, 0.06%)</title><rect x="79.3004%" y="1445" width="0.0578%" height="15" fill="rgb(205,80,24)" fg:x="2743" fg:w="2"/><text x="79.5504%" y="1455.50"></text></g><g><title>combine::parser::Parser::parse_mode_impl (2 samples, 0.06%)</title><rect x="79.3004%" y="1429" width="0.0578%" height="15" fill="rgb(220,57,4)" fg:x="2743" fg:w="2"/><text x="79.5504%" y="1439.50"></text></g><g><title>combine::parser::Parser::parse_first (2 samples, 0.06%)</title><rect x="79.3004%" y="1413" width="0.0578%" height="15" fill="rgb(226,193,50)" fg:x="2743" fg:w="2"/><text x="79.5504%" y="1423.50"></text></g><g><title>combine::parser::Parser::parse_partial (2 samples, 0.06%)</title><rect x="79.3004%" y="1397" width="0.0578%" height="15" fill="rgb(231,168,22)" fg:x="2743" fg:w="2"/><text x="79.5504%" y="1407.50"></text></g><g><title>&lt;combine::parser::token::Value&lt;Input,T&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_lazy (2 samples, 0.06%)</title><rect x="79.3004%" y="1381" width="0.0578%" height="15" fill="rgb(254,215,14)" fg:x="2743" fg:w="2"/><text x="79.5504%" y="1391.50"></text></g><g><title>&lt;combine::stream::easy::Stream&lt;S&gt; as combine::stream::StreamOnce&gt;::uncons (1 samples, 0.03%)</title><rect x="79.3582%" y="1413" width="0.0289%" height="15" fill="rgb(211,115,16)" fg:x="2745" fg:w="1"/><text x="79.6082%" y="1423.50"></text></g><g><title>&lt;combine::stream::MaybePartialStream&lt;S&gt; as combine::stream::StreamOnce&gt;::uncons (1 samples, 0.03%)</title><rect x="79.3582%" y="1397" width="0.0289%" height="15" fill="rgb(236,210,16)" fg:x="2745" fg:w="1"/><text x="79.6082%" y="1407.50"></text></g><g><title>&lt;&amp;[T] as combine::stream::StreamOnce&gt;::uncons (1 samples, 0.03%)</title><rect x="79.3582%" y="1381" width="0.0289%" height="15" fill="rgb(221,94,12)" fg:x="2745" fg:w="1"/><text x="79.6082%" y="1391.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (1 samples, 0.03%)</title><rect x="79.3582%" y="1365" width="0.0289%" height="15" fill="rgb(235,218,49)" fg:x="2745" fg:w="1"/><text x="79.6082%" y="1375.50"></text></g><g><title>combine::parser::Parser::parse_mode (5 samples, 0.14%)</title><rect x="79.3582%" y="1509" width="0.1446%" height="15" fill="rgb(217,114,14)" fg:x="2745" fg:w="5"/><text x="79.6082%" y="1519.50"></text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (5 samples, 0.14%)</title><rect x="79.3582%" y="1493" width="0.1446%" height="15" fill="rgb(216,145,22)" fg:x="2745" fg:w="5"/><text x="79.6082%" y="1503.50"></text></g><g><title>combine::parser::Parser::parse_mode_impl (5 samples, 0.14%)</title><rect x="79.3582%" y="1477" width="0.1446%" height="15" fill="rgb(217,112,39)" fg:x="2745" fg:w="5"/><text x="79.6082%" y="1487.50"></text></g><g><title>combine::parser::Parser::parse_partial (5 samples, 0.14%)</title><rect x="79.3582%" y="1461" width="0.1446%" height="15" fill="rgb(225,85,32)" fg:x="2745" fg:w="5"/><text x="79.6082%" y="1471.50"></text></g><g><title>&lt;combine::parser::token::Any&lt;Input&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_lazy (5 samples, 0.14%)</title><rect x="79.3582%" y="1445" width="0.1446%" height="15" fill="rgb(245,209,47)" fg:x="2745" fg:w="5"/><text x="79.6082%" y="1455.50"></text></g><g><title>combine::stream::uncons (5 samples, 0.14%)</title><rect x="79.3582%" y="1429" width="0.1446%" height="15" fill="rgb(218,220,15)" fg:x="2745" fg:w="5"/><text x="79.6082%" y="1439.50"></text></g><g><title>combine::stream::wrap_stream_error (4 samples, 0.12%)</title><rect x="79.3871%" y="1413" width="0.1156%" height="15" fill="rgb(222,202,31)" fg:x="2746" fg:w="4"/><text x="79.6371%" y="1423.50"></text></g><g><title>&lt;combine::stream::easy::Errors&lt;Item,Range,Position&gt; as combine::error::ParseError&lt;Item,Range,Position&gt;&gt;::from_error (3 samples, 0.09%)</title><rect x="79.4160%" y="1397" width="0.0867%" height="15" fill="rgb(243,203,4)" fg:x="2747" fg:w="3"/><text x="79.6660%" y="1407.50"></text></g><g><title>combine::stream::easy::Errors&lt;T,R,P&gt;::new (3 samples, 0.09%)</title><rect x="79.4160%" y="1381" width="0.0867%" height="15" fill="rgb(237,92,17)" fg:x="2747" fg:w="3"/><text x="79.6660%" y="1391.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.09%)</title><rect x="79.4160%" y="1365" width="0.0867%" height="15" fill="rgb(231,119,7)" fg:x="2747" fg:w="3"/><text x="79.6660%" y="1375.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.09%)</title><rect x="79.4160%" y="1349" width="0.0867%" height="15" fill="rgb(237,82,41)" fg:x="2747" fg:w="3"/><text x="79.6660%" y="1359.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.09%)</title><rect x="79.4160%" y="1333" width="0.0867%" height="15" fill="rgb(226,81,48)" fg:x="2747" fg:w="3"/><text x="79.6660%" y="1343.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.09%)</title><rect x="79.4160%" y="1317" width="0.0867%" height="15" fill="rgb(234,70,51)" fg:x="2747" fg:w="3"/><text x="79.6660%" y="1327.50"></text></g><g><title>malloc (3 samples, 0.09%)</title><rect x="79.4160%" y="1301" width="0.0867%" height="15" fill="rgb(251,86,4)" fg:x="2747" fg:w="3"/><text x="79.6660%" y="1311.50"></text></g><g><title>combine::parser::Parser::parse_mode (10 samples, 0.29%)</title><rect x="79.2426%" y="1557" width="0.2891%" height="15" fill="rgb(244,144,28)" fg:x="2741" fg:w="10"/><text x="79.4926%" y="1567.50"></text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (10 samples, 0.29%)</title><rect x="79.2426%" y="1541" width="0.2891%" height="15" fill="rgb(232,161,39)" fg:x="2741" fg:w="10"/><text x="79.4926%" y="1551.50"></text></g><g><title>&lt;combine::parser::sequence::ThenPartial&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (10 samples, 0.29%)</title><rect x="79.2426%" y="1525" width="0.2891%" height="15" fill="rgb(247,34,51)" fg:x="2741" fg:w="10"/><text x="79.4926%" y="1535.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.03%)</title><rect x="79.5027%" y="1509" width="0.0289%" height="15" fill="rgb(225,132,2)" fg:x="2750" fg:w="1"/><text x="79.7527%" y="1519.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="79.5027%" y="1493" width="0.0289%" height="15" fill="rgb(209,159,44)" fg:x="2750" fg:w="1"/><text x="79.7527%" y="1503.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="79.5027%" y="1477" width="0.0289%" height="15" fill="rgb(251,214,1)" fg:x="2750" fg:w="1"/><text x="79.7527%" y="1487.50"></text></g><g><title>combine::parser::Parser::parse_mode (105 samples, 3.04%)</title><rect x="76.5250%" y="1605" width="3.0356%" height="15" fill="rgb(247,84,47)" fg:x="2647" fg:w="105"/><text x="76.7750%" y="1615.50">com..</text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (105 samples, 3.04%)</title><rect x="76.5250%" y="1589" width="3.0356%" height="15" fill="rgb(240,111,43)" fg:x="2647" fg:w="105"/><text x="76.7750%" y="1599.50">&lt;co..</text></g><g><title>&lt;combine::parser::sequence::ThenPartial&lt;P,F&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (102 samples, 2.95%)</title><rect x="76.6117%" y="1573" width="2.9488%" height="15" fill="rgb(215,214,35)" fg:x="2650" fg:w="102"/><text x="76.8617%" y="1583.50">&lt;c..</text></g><g><title>redis::parser::value::{{closure}}::{{closure}} (1 samples, 0.03%)</title><rect x="79.5317%" y="1557" width="0.0289%" height="15" fill="rgb(248,207,23)" fg:x="2751" fg:w="1"/><text x="79.7817%" y="1567.50"></text></g><g><title>&lt;combine::parser::combinator::Opaque&lt;F,Input,O,S&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl::{{closure}} (121 samples, 3.50%)</title><rect x="76.0914%" y="1653" width="3.4981%" height="15" fill="rgb(214,186,4)" fg:x="2632" fg:w="121"/><text x="76.3414%" y="1663.50">&lt;co..</text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (118 samples, 3.41%)</title><rect x="76.1781%" y="1637" width="3.4114%" height="15" fill="rgb(220,133,22)" fg:x="2635" fg:w="118"/><text x="76.4281%" y="1647.50">&lt;co..</text></g><g><title>&lt;combine::parser::combinator::AnySendSyncPartialStateParser&lt;P&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode (118 samples, 3.41%)</title><rect x="76.1781%" y="1621" width="3.4114%" height="15" fill="rgb(239,134,19)" fg:x="2635" fg:w="118"/><text x="76.4281%" y="1631.50">&lt;co..</text></g><g><title>core::option::Option&lt;T&gt;::is_none (1 samples, 0.03%)</title><rect x="79.5606%" y="1605" width="0.0289%" height="15" fill="rgb(250,140,9)" fg:x="2752" fg:w="1"/><text x="79.8106%" y="1615.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.03%)</title><rect x="79.5606%" y="1589" width="0.0289%" height="15" fill="rgb(225,59,14)" fg:x="2752" fg:w="1"/><text x="79.8106%" y="1599.50"></text></g><g><title>combine::stream::decode (143 samples, 4.13%)</title><rect x="75.4842%" y="1781" width="4.1341%" height="15" fill="rgb(214,152,51)" fg:x="2611" fg:w="143"/><text x="75.7342%" y="1791.50">combi..</text></g><g><title>combine::parser::Parser::parse_with_state (134 samples, 3.87%)</title><rect x="75.7444%" y="1765" width="3.8740%" height="15" fill="rgb(251,227,43)" fg:x="2620" fg:w="134"/><text x="75.9944%" y="1775.50">comb..</text></g><g><title>combine::parser::Parser::parse_stream_partial (131 samples, 3.79%)</title><rect x="75.8312%" y="1749" width="3.7872%" height="15" fill="rgb(241,96,17)" fg:x="2623" fg:w="131"/><text x="76.0812%" y="1759.50">comb..</text></g><g><title>&lt;combine::parser::combinator::Opaque&lt;F,Input,O,S&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_partial (128 samples, 3.70%)</title><rect x="75.9179%" y="1733" width="3.7005%" height="15" fill="rgb(234,198,43)" fg:x="2626" fg:w="128"/><text x="76.1679%" y="1743.50">&lt;com..</text></g><g><title>combine::parser::Parser::parse_mode (128 samples, 3.70%)</title><rect x="75.9179%" y="1717" width="3.7005%" height="15" fill="rgb(220,108,29)" fg:x="2626" fg:w="128"/><text x="76.1679%" y="1727.50">comb..</text></g><g><title>&lt;combine::parser::PartialMode as combine::parser::ParseMode&gt;::parse (128 samples, 3.70%)</title><rect x="75.9179%" y="1701" width="3.7005%" height="15" fill="rgb(226,163,33)" fg:x="2626" fg:w="128"/><text x="76.1679%" y="1711.50">&lt;com..</text></g><g><title>&lt;combine::parser::combinator::Opaque&lt;F,Input,O,S&gt; as combine::parser::Parser&lt;Input&gt;&gt;::parse_mode_impl (128 samples, 3.70%)</title><rect x="75.9179%" y="1685" width="3.7005%" height="15" fill="rgb(205,194,45)" fg:x="2626" fg:w="128"/><text x="76.1679%" y="1695.50">&lt;com..</text></g><g><title>redis::parser::value::{{closure}} (122 samples, 3.53%)</title><rect x="76.0914%" y="1669" width="3.5270%" height="15" fill="rgb(206,143,44)" fg:x="2632" fg:w="122"/><text x="76.3414%" y="1679.50">red..</text></g><g><title>combine::parser::combinator::any_send_sync_partial_state (1 samples, 0.03%)</title><rect x="79.5895%" y="1653" width="0.0289%" height="15" fill="rgb(236,136,36)" fg:x="2753" fg:w="1"/><text x="79.8395%" y="1663.50"></text></g><g><title>bytes::buf::uninit_slice::UninitSlice::write_byte (1 samples, 0.03%)</title><rect x="79.6184%" y="1733" width="0.0289%" height="15" fill="rgb(249,172,42)" fg:x="2754" fg:w="1"/><text x="79.8684%" y="1743.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.03%)</title><rect x="79.6184%" y="1717" width="0.0289%" height="15" fill="rgb(216,139,23)" fg:x="2754" fg:w="1"/><text x="79.8684%" y="1727.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="79.6184%" y="1701" width="0.0289%" height="15" fill="rgb(207,166,20)" fg:x="2754" fg:w="1"/><text x="79.8684%" y="1711.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="79.6184%" y="1685" width="0.0289%" height="15" fill="rgb(210,209,22)" fg:x="2754" fg:w="1"/><text x="79.8684%" y="1695.50"></text></g><g><title>recv (6 samples, 0.17%)</title><rect x="79.6473%" y="1637" width="0.1735%" height="15" fill="rgb(232,118,20)" fg:x="2755" fg:w="6"/><text x="79.8973%" y="1647.50"></text></g><g><title>combine::stream::decoder::Decoder&lt;S,P,C&gt;::__before_parse (8 samples, 0.23%)</title><rect x="79.6184%" y="1781" width="0.2313%" height="15" fill="rgb(238,113,42)" fg:x="2754" fg:w="8"/><text x="79.8684%" y="1791.50"></text></g><g><title>&lt;combine::stream::buf_reader::Buffer as combine::stream::buf_reader::CombineSyncRead&lt;R&gt;&gt;::extend_buf_sync (8 samples, 0.23%)</title><rect x="79.6184%" y="1765" width="0.2313%" height="15" fill="rgb(231,42,5)" fg:x="2754" fg:w="8"/><text x="79.8684%" y="1775.50"></text></g><g><title>combine::stream::buf_reader::extend_buf_sync (8 samples, 0.23%)</title><rect x="79.6184%" y="1749" width="0.2313%" height="15" fill="rgb(243,166,24)" fg:x="2754" fg:w="8"/><text x="79.8684%" y="1759.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (7 samples, 0.20%)</title><rect x="79.6473%" y="1733" width="0.2024%" height="15" fill="rgb(237,226,12)" fg:x="2755" fg:w="7"/><text x="79.8973%" y="1743.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (7 samples, 0.20%)</title><rect x="79.6473%" y="1717" width="0.2024%" height="15" fill="rgb(229,133,24)" fg:x="2755" fg:w="7"/><text x="79.8973%" y="1727.50"></text></g><g><title>std::net::udp::UdpSocket::recv (7 samples, 0.20%)</title><rect x="79.6473%" y="1701" width="0.2024%" height="15" fill="rgb(238,33,43)" fg:x="2755" fg:w="7"/><text x="79.8973%" y="1711.50"></text></g><g><title>std::sys_common::net::UdpSocket::recv (7 samples, 0.20%)</title><rect x="79.6473%" y="1685" width="0.2024%" height="15" fill="rgb(227,59,38)" fg:x="2755" fg:w="7"/><text x="79.8973%" y="1695.50"></text></g><g><title>std::sys::unix::net::Socket::read (7 samples, 0.20%)</title><rect x="79.6473%" y="1669" width="0.2024%" height="15" fill="rgb(230,97,0)" fg:x="2755" fg:w="7"/><text x="79.8973%" y="1679.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (7 samples, 0.20%)</title><rect x="79.6473%" y="1653" width="0.2024%" height="15" fill="rgb(250,173,50)" fg:x="2755" fg:w="7"/><text x="79.8973%" y="1663.50"></text></g><g><title>std::sys::unix::cvt (1 samples, 0.03%)</title><rect x="79.8208%" y="1637" width="0.0289%" height="15" fill="rgb(240,15,50)" fg:x="2761" fg:w="1"/><text x="80.0708%" y="1647.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (1 samples, 0.03%)</title><rect x="79.8208%" y="1621" width="0.0289%" height="15" fill="rgb(221,93,22)" fg:x="2761" fg:w="1"/><text x="80.0708%" y="1631.50"></text></g><g><title>combine::stream::decoder::Decoder&lt;S,P,C&gt;::__inner (1 samples, 0.03%)</title><rect x="79.8497%" y="1781" width="0.0289%" height="15" fill="rgb(245,180,53)" fg:x="2762" fg:w="1"/><text x="80.0997%" y="1791.50"></text></g><g><title>&lt;redis::connection::Connection as redis::connection::ConnectionLike&gt;::req_packed_commands (183 samples, 5.29%)</title><rect x="74.6169%" y="1829" width="5.2905%" height="15" fill="rgb(231,88,51)" fg:x="2581" fg:w="183"/><text x="74.8669%" y="1839.50">&lt;redis..</text></g><g><title>redis::connection::Connection::read_response (166 samples, 4.80%)</title><rect x="75.1084%" y="1813" width="4.7991%" height="15" fill="rgb(240,58,21)" fg:x="2598" fg:w="166"/><text x="75.3584%" y="1823.50">redis:..</text></g><g><title>redis::parser::Parser::parse_value (160 samples, 4.63%)</title><rect x="75.2819%" y="1797" width="4.6256%" height="15" fill="rgb(237,21,10)" fg:x="2604" fg:w="160"/><text x="75.5319%" y="1807.50">redis..</text></g><g><title>combine::stream::decoder::Decoder&lt;S,P,C&gt;::advance (1 samples, 0.03%)</title><rect x="79.8786%" y="1781" width="0.0289%" height="15" fill="rgb(218,43,11)" fg:x="2763" fg:w="1"/><text x="80.1286%" y="1791.50"></text></g><g><title>&lt;combine::stream::buf_reader::Buffer as combine::stream::buf_reader::CombineBuffer&lt;R&gt;&gt;::advance (1 samples, 0.03%)</title><rect x="79.8786%" y="1765" width="0.0289%" height="15" fill="rgb(218,221,29)" fg:x="2763" fg:w="1"/><text x="80.1286%" y="1775.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (1 samples, 0.03%)</title><rect x="79.8786%" y="1749" width="0.0289%" height="15" fill="rgb(214,118,42)" fg:x="2763" fg:w="1"/><text x="80.1286%" y="1759.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (1 samples, 0.03%)</title><rect x="79.8786%" y="1733" width="0.0289%" height="15" fill="rgb(251,200,26)" fg:x="2763" fg:w="1"/><text x="80.1286%" y="1743.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="80.2833%" y="1813" width="0.0289%" height="15" fill="rgb(237,101,39)" fg:x="2777" fg:w="1"/><text x="80.5333%" y="1823.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="80.2833%" y="1797" width="0.0289%" height="15" fill="rgb(251,117,11)" fg:x="2777" fg:w="1"/><text x="80.5333%" y="1807.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.06%)</title><rect x="80.3122%" y="1797" width="0.0578%" height="15" fill="rgb(216,223,23)" fg:x="2778" fg:w="2"/><text x="80.5622%" y="1807.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.06%)</title><rect x="80.3122%" y="1781" width="0.0578%" height="15" fill="rgb(251,54,12)" fg:x="2778" fg:w="2"/><text x="80.5622%" y="1791.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.06%)</title><rect x="80.3122%" y="1765" width="0.0578%" height="15" fill="rgb(254,176,54)" fg:x="2778" fg:w="2"/><text x="80.5622%" y="1775.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.06%)</title><rect x="80.3122%" y="1749" width="0.0578%" height="15" fill="rgb(210,32,8)" fg:x="2778" fg:w="2"/><text x="80.5622%" y="1759.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.06%)</title><rect x="80.3122%" y="1733" width="0.0578%" height="15" fill="rgb(235,52,38)" fg:x="2778" fg:w="2"/><text x="80.5622%" y="1743.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.06%)</title><rect x="80.3122%" y="1717" width="0.0578%" height="15" fill="rgb(231,4,44)" fg:x="2778" fg:w="2"/><text x="80.5622%" y="1727.50"></text></g><g><title>realloc (2 samples, 0.06%)</title><rect x="80.3122%" y="1701" width="0.0578%" height="15" fill="rgb(249,2,32)" fg:x="2778" fg:w="2"/><text x="80.5622%" y="1711.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="80.3411%" y="1685" width="0.0289%" height="15" fill="rgb(224,65,26)" fg:x="2779" fg:w="1"/><text x="80.5911%" y="1695.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="80.3411%" y="1669" width="0.0289%" height="15" fill="rgb(250,73,40)" fg:x="2779" fg:w="1"/><text x="80.5911%" y="1679.50"></text></g><g><title>redis::pipeline::Pipeline::make_pipeline_results (25 samples, 0.72%)</title><rect x="79.9075%" y="1829" width="0.7228%" height="15" fill="rgb(253,177,16)" fg:x="2764" fg:w="25"/><text x="80.1575%" y="1839.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (11 samples, 0.32%)</title><rect x="80.3122%" y="1813" width="0.3180%" height="15" fill="rgb(217,32,34)" fg:x="2778" fg:w="11"/><text x="80.5622%" y="1823.50"></text></g><g><title>core::ptr::write (9 samples, 0.26%)</title><rect x="80.3700%" y="1797" width="0.2602%" height="15" fill="rgb(212,7,10)" fg:x="2780" fg:w="9"/><text x="80.6200%" y="1807.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="80.6302%" y="1797" width="0.0289%" height="15" fill="rgb(245,89,8)" fg:x="2789" fg:w="1"/><text x="80.8802%" y="1807.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="80.6302%" y="1781" width="0.0289%" height="15" fill="rgb(237,16,53)" fg:x="2789" fg:w="1"/><text x="80.8802%" y="1791.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="80.6302%" y="1765" width="0.0289%" height="15" fill="rgb(250,204,30)" fg:x="2789" fg:w="1"/><text x="80.8802%" y="1775.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="80.6302%" y="1749" width="0.0289%" height="15" fill="rgb(208,77,27)" fg:x="2789" fg:w="1"/><text x="80.8802%" y="1759.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="80.6302%" y="1733" width="0.0289%" height="15" fill="rgb(250,204,28)" fg:x="2789" fg:w="1"/><text x="80.8802%" y="1743.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="80.6302%" y="1717" width="0.0289%" height="15" fill="rgb(244,63,21)" fg:x="2789" fg:w="1"/><text x="80.8802%" y="1727.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="80.6592%" y="1669" width="0.0289%" height="15" fill="rgb(236,85,44)" fg:x="2790" fg:w="1"/><text x="80.9092%" y="1679.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.03%)</title><rect x="80.6592%" y="1653" width="0.0289%" height="15" fill="rgb(215,98,4)" fg:x="2790" fg:w="1"/><text x="80.9092%" y="1663.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="80.6592%" y="1637" width="0.0289%" height="15" fill="rgb(235,38,11)" fg:x="2790" fg:w="1"/><text x="80.9092%" y="1647.50"></text></g><g><title>redis::cmd::Cmd::args_iter (2 samples, 0.06%)</title><rect x="80.6592%" y="1685" width="0.0578%" height="15" fill="rgb(254,186,25)" fg:x="2790" fg:w="2"/><text x="80.9092%" y="1695.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.03%)</title><rect x="80.6881%" y="1669" width="0.0289%" height="15" fill="rgb(225,55,31)" fg:x="2791" fg:w="1"/><text x="80.9381%" y="1679.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="80.6881%" y="1653" width="0.0289%" height="15" fill="rgb(211,15,21)" fg:x="2791" fg:w="1"/><text x="80.9381%" y="1663.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.03%)</title><rect x="80.6881%" y="1637" width="0.0289%" height="15" fill="rgb(215,187,41)" fg:x="2791" fg:w="1"/><text x="80.9381%" y="1647.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (1 samples, 0.03%)</title><rect x="80.8037%" y="1669" width="0.0289%" height="15" fill="rgb(248,69,32)" fg:x="2795" fg:w="1"/><text x="81.0537%" y="1679.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (1 samples, 0.03%)</title><rect x="80.8037%" y="1653" width="0.0289%" height="15" fill="rgb(252,102,52)" fg:x="2795" fg:w="1"/><text x="81.0537%" y="1663.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (1 samples, 0.03%)</title><rect x="80.8037%" y="1637" width="0.0289%" height="15" fill="rgb(253,140,32)" fg:x="2795" fg:w="1"/><text x="81.0537%" y="1647.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.46%)</title><rect x="80.8326%" y="1669" width="0.4626%" height="15" fill="rgb(216,56,42)" fg:x="2796" fg:w="16"/><text x="81.0826%" y="1679.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (15 samples, 0.43%)</title><rect x="80.8615%" y="1653" width="0.4337%" height="15" fill="rgb(216,184,14)" fg:x="2797" fg:w="15"/><text x="81.1115%" y="1663.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (15 samples, 0.43%)</title><rect x="80.8615%" y="1637" width="0.4337%" height="15" fill="rgb(237,187,27)" fg:x="2797" fg:w="15"/><text x="81.1115%" y="1647.50"></text></g><g><title>redis::cmd::Cmd::args_iter::{{closure}} (15 samples, 0.43%)</title><rect x="80.8615%" y="1621" width="0.4337%" height="15" fill="rgb(219,65,3)" fg:x="2797" fg:w="15"/><text x="81.1115%" y="1631.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.06%)</title><rect x="81.2374%" y="1605" width="0.0578%" height="15" fill="rgb(245,83,25)" fg:x="2810" fg:w="2"/><text x="81.4874%" y="1615.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.06%)</title><rect x="81.2374%" y="1589" width="0.0578%" height="15" fill="rgb(214,205,45)" fg:x="2810" fg:w="2"/><text x="81.4874%" y="1599.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.06%)</title><rect x="81.2374%" y="1573" width="0.0578%" height="15" fill="rgb(241,20,18)" fg:x="2810" fg:w="2"/><text x="81.4874%" y="1583.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (24 samples, 0.69%)</title><rect x="80.6592%" y="1797" width="0.6938%" height="15" fill="rgb(232,163,23)" fg:x="2790" fg:w="24"/><text x="80.9092%" y="1807.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (24 samples, 0.69%)</title><rect x="80.6592%" y="1781" width="0.6938%" height="15" fill="rgb(214,5,46)" fg:x="2790" fg:w="24"/><text x="80.9092%" y="1791.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (24 samples, 0.69%)</title><rect x="80.6592%" y="1765" width="0.6938%" height="15" fill="rgb(229,78,17)" fg:x="2790" fg:w="24"/><text x="80.9092%" y="1775.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (24 samples, 0.69%)</title><rect x="80.6592%" y="1749" width="0.6938%" height="15" fill="rgb(248,89,10)" fg:x="2790" fg:w="24"/><text x="80.9092%" y="1759.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (24 samples, 0.69%)</title><rect x="80.6592%" y="1733" width="0.6938%" height="15" fill="rgb(248,54,15)" fg:x="2790" fg:w="24"/><text x="80.9092%" y="1743.50"></text></g><g><title>core::ops::function::FnMut::call_mut (24 samples, 0.69%)</title><rect x="80.6592%" y="1717" width="0.6938%" height="15" fill="rgb(223,116,6)" fg:x="2790" fg:w="24"/><text x="80.9092%" y="1727.50"></text></g><g><title>redis::cmd::cmd_len (24 samples, 0.69%)</title><rect x="80.6592%" y="1701" width="0.6938%" height="15" fill="rgb(205,125,38)" fg:x="2790" fg:w="24"/><text x="80.9092%" y="1711.50"></text></g><g><title>redis::cmd::args_len (22 samples, 0.64%)</title><rect x="80.7170%" y="1685" width="0.6360%" height="15" fill="rgb(251,78,38)" fg:x="2792" fg:w="22"/><text x="80.9670%" y="1695.50"></text></g><g><title>redis::cmd::bulklen (2 samples, 0.06%)</title><rect x="81.2952%" y="1669" width="0.0578%" height="15" fill="rgb(253,78,28)" fg:x="2812" fg:w="2"/><text x="81.5452%" y="1679.50"></text></g><g><title>redis::cmd::countdigits (2 samples, 0.06%)</title><rect x="81.2952%" y="1653" width="0.0578%" height="15" fill="rgb(209,120,3)" fg:x="2812" fg:w="2"/><text x="81.5452%" y="1663.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="81.3530%" y="1765" width="0.0289%" height="15" fill="rgb(238,229,9)" fg:x="2814" fg:w="1"/><text x="81.6030%" y="1775.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.03%)</title><rect x="81.3530%" y="1749" width="0.0289%" height="15" fill="rgb(253,159,18)" fg:x="2814" fg:w="1"/><text x="81.6030%" y="1759.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="81.3530%" y="1733" width="0.0289%" height="15" fill="rgb(244,42,34)" fg:x="2814" fg:w="1"/><text x="81.6030%" y="1743.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (1 samples, 0.03%)</title><rect x="81.3819%" y="1765" width="0.0289%" height="15" fill="rgb(224,8,7)" fg:x="2815" fg:w="1"/><text x="81.6319%" y="1775.50"></text></g><g><title>core::iter::adapters::map::Map&lt;I,F&gt;::new (1 samples, 0.03%)</title><rect x="81.3819%" y="1749" width="0.0289%" height="15" fill="rgb(210,201,45)" fg:x="2815" fg:w="1"/><text x="81.6319%" y="1759.50"></text></g><g><title>redis::cmd::Cmd::args_iter (3 samples, 0.09%)</title><rect x="81.3530%" y="1781" width="0.0867%" height="15" fill="rgb(252,185,21)" fg:x="2814" fg:w="3"/><text x="81.6030%" y="1791.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.03%)</title><rect x="81.4108%" y="1765" width="0.0289%" height="15" fill="rgb(223,131,1)" fg:x="2816" fg:w="1"/><text x="81.6608%" y="1775.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="81.4108%" y="1749" width="0.0289%" height="15" fill="rgb(245,141,16)" fg:x="2816" fg:w="1"/><text x="81.6608%" y="1759.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.03%)</title><rect x="81.4108%" y="1733" width="0.0289%" height="15" fill="rgb(229,55,45)" fg:x="2816" fg:w="1"/><text x="81.6608%" y="1743.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.20%)</title><rect x="81.5265%" y="1765" width="0.2024%" height="15" fill="rgb(208,92,15)" fg:x="2820" fg:w="7"/><text x="81.7765%" y="1775.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (7 samples, 0.20%)</title><rect x="81.5265%" y="1749" width="0.2024%" height="15" fill="rgb(234,185,47)" fg:x="2820" fg:w="7"/><text x="81.7765%" y="1759.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (7 samples, 0.20%)</title><rect x="81.5265%" y="1733" width="0.2024%" height="15" fill="rgb(253,104,50)" fg:x="2820" fg:w="7"/><text x="81.7765%" y="1743.50"></text></g><g><title>redis::cmd::Cmd::args_iter::{{closure}} (7 samples, 0.20%)</title><rect x="81.5265%" y="1717" width="0.2024%" height="15" fill="rgb(205,70,7)" fg:x="2820" fg:w="7"/><text x="81.7765%" y="1727.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.06%)</title><rect x="81.6710%" y="1701" width="0.0578%" height="15" fill="rgb(240,178,43)" fg:x="2825" fg:w="2"/><text x="81.9210%" y="1711.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.06%)</title><rect x="81.6710%" y="1685" width="0.0578%" height="15" fill="rgb(214,112,2)" fg:x="2825" fg:w="2"/><text x="81.9210%" y="1695.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.06%)</title><rect x="81.6710%" y="1669" width="0.0578%" height="15" fill="rgb(206,46,17)" fg:x="2825" fg:w="2"/><text x="81.9210%" y="1679.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="81.6999%" y="1653" width="0.0289%" height="15" fill="rgb(225,220,16)" fg:x="2826" fg:w="1"/><text x="81.9499%" y="1663.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.03%)</title><rect x="81.6999%" y="1637" width="0.0289%" height="15" fill="rgb(238,65,40)" fg:x="2826" fg:w="1"/><text x="81.9499%" y="1647.50"></text></g><g><title>itoa::Buffer::format (3 samples, 0.09%)</title><rect x="81.7288%" y="1765" width="0.0867%" height="15" fill="rgb(230,151,21)" fg:x="2827" fg:w="3"/><text x="81.9788%" y="1775.50"></text></g><g><title>itoa::&lt;impl itoa::private::Sealed for usize&gt;::write (3 samples, 0.09%)</title><rect x="81.7288%" y="1749" width="0.0867%" height="15" fill="rgb(218,58,49)" fg:x="2827" fg:w="3"/><text x="81.9788%" y="1759.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.06%)</title><rect x="81.9023%" y="1701" width="0.0578%" height="15" fill="rgb(219,179,14)" fg:x="2833" fg:w="2"/><text x="82.1523%" y="1711.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.06%)</title><rect x="81.9023%" y="1685" width="0.0578%" height="15" fill="rgb(223,72,1)" fg:x="2833" fg:w="2"/><text x="82.1523%" y="1695.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (5 samples, 0.14%)</title><rect x="81.9601%" y="1701" width="0.1446%" height="15" fill="rgb(238,126,10)" fg:x="2835" fg:w="5"/><text x="82.2101%" y="1711.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.14%)</title><rect x="81.9601%" y="1685" width="0.1446%" height="15" fill="rgb(224,206,38)" fg:x="2835" fg:w="5"/><text x="82.2101%" y="1695.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (2 samples, 0.06%)</title><rect x="82.0468%" y="1669" width="0.0578%" height="15" fill="rgb(212,201,54)" fg:x="2838" fg:w="2"/><text x="82.2968%" y="1679.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.03%)</title><rect x="82.0757%" y="1653" width="0.0289%" height="15" fill="rgb(218,154,48)" fg:x="2839" fg:w="1"/><text x="82.3257%" y="1663.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.55%)</title><rect x="82.1047%" y="1701" width="0.5493%" height="15" fill="rgb(232,93,24)" fg:x="2840" fg:w="19"/><text x="82.3547%" y="1711.50"></text></g><g><title>[libc.so.6] (15 samples, 0.43%)</title><rect x="82.2203%" y="1685" width="0.4337%" height="15" fill="rgb(245,30,21)" fg:x="2844" fg:w="15"/><text x="82.4703%" y="1695.50"></text></g><g><title>redis::pipeline::Pipeline::execute (284 samples, 8.21%)</title><rect x="74.5880%" y="1877" width="8.2105%" height="15" fill="rgb(242,148,29)" fg:x="2580" fg:w="284"/><text x="74.8380%" y="1887.50">redis::pipe..</text></g><g><title>redis::pipeline::Pipeline::query (284 samples, 8.21%)</title><rect x="74.5880%" y="1861" width="8.2105%" height="15" fill="rgb(244,153,54)" fg:x="2580" fg:w="284"/><text x="74.8380%" y="1871.50">redis::pipe..</text></g><g><title>redis::pipeline::Pipeline::execute_pipelined (283 samples, 8.18%)</title><rect x="74.6169%" y="1845" width="8.1816%" height="15" fill="rgb(252,87,22)" fg:x="2581" fg:w="283"/><text x="74.8669%" y="1855.50">redis::pipe..</text></g><g><title>redis::pipeline::encode_pipeline (75 samples, 2.17%)</title><rect x="80.6302%" y="1829" width="2.1683%" height="15" fill="rgb(210,51,29)" fg:x="2789" fg:w="75"/><text x="80.8802%" y="1839.50">r..</text></g><g><title>redis::pipeline::write_pipeline (75 samples, 2.17%)</title><rect x="80.6302%" y="1813" width="2.1683%" height="15" fill="rgb(242,136,47)" fg:x="2789" fg:w="75"/><text x="80.8802%" y="1823.50">r..</text></g><g><title>redis::cmd::Cmd::write_packed_command_preallocated (50 samples, 1.45%)</title><rect x="81.3530%" y="1797" width="1.4455%" height="15" fill="rgb(238,68,4)" fg:x="2814" fg:w="50"/><text x="81.6030%" y="1807.50"></text></g><g><title>redis::cmd::write_command (47 samples, 1.36%)</title><rect x="81.4397%" y="1781" width="1.3588%" height="15" fill="rgb(242,161,30)" fg:x="2817" fg:w="47"/><text x="81.6897%" y="1791.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (34 samples, 0.98%)</title><rect x="81.8156%" y="1765" width="0.9829%" height="15" fill="rgb(218,58,44)" fg:x="2830" fg:w="34"/><text x="82.0656%" y="1775.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (34 samples, 0.98%)</title><rect x="81.8156%" y="1749" width="0.9829%" height="15" fill="rgb(252,125,32)" fg:x="2830" fg:w="34"/><text x="82.0656%" y="1759.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (34 samples, 0.98%)</title><rect x="81.8156%" y="1733" width="0.9829%" height="15" fill="rgb(219,178,0)" fg:x="2830" fg:w="34"/><text x="82.0656%" y="1743.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (34 samples, 0.98%)</title><rect x="81.8156%" y="1717" width="0.9829%" height="15" fill="rgb(213,152,7)" fg:x="2830" fg:w="34"/><text x="82.0656%" y="1727.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (5 samples, 0.14%)</title><rect x="82.6539%" y="1701" width="0.1446%" height="15" fill="rgb(249,109,34)" fg:x="2859" fg:w="5"/><text x="82.9039%" y="1711.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.09%)</title><rect x="84.1284%" y="1797" width="0.0867%" height="15" fill="rgb(232,96,21)" fg:x="2910" fg:w="3"/><text x="84.3784%" y="1807.50"></text></g><g><title>&lt;exchange_lib::message_queue::_::&lt;impl serde::de::Deserialize for exchange_lib::message_queue::Message&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (6 samples, 0.17%)</title><rect x="84.2729%" y="1701" width="0.1735%" height="15" fill="rgb(228,27,39)" fg:x="2915" fg:w="6"/><text x="84.5229%" y="1711.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (5 samples, 0.14%)</title><rect x="84.3018%" y="1685" width="0.1446%" height="15" fill="rgb(211,182,52)" fg:x="2916" fg:w="5"/><text x="84.5518%" y="1695.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.14%)</title><rect x="84.3018%" y="1669" width="0.1446%" height="15" fill="rgb(234,178,38)" fg:x="2916" fg:w="5"/><text x="84.5518%" y="1679.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (5 samples, 0.14%)</title><rect x="84.3018%" y="1653" width="0.1446%" height="15" fill="rgb(221,111,3)" fg:x="2916" fg:w="5"/><text x="84.5518%" y="1663.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (5 samples, 0.14%)</title><rect x="84.3018%" y="1637" width="0.1446%" height="15" fill="rgb(228,175,21)" fg:x="2916" fg:w="5"/><text x="84.5518%" y="1647.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (39 samples, 1.13%)</title><rect x="84.4464%" y="1701" width="1.1275%" height="15" fill="rgb(228,174,43)" fg:x="2921" fg:w="39"/><text x="84.6964%" y="1711.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (37 samples, 1.07%)</title><rect x="84.5042%" y="1685" width="1.0697%" height="15" fill="rgb(211,191,0)" fg:x="2923" fg:w="37"/><text x="84.7542%" y="1695.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (3 samples, 0.09%)</title><rect x="85.4871%" y="1669" width="0.0867%" height="15" fill="rgb(253,117,3)" fg:x="2957" fg:w="3"/><text x="85.7371%" y="1679.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (46 samples, 1.33%)</title><rect x="84.2729%" y="1765" width="1.3299%" height="15" fill="rgb(241,127,19)" fg:x="2915" fg:w="46"/><text x="84.5229%" y="1775.50"></text></g><g><title>&lt;exchange_lib::message_queue::_::&lt;impl serde::de::Deserialize for exchange_lib::message_queue::Message&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (46 samples, 1.33%)</title><rect x="84.2729%" y="1749" width="1.3299%" height="15" fill="rgb(218,103,12)" fg:x="2915" fg:w="46"/><text x="84.5229%" y="1759.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (46 samples, 1.33%)</title><rect x="84.2729%" y="1733" width="1.3299%" height="15" fill="rgb(236,214,43)" fg:x="2915" fg:w="46"/><text x="84.5229%" y="1743.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (46 samples, 1.33%)</title><rect x="84.2729%" y="1717" width="1.3299%" height="15" fill="rgb(244,144,19)" fg:x="2915" fg:w="46"/><text x="84.5229%" y="1727.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::eat_char (1 samples, 0.03%)</title><rect x="85.5739%" y="1701" width="0.0289%" height="15" fill="rgb(246,188,10)" fg:x="2960" fg:w="1"/><text x="85.8239%" y="1711.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::discard (1 samples, 0.03%)</title><rect x="85.5739%" y="1685" width="0.0289%" height="15" fill="rgb(212,193,33)" fg:x="2960" fg:w="1"/><text x="85.8239%" y="1695.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::discard (1 samples, 0.03%)</title><rect x="85.5739%" y="1669" width="0.0289%" height="15" fill="rgb(241,51,29)" fg:x="2960" fg:w="1"/><text x="85.8239%" y="1679.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::eat_char (1 samples, 0.03%)</title><rect x="85.6028%" y="1765" width="0.0289%" height="15" fill="rgb(211,58,19)" fg:x="2961" fg:w="1"/><text x="85.8528%" y="1775.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::discard (1 samples, 0.03%)</title><rect x="85.6028%" y="1749" width="0.0289%" height="15" fill="rgb(229,111,26)" fg:x="2961" fg:w="1"/><text x="85.8528%" y="1759.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::discard (1 samples, 0.03%)</title><rect x="85.6028%" y="1733" width="0.0289%" height="15" fill="rgb(213,115,40)" fg:x="2961" fg:w="1"/><text x="85.8528%" y="1743.50"></text></g><g><title>serde::de::MapAccess::next_key (56 samples, 1.62%)</title><rect x="84.2151%" y="1797" width="1.6190%" height="15" fill="rgb(209,56,44)" fg:x="2913" fg:w="56"/><text x="84.4651%" y="1807.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (56 samples, 1.62%)</title><rect x="84.2151%" y="1781" width="1.6190%" height="15" fill="rgb(230,108,32)" fg:x="2913" fg:w="56"/><text x="84.4651%" y="1791.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (7 samples, 0.20%)</title><rect x="85.6317%" y="1765" width="0.2024%" height="15" fill="rgb(216,165,31)" fg:x="2962" fg:w="7"/><text x="85.8817%" y="1775.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (5 samples, 0.14%)</title><rect x="85.6895%" y="1749" width="0.1446%" height="15" fill="rgb(218,122,21)" fg:x="2964" fg:w="5"/><text x="85.9395%" y="1759.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (5 samples, 0.14%)</title><rect x="85.6895%" y="1733" width="0.1446%" height="15" fill="rgb(223,224,47)" fg:x="2964" fg:w="5"/><text x="85.9395%" y="1743.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (5 samples, 0.14%)</title><rect x="85.6895%" y="1717" width="0.1446%" height="15" fill="rgb(238,102,44)" fg:x="2964" fg:w="5"/><text x="85.9395%" y="1727.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (2 samples, 0.06%)</title><rect x="86.0075%" y="1701" width="0.0578%" height="15" fill="rgb(236,46,40)" fg:x="2975" fg:w="2"/><text x="86.2575%" y="1711.50"></text></g><g><title>&lt;exchange_lib::message_queue::_::&lt;impl serde::de::Deserialize for exchange_lib::message_queue::Payload&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (4 samples, 0.12%)</title><rect x="86.2099%" y="1605" width="0.1156%" height="15" fill="rgb(247,202,50)" fg:x="2982" fg:w="4"/><text x="86.4599%" y="1615.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (3 samples, 0.09%)</title><rect x="86.2388%" y="1589" width="0.0867%" height="15" fill="rgb(209,99,20)" fg:x="2983" fg:w="3"/><text x="86.4888%" y="1599.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.09%)</title><rect x="86.2388%" y="1573" width="0.0867%" height="15" fill="rgb(252,27,34)" fg:x="2983" fg:w="3"/><text x="86.4888%" y="1583.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (3 samples, 0.09%)</title><rect x="86.2388%" y="1557" width="0.0867%" height="15" fill="rgb(215,206,23)" fg:x="2983" fg:w="3"/><text x="86.4888%" y="1567.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3 samples, 0.09%)</title><rect x="86.2388%" y="1541" width="0.0867%" height="15" fill="rgb(212,135,36)" fg:x="2983" fg:w="3"/><text x="86.4888%" y="1551.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (23 samples, 0.66%)</title><rect x="86.3255%" y="1605" width="0.6649%" height="15" fill="rgb(240,189,1)" fg:x="2986" fg:w="23"/><text x="86.5755%" y="1615.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (23 samples, 0.66%)</title><rect x="86.3255%" y="1589" width="0.6649%" height="15" fill="rgb(242,56,20)" fg:x="2986" fg:w="23"/><text x="86.5755%" y="1599.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.03%)</title><rect x="86.9615%" y="1573" width="0.0289%" height="15" fill="rgb(247,132,33)" fg:x="3008" fg:w="1"/><text x="87.2115%" y="1583.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (1 samples, 0.03%)</title><rect x="86.9905%" y="1605" width="0.0289%" height="15" fill="rgb(208,149,11)" fg:x="3009" fg:w="1"/><text x="87.2405%" y="1615.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (35 samples, 1.01%)</title><rect x="86.1232%" y="1669" width="1.0119%" height="15" fill="rgb(211,33,11)" fg:x="2979" fg:w="35"/><text x="86.3732%" y="1679.50"></text></g><g><title>&lt;exchange_lib::message_queue::_::&lt;impl serde::de::Deserialize for exchange_lib::message_queue::Payload&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (35 samples, 1.01%)</title><rect x="86.1232%" y="1653" width="1.0119%" height="15" fill="rgb(221,29,38)" fg:x="2979" fg:w="35"/><text x="86.3732%" y="1663.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (35 samples, 1.01%)</title><rect x="86.1232%" y="1637" width="1.0119%" height="15" fill="rgb(206,182,49)" fg:x="2979" fg:w="35"/><text x="86.3732%" y="1647.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (35 samples, 1.01%)</title><rect x="86.1232%" y="1621" width="1.0119%" height="15" fill="rgb(216,140,1)" fg:x="2979" fg:w="35"/><text x="86.3732%" y="1631.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (4 samples, 0.12%)</title><rect x="87.0194%" y="1605" width="0.1156%" height="15" fill="rgb(232,57,40)" fg:x="3010" fg:w="4"/><text x="87.2694%" y="1615.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (4 samples, 0.12%)</title><rect x="87.0194%" y="1589" width="0.1156%" height="15" fill="rgb(224,186,18)" fg:x="3010" fg:w="4"/><text x="87.2694%" y="1599.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (4 samples, 0.12%)</title><rect x="87.0194%" y="1573" width="0.1156%" height="15" fill="rgb(215,121,11)" fg:x="3010" fg:w="4"/><text x="87.2694%" y="1583.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (4 samples, 0.12%)</title><rect x="87.0194%" y="1557" width="0.1156%" height="15" fill="rgb(245,147,10)" fg:x="3010" fg:w="4"/><text x="87.2694%" y="1567.50"></text></g><g><title>serde::de::EnumAccess::variant (38 samples, 1.10%)</title><rect x="86.0653%" y="1701" width="1.0986%" height="15" fill="rgb(238,153,13)" fg:x="2977" fg:w="38"/><text x="86.3153%" y="1711.50"></text></g><g><title>&lt;serde_json::de::VariantAccess&lt;R&gt; as serde::de::EnumAccess&gt;::variant_seed (38 samples, 1.10%)</title><rect x="86.0653%" y="1685" width="1.0986%" height="15" fill="rgb(233,108,0)" fg:x="2977" fg:w="38"/><text x="86.3153%" y="1695.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (1 samples, 0.03%)</title><rect x="87.1350%" y="1669" width="0.0289%" height="15" fill="rgb(212,157,17)" fg:x="3014" fg:w="1"/><text x="87.3850%" y="1679.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.03%)</title><rect x="87.1350%" y="1653" width="0.0289%" height="15" fill="rgb(225,213,38)" fg:x="3014" fg:w="1"/><text x="87.3850%" y="1663.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.03%)</title><rect x="87.1350%" y="1637" width="0.0289%" height="15" fill="rgb(248,16,11)" fg:x="3014" fg:w="1"/><text x="87.3850%" y="1647.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (1 samples, 0.03%)</title><rect x="87.1350%" y="1621" width="0.0289%" height="15" fill="rgb(241,33,4)" fg:x="3014" fg:w="1"/><text x="87.3850%" y="1631.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (1 samples, 0.03%)</title><rect x="87.1350%" y="1605" width="0.0289%" height="15" fill="rgb(222,26,43)" fg:x="3014" fg:w="1"/><text x="87.3850%" y="1615.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (13 samples, 0.38%)</title><rect x="87.3663%" y="1605" width="0.3758%" height="15" fill="rgb(243,29,36)" fg:x="3022" fg:w="13"/><text x="87.6163%" y="1615.50"></text></g><g><title>&lt;exchange_lib::commands::_::&lt;impl serde::de::Deserialize for exchange_lib::commands::OrderCommand&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (3 samples, 0.09%)</title><rect x="87.7999%" y="1509" width="0.0867%" height="15" fill="rgb(241,9,27)" fg:x="3037" fg:w="3"/><text x="88.0499%" y="1519.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (2 samples, 0.06%)</title><rect x="87.8289%" y="1493" width="0.0578%" height="15" fill="rgb(205,117,26)" fg:x="3038" fg:w="2"/><text x="88.0789%" y="1503.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.06%)</title><rect x="87.8289%" y="1477" width="0.0578%" height="15" fill="rgb(209,80,39)" fg:x="3038" fg:w="2"/><text x="88.0789%" y="1487.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.06%)</title><rect x="87.8289%" y="1461" width="0.0578%" height="15" fill="rgb(239,155,6)" fg:x="3038" fg:w="2"/><text x="88.0789%" y="1471.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.06%)</title><rect x="87.8289%" y="1445" width="0.0578%" height="15" fill="rgb(212,104,12)" fg:x="3038" fg:w="2"/><text x="88.0789%" y="1455.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (16 samples, 0.46%)</title><rect x="87.8867%" y="1509" width="0.4626%" height="15" fill="rgb(234,204,3)" fg:x="3040" fg:w="16"/><text x="88.1367%" y="1519.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (12 samples, 0.35%)</title><rect x="88.0023%" y="1493" width="0.3469%" height="15" fill="rgb(251,218,7)" fg:x="3044" fg:w="12"/><text x="88.2523%" y="1503.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.03%)</title><rect x="88.3203%" y="1477" width="0.0289%" height="15" fill="rgb(221,81,32)" fg:x="3055" fg:w="1"/><text x="88.5703%" y="1487.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (21 samples, 0.61%)</title><rect x="87.7999%" y="1573" width="0.6071%" height="15" fill="rgb(214,152,26)" fg:x="3037" fg:w="21"/><text x="88.0499%" y="1583.50"></text></g><g><title>&lt;exchange_lib::commands::_::&lt;impl serde::de::Deserialize for exchange_lib::commands::OrderCommand&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (21 samples, 0.61%)</title><rect x="87.7999%" y="1557" width="0.6071%" height="15" fill="rgb(223,22,3)" fg:x="3037" fg:w="21"/><text x="88.0499%" y="1567.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (21 samples, 0.61%)</title><rect x="87.7999%" y="1541" width="0.6071%" height="15" fill="rgb(207,174,7)" fg:x="3037" fg:w="21"/><text x="88.0499%" y="1551.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (21 samples, 0.61%)</title><rect x="87.7999%" y="1525" width="0.6071%" height="15" fill="rgb(224,19,52)" fg:x="3037" fg:w="21"/><text x="88.0499%" y="1535.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (2 samples, 0.06%)</title><rect x="88.3492%" y="1509" width="0.0578%" height="15" fill="rgb(228,24,14)" fg:x="3056" fg:w="2"/><text x="88.5992%" y="1519.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.03%)</title><rect x="88.3781%" y="1493" width="0.0289%" height="15" fill="rgb(230,153,43)" fg:x="3057" fg:w="1"/><text x="88.6281%" y="1503.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (1 samples, 0.03%)</title><rect x="88.3781%" y="1477" width="0.0289%" height="15" fill="rgb(231,106,12)" fg:x="3057" fg:w="1"/><text x="88.6281%" y="1487.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (1 samples, 0.03%)</title><rect x="88.3781%" y="1461" width="0.0289%" height="15" fill="rgb(215,92,2)" fg:x="3057" fg:w="1"/><text x="88.6281%" y="1471.50"></text></g><g><title>serde::de::EnumAccess::variant (25 samples, 0.72%)</title><rect x="87.7421%" y="1605" width="0.7228%" height="15" fill="rgb(249,143,25)" fg:x="3035" fg:w="25"/><text x="87.9921%" y="1615.50"></text></g><g><title>&lt;serde_json::de::VariantAccess&lt;R&gt; as serde::de::EnumAccess&gt;::variant_seed (25 samples, 0.72%)</title><rect x="87.7421%" y="1589" width="0.7228%" height="15" fill="rgb(252,7,35)" fg:x="3035" fg:w="25"/><text x="87.9921%" y="1599.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (2 samples, 0.06%)</title><rect x="88.4071%" y="1573" width="0.0578%" height="15" fill="rgb(216,69,40)" fg:x="3058" fg:w="2"/><text x="88.6571%" y="1583.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (2 samples, 0.06%)</title><rect x="88.4071%" y="1557" width="0.0578%" height="15" fill="rgb(240,36,33)" fg:x="3058" fg:w="2"/><text x="88.6571%" y="1567.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (2 samples, 0.06%)</title><rect x="88.4071%" y="1541" width="0.0578%" height="15" fill="rgb(231,128,14)" fg:x="3058" fg:w="2"/><text x="88.6571%" y="1551.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (2 samples, 0.06%)</title><rect x="88.4071%" y="1525" width="0.0578%" height="15" fill="rgb(245,143,14)" fg:x="3058" fg:w="2"/><text x="88.6571%" y="1535.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (2 samples, 0.06%)</title><rect x="88.4071%" y="1509" width="0.0578%" height="15" fill="rgb(222,130,28)" fg:x="3058" fg:w="2"/><text x="88.6571%" y="1519.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (6 samples, 0.17%)</title><rect x="89.2165%" y="1509" width="0.1735%" height="15" fill="rgb(212,10,48)" fg:x="3086" fg:w="6"/><text x="89.4665%" y="1519.50"></text></g><g><title>&lt;exchange_lib::commands::_::&lt;impl serde::de::Deserialize for exchange_lib::commands::TradeCommand&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (13 samples, 0.38%)</title><rect x="89.6791%" y="1413" width="0.3758%" height="15" fill="rgb(254,118,45)" fg:x="3102" fg:w="13"/><text x="89.9291%" y="1423.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (10 samples, 0.29%)</title><rect x="89.7658%" y="1397" width="0.2891%" height="15" fill="rgb(228,6,45)" fg:x="3105" fg:w="10"/><text x="90.0158%" y="1407.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (10 samples, 0.29%)</title><rect x="89.7658%" y="1381" width="0.2891%" height="15" fill="rgb(241,18,35)" fg:x="3105" fg:w="10"/><text x="90.0158%" y="1391.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (10 samples, 0.29%)</title><rect x="89.7658%" y="1365" width="0.2891%" height="15" fill="rgb(227,214,53)" fg:x="3105" fg:w="10"/><text x="90.0158%" y="1375.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (10 samples, 0.29%)</title><rect x="89.7658%" y="1349" width="0.2891%" height="15" fill="rgb(224,107,51)" fg:x="3105" fg:w="10"/><text x="90.0158%" y="1359.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (99 samples, 2.86%)</title><rect x="90.0549%" y="1413" width="2.8621%" height="15" fill="rgb(248,60,28)" fg:x="3115" fg:w="99"/><text x="90.3049%" y="1423.50">&lt;s..</text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (96 samples, 2.78%)</title><rect x="90.1417%" y="1397" width="2.7754%" height="15" fill="rgb(249,101,23)" fg:x="3118" fg:w="96"/><text x="90.3917%" y="1407.50">se..</text></g><g><title>core::result::Result&lt;T,E&gt;::map (7 samples, 0.20%)</title><rect x="92.7147%" y="1381" width="0.2024%" height="15" fill="rgb(228,51,19)" fg:x="3207" fg:w="7"/><text x="92.9647%" y="1391.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (1 samples, 0.03%)</title><rect x="92.9170%" y="1413" width="0.0289%" height="15" fill="rgb(213,20,6)" fg:x="3214" fg:w="1"/><text x="93.1670%" y="1423.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (126 samples, 3.64%)</title><rect x="89.3900%" y="1477" width="3.6427%" height="15" fill="rgb(212,124,10)" fg:x="3092" fg:w="126"/><text x="89.6400%" y="1487.50">&lt;cor..</text></g><g><title>&lt;exchange_lib::commands::_::&lt;impl serde::de::Deserialize for exchange_lib::commands::TradeCommand&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (126 samples, 3.64%)</title><rect x="89.3900%" y="1461" width="3.6427%" height="15" fill="rgb(248,3,40)" fg:x="3092" fg:w="126"/><text x="89.6400%" y="1471.50">&lt;exc..</text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (126 samples, 3.64%)</title><rect x="89.3900%" y="1445" width="3.6427%" height="15" fill="rgb(223,178,23)" fg:x="3092" fg:w="126"/><text x="89.6400%" y="1455.50">&lt;ser..</text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (126 samples, 3.64%)</title><rect x="89.3900%" y="1429" width="3.6427%" height="15" fill="rgb(240,132,45)" fg:x="3092" fg:w="126"/><text x="89.6400%" y="1439.50">&lt;ser..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::eat_char (3 samples, 0.09%)</title><rect x="92.9459%" y="1413" width="0.0867%" height="15" fill="rgb(245,164,36)" fg:x="3215" fg:w="3"/><text x="93.1959%" y="1423.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::discard (3 samples, 0.09%)</title><rect x="92.9459%" y="1397" width="0.0867%" height="15" fill="rgb(231,188,53)" fg:x="3215" fg:w="3"/><text x="93.1959%" y="1407.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::discard (3 samples, 0.09%)</title><rect x="92.9459%" y="1381" width="0.0867%" height="15" fill="rgb(237,198,39)" fg:x="3215" fg:w="3"/><text x="93.1959%" y="1391.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (4 samples, 0.12%)</title><rect x="93.0327%" y="1477" width="0.1156%" height="15" fill="rgb(223,120,35)" fg:x="3218" fg:w="4"/><text x="93.2827%" y="1487.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::eat_char (1 samples, 0.03%)</title><rect x="93.1483%" y="1477" width="0.0289%" height="15" fill="rgb(253,107,49)" fg:x="3222" fg:w="1"/><text x="93.3983%" y="1487.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::discard (1 samples, 0.03%)</title><rect x="93.1483%" y="1461" width="0.0289%" height="15" fill="rgb(216,44,31)" fg:x="3222" fg:w="1"/><text x="93.3983%" y="1471.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::discard (1 samples, 0.03%)</title><rect x="93.1483%" y="1445" width="0.0289%" height="15" fill="rgb(253,87,21)" fg:x="3222" fg:w="1"/><text x="93.3983%" y="1455.50"></text></g><g><title>serde::de::MapAccess::next_key (168 samples, 4.86%)</title><rect x="89.3900%" y="1509" width="4.8569%" height="15" fill="rgb(226,18,2)" fg:x="3092" fg:w="168"/><text x="89.6400%" y="1519.50">serde:..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (168 samples, 4.86%)</title><rect x="89.3900%" y="1493" width="4.8569%" height="15" fill="rgb(216,8,46)" fg:x="3092" fg:w="168"/><text x="89.6400%" y="1503.50">&lt;serde..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (37 samples, 1.07%)</title><rect x="93.1772%" y="1477" width="1.0697%" height="15" fill="rgb(226,140,39)" fg:x="3223" fg:w="37"/><text x="93.4272%" y="1487.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (31 samples, 0.90%)</title><rect x="93.3507%" y="1461" width="0.8962%" height="15" fill="rgb(221,194,54)" fg:x="3229" fg:w="31"/><text x="93.6007%" y="1471.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (31 samples, 0.90%)</title><rect x="93.3507%" y="1445" width="0.8962%" height="15" fill="rgb(213,92,11)" fg:x="3229" fg:w="31"/><text x="93.6007%" y="1455.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (31 samples, 0.90%)</title><rect x="93.3507%" y="1429" width="0.8962%" height="15" fill="rgb(229,162,46)" fg:x="3229" fg:w="31"/><text x="93.6007%" y="1439.50"></text></g><g><title>&lt;exchange_lib::order_side::_::&lt;impl serde::de::Deserialize for exchange_lib::order_side::OrderSide&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.03%)</title><rect x="94.6227%" y="1317" width="0.0289%" height="15" fill="rgb(214,111,36)" fg:x="3273" fg:w="1"/><text x="94.8727%" y="1327.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.03%)</title><rect x="94.6227%" y="1301" width="0.0289%" height="15" fill="rgb(207,6,21)" fg:x="3273" fg:w="1"/><text x="94.8727%" y="1311.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.03%)</title><rect x="94.6227%" y="1285" width="0.0289%" height="15" fill="rgb(213,127,38)" fg:x="3273" fg:w="1"/><text x="94.8727%" y="1295.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.03%)</title><rect x="94.6227%" y="1269" width="0.0289%" height="15" fill="rgb(238,118,32)" fg:x="3273" fg:w="1"/><text x="94.8727%" y="1279.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.03%)</title><rect x="94.6227%" y="1253" width="0.0289%" height="15" fill="rgb(240,139,39)" fg:x="3273" fg:w="1"/><text x="94.8727%" y="1263.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (12 samples, 0.35%)</title><rect x="94.6516%" y="1317" width="0.3469%" height="15" fill="rgb(235,10,37)" fg:x="3274" fg:w="12"/><text x="94.9016%" y="1327.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (10 samples, 0.29%)</title><rect x="94.7095%" y="1301" width="0.2891%" height="15" fill="rgb(249,171,38)" fg:x="3276" fg:w="10"/><text x="94.9595%" y="1311.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.03%)</title><rect x="94.9696%" y="1285" width="0.0289%" height="15" fill="rgb(242,144,32)" fg:x="3285" fg:w="1"/><text x="95.2196%" y="1295.50"></text></g><g><title>&lt;exchange_lib::order_side::_::&lt;impl serde::de::Deserialize for exchange_lib::order_side::OrderSide&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (19 samples, 0.55%)</title><rect x="94.4782%" y="1429" width="0.5493%" height="15" fill="rgb(217,117,21)" fg:x="3268" fg:w="19"/><text x="94.7282%" y="1439.50"></text></g><g><title>serde::de::EnumAccess::variant (19 samples, 0.55%)</title><rect x="94.4782%" y="1413" width="0.5493%" height="15" fill="rgb(249,87,1)" fg:x="3268" fg:w="19"/><text x="94.7282%" y="1423.50"></text></g><g><title>&lt;serde_json::de::UnitVariantAccess&lt;R&gt; as serde::de::EnumAccess&gt;::variant_seed (19 samples, 0.55%)</title><rect x="94.4782%" y="1397" width="0.5493%" height="15" fill="rgb(248,196,48)" fg:x="3268" fg:w="19"/><text x="94.7282%" y="1407.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (15 samples, 0.43%)</title><rect x="94.5938%" y="1381" width="0.4337%" height="15" fill="rgb(251,206,33)" fg:x="3272" fg:w="15"/><text x="94.8438%" y="1391.50"></text></g><g><title>&lt;exchange_lib::order_side::_::&lt;impl serde::de::Deserialize for exchange_lib::order_side::OrderSide&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (15 samples, 0.43%)</title><rect x="94.5938%" y="1365" width="0.4337%" height="15" fill="rgb(232,141,28)" fg:x="3272" fg:w="15"/><text x="94.8438%" y="1375.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (15 samples, 0.43%)</title><rect x="94.5938%" y="1349" width="0.4337%" height="15" fill="rgb(209,167,14)" fg:x="3272" fg:w="15"/><text x="94.8438%" y="1359.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (15 samples, 0.43%)</title><rect x="94.5938%" y="1333" width="0.4337%" height="15" fill="rgb(225,11,50)" fg:x="3272" fg:w="15"/><text x="94.8438%" y="1343.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.03%)</title><rect x="94.9986%" y="1317" width="0.0289%" height="15" fill="rgb(209,50,20)" fg:x="3286" fg:w="1"/><text x="95.2486%" y="1327.50"></text></g><g><title>exchange_lib::order_side::_::&lt;impl serde::de::Deserialize for exchange_lib::order_side::OrderSide&gt;::deserialize (26 samples, 0.75%)</title><rect x="94.3625%" y="1461" width="0.7517%" height="15" fill="rgb(212,17,46)" fg:x="3264" fg:w="26"/><text x="94.6125%" y="1471.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_enum (23 samples, 0.66%)</title><rect x="94.4493%" y="1445" width="0.6649%" height="15" fill="rgb(216,101,39)" fg:x="3267" fg:w="23"/><text x="94.6993%" y="1455.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (3 samples, 0.09%)</title><rect x="95.0275%" y="1429" width="0.0867%" height="15" fill="rgb(212,228,48)" fg:x="3287" fg:w="3"/><text x="95.2775%" y="1439.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (3 samples, 0.09%)</title><rect x="95.0275%" y="1413" width="0.0867%" height="15" fill="rgb(250,6,50)" fg:x="3287" fg:w="3"/><text x="95.2775%" y="1423.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (3 samples, 0.09%)</title><rect x="95.0275%" y="1397" width="0.0867%" height="15" fill="rgb(250,160,48)" fg:x="3287" fg:w="3"/><text x="95.2775%" y="1407.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (3 samples, 0.09%)</title><rect x="95.0275%" y="1381" width="0.0867%" height="15" fill="rgb(244,216,33)" fg:x="3287" fg:w="3"/><text x="95.2775%" y="1391.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_ident (1 samples, 0.03%)</title><rect x="95.1431%" y="1429" width="0.0289%" height="15" fill="rgb(207,157,5)" fg:x="3291" fg:w="1"/><text x="95.3931%" y="1439.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::next_char (1 samples, 0.03%)</title><rect x="95.1431%" y="1413" width="0.0289%" height="15" fill="rgb(228,199,8)" fg:x="3291" fg:w="1"/><text x="95.3931%" y="1423.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::next (1 samples, 0.03%)</title><rect x="95.1431%" y="1397" width="0.0289%" height="15" fill="rgb(227,80,20)" fg:x="3291" fg:w="1"/><text x="95.3931%" y="1407.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::next (1 samples, 0.03%)</title><rect x="95.1431%" y="1381" width="0.0289%" height="15" fill="rgb(222,9,33)" fg:x="3291" fg:w="1"/><text x="95.3931%" y="1391.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for bool&gt;::deserialize (3 samples, 0.09%)</title><rect x="95.1142%" y="1461" width="0.0867%" height="15" fill="rgb(239,44,28)" fg:x="3290" fg:w="3"/><text x="95.3642%" y="1471.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_bool (3 samples, 0.09%)</title><rect x="95.1142%" y="1445" width="0.0867%" height="15" fill="rgb(249,187,43)" fg:x="3290" fg:w="3"/><text x="95.3642%" y="1455.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.03%)</title><rect x="95.1720%" y="1429" width="0.0289%" height="15" fill="rgb(216,141,28)" fg:x="3292" fg:w="1"/><text x="95.4220%" y="1439.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::next_char (3 samples, 0.09%)</title><rect x="95.8369%" y="1397" width="0.0867%" height="15" fill="rgb(230,154,53)" fg:x="3315" fg:w="3"/><text x="96.0869%" y="1407.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::next (3 samples, 0.09%)</title><rect x="95.8369%" y="1381" width="0.0867%" height="15" fill="rgb(227,82,4)" fg:x="3315" fg:w="3"/><text x="96.0869%" y="1391.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::next (3 samples, 0.09%)</title><rect x="95.8369%" y="1365" width="0.0867%" height="15" fill="rgb(220,107,16)" fg:x="3315" fg:w="3"/><text x="96.0869%" y="1375.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (24 samples, 0.69%)</title><rect x="95.4900%" y="1413" width="0.6938%" height="15" fill="rgb(207,187,2)" fg:x="3303" fg:w="24"/><text x="95.7400%" y="1423.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_number (9 samples, 0.26%)</title><rect x="95.9237%" y="1397" width="0.2602%" height="15" fill="rgb(210,162,52)" fg:x="3318" fg:w="9"/><text x="96.1737%" y="1407.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (5 samples, 0.14%)</title><rect x="96.1839%" y="1413" width="0.1446%" height="15" fill="rgb(217,216,49)" fg:x="3327" fg:w="5"/><text x="96.4339%" y="1423.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (5 samples, 0.14%)</title><rect x="96.1839%" y="1397" width="0.1446%" height="15" fill="rgb(218,146,49)" fg:x="3327" fg:w="5"/><text x="96.4339%" y="1407.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (5 samples, 0.14%)</title><rect x="96.1839%" y="1381" width="0.1446%" height="15" fill="rgb(216,55,40)" fg:x="3327" fg:w="5"/><text x="96.4339%" y="1391.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (5 samples, 0.14%)</title><rect x="96.1839%" y="1365" width="0.1446%" height="15" fill="rgb(208,196,21)" fg:x="3327" fg:w="5"/><text x="96.4339%" y="1375.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (71 samples, 2.05%)</title><rect x="94.3047%" y="1477" width="2.0526%" height="15" fill="rgb(242,117,42)" fg:x="3262" fg:w="71"/><text x="94.5547%" y="1487.50">&lt;..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u64&gt;::deserialize (40 samples, 1.16%)</title><rect x="95.2009%" y="1461" width="1.1564%" height="15" fill="rgb(210,11,23)" fg:x="3293" fg:w="40"/><text x="95.4509%" y="1471.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_u64 (40 samples, 1.16%)</title><rect x="95.2009%" y="1445" width="1.1564%" height="15" fill="rgb(217,110,2)" fg:x="3293" fg:w="40"/><text x="95.4509%" y="1455.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::deserialize_number (40 samples, 1.16%)</title><rect x="95.2009%" y="1429" width="1.1564%" height="15" fill="rgb(229,77,54)" fg:x="3293" fg:w="40"/><text x="95.4509%" y="1439.50"></text></g><g><title>serde_json::de::ParserNumber::visit (1 samples, 0.03%)</title><rect x="96.3284%" y="1413" width="0.0289%" height="15" fill="rgb(218,53,16)" fg:x="3332" fg:w="1"/><text x="96.5784%" y="1423.50"></text></g><g><title>&lt;exchange_lib::commands::_::&lt;impl serde::de::Deserialize for exchange_lib::commands::TradeCommand&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (278 samples, 8.04%)</title><rect x="88.6962%" y="1525" width="8.0370%" height="15" fill="rgb(215,38,13)" fg:x="3068" fg:w="278"/><text x="88.9462%" y="1535.50">&lt;exchange_l..</text></g><g><title>serde::de::MapAccess::next_value (86 samples, 2.49%)</title><rect x="94.2469%" y="1509" width="2.4863%" height="15" fill="rgb(235,42,18)" fg:x="3260" fg:w="86"/><text x="94.4969%" y="1519.50">se..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (86 samples, 2.49%)</title><rect x="94.2469%" y="1493" width="2.4863%" height="15" fill="rgb(219,66,54)" fg:x="3260" fg:w="86"/><text x="94.4969%" y="1503.50">&lt;s..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (13 samples, 0.38%)</title><rect x="96.3573%" y="1477" width="0.3758%" height="15" fill="rgb(222,205,4)" fg:x="3333" fg:w="13"/><text x="96.6073%" y="1487.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (13 samples, 0.38%)</title><rect x="96.3573%" y="1461" width="0.3758%" height="15" fill="rgb(227,213,46)" fg:x="3333" fg:w="13"/><text x="96.6073%" y="1471.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (13 samples, 0.38%)</title><rect x="96.3573%" y="1445" width="0.3758%" height="15" fill="rgb(250,145,42)" fg:x="3333" fg:w="13"/><text x="96.6073%" y="1455.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (13 samples, 0.38%)</title><rect x="96.3573%" y="1429" width="0.3758%" height="15" fill="rgb(219,15,2)" fg:x="3333" fg:w="13"/><text x="96.6073%" y="1439.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (13 samples, 0.38%)</title><rect x="96.3573%" y="1413" width="0.3758%" height="15" fill="rgb(231,181,52)" fg:x="3333" fg:w="13"/><text x="96.6073%" y="1423.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::end_map (3 samples, 0.09%)</title><rect x="96.7332%" y="1525" width="0.0867%" height="15" fill="rgb(235,1,42)" fg:x="3346" fg:w="3"/><text x="96.9832%" y="1535.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (3 samples, 0.09%)</title><rect x="96.7332%" y="1509" width="0.0867%" height="15" fill="rgb(249,88,27)" fg:x="3346" fg:w="3"/><text x="96.9832%" y="1519.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.03%)</title><rect x="96.7910%" y="1493" width="0.0289%" height="15" fill="rgb(235,145,16)" fg:x="3348" fg:w="1"/><text x="97.0410%" y="1503.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (1 samples, 0.03%)</title><rect x="96.7910%" y="1477" width="0.0289%" height="15" fill="rgb(237,114,19)" fg:x="3348" fg:w="1"/><text x="97.0410%" y="1487.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (1 samples, 0.03%)</title><rect x="96.7910%" y="1461" width="0.0289%" height="15" fill="rgb(238,51,50)" fg:x="3348" fg:w="1"/><text x="97.0410%" y="1471.50"></text></g><g><title>&lt;exchange_lib::commands::_::&lt;impl serde::de::Deserialize for exchange_lib::commands::OrderCommand&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (328 samples, 9.48%)</title><rect x="87.3663%" y="1621" width="9.4825%" height="15" fill="rgb(205,194,25)" fg:x="3022" fg:w="328"/><text x="87.6163%" y="1631.50">&lt;exchange_lib:..</text></g><g><title>serde::de::VariantAccess::newtype_variant (290 samples, 8.38%)</title><rect x="88.4649%" y="1605" width="8.3839%" height="15" fill="rgb(215,203,17)" fg:x="3060" fg:w="290"/><text x="88.7149%" y="1615.50">serde::de::V..</text></g><g><title>&lt;serde_json::de::VariantAccess&lt;R&gt; as serde::de::VariantAccess&gt;::newtype_variant_seed (290 samples, 8.38%)</title><rect x="88.4649%" y="1589" width="8.3839%" height="15" fill="rgb(233,112,49)" fg:x="3060" fg:w="290"/><text x="88.7149%" y="1599.50">&lt;serde_json:..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (290 samples, 8.38%)</title><rect x="88.4649%" y="1573" width="8.3839%" height="15" fill="rgb(241,130,26)" fg:x="3060" fg:w="290"/><text x="88.7149%" y="1583.50">&lt;core::marke..</text></g><g><title>exchange_lib::commands::_::&lt;impl serde::de::Deserialize for exchange_lib::commands::TradeCommand&gt;::deserialize (290 samples, 8.38%)</title><rect x="88.4649%" y="1557" width="8.3839%" height="15" fill="rgb(252,223,19)" fg:x="3060" fg:w="290"/><text x="88.7149%" y="1567.50">exchange_lib..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (289 samples, 8.36%)</title><rect x="88.4938%" y="1541" width="8.3550%" height="15" fill="rgb(211,95,25)" fg:x="3061" fg:w="289"/><text x="88.7438%" y="1551.50">&lt;&amp;mut serde_..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.03%)</title><rect x="96.8199%" y="1525" width="0.0289%" height="15" fill="rgb(251,182,27)" fg:x="3349" fg:w="1"/><text x="97.0699%" y="1535.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.03%)</title><rect x="96.8199%" y="1509" width="0.0289%" height="15" fill="rgb(238,24,4)" fg:x="3349" fg:w="1"/><text x="97.0699%" y="1519.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (1 samples, 0.03%)</title><rect x="96.8199%" y="1493" width="0.0289%" height="15" fill="rgb(224,220,25)" fg:x="3349" fg:w="1"/><text x="97.0699%" y="1503.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (1 samples, 0.03%)</title><rect x="96.8199%" y="1477" width="0.0289%" height="15" fill="rgb(239,133,26)" fg:x="3349" fg:w="1"/><text x="97.0699%" y="1487.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::eat_char (1 samples, 0.03%)</title><rect x="96.8488%" y="1621" width="0.0289%" height="15" fill="rgb(211,94,48)" fg:x="3350" fg:w="1"/><text x="97.0988%" y="1631.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::discard (1 samples, 0.03%)</title><rect x="96.8488%" y="1605" width="0.0289%" height="15" fill="rgb(239,87,6)" fg:x="3350" fg:w="1"/><text x="97.0988%" y="1615.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::discard (1 samples, 0.03%)</title><rect x="96.8488%" y="1589" width="0.0289%" height="15" fill="rgb(227,62,0)" fg:x="3350" fg:w="1"/><text x="97.0988%" y="1599.50"></text></g><g><title>&lt;exchange_lib::message_queue::_::&lt;impl serde::de::Deserialize for exchange_lib::message_queue::Payload&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (380 samples, 10.99%)</title><rect x="86.0075%" y="1717" width="10.9858%" height="15" fill="rgb(211,226,4)" fg:x="2975" fg:w="380"/><text x="86.2575%" y="1727.50">&lt;exchange_lib::m..</text></g><g><title>serde::de::VariantAccess::newtype_variant (340 samples, 9.83%)</title><rect x="87.1639%" y="1701" width="9.8294%" height="15" fill="rgb(253,38,52)" fg:x="3015" fg:w="340"/><text x="87.4139%" y="1711.50">serde::de::Var..</text></g><g><title>&lt;serde_json::de::VariantAccess&lt;R&gt; as serde::de::VariantAccess&gt;::newtype_variant_seed (340 samples, 9.83%)</title><rect x="87.1639%" y="1685" width="9.8294%" height="15" fill="rgb(229,126,40)" fg:x="3015" fg:w="340"/><text x="87.4139%" y="1695.50">&lt;serde_json::d..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (340 samples, 9.83%)</title><rect x="87.1639%" y="1669" width="9.8294%" height="15" fill="rgb(229,165,44)" fg:x="3015" fg:w="340"/><text x="87.4139%" y="1679.50">&lt;core::marker:..</text></g><g><title>exchange_lib::commands::_::&lt;impl serde::de::Deserialize for exchange_lib::commands::OrderCommand&gt;::deserialize (339 samples, 9.80%)</title><rect x="87.1928%" y="1653" width="9.8005%" height="15" fill="rgb(247,95,47)" fg:x="3016" fg:w="339"/><text x="87.4428%" y="1663.50">exchange_lib::..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_enum (339 samples, 9.80%)</title><rect x="87.1928%" y="1637" width="9.8005%" height="15" fill="rgb(216,140,30)" fg:x="3016" fg:w="339"/><text x="87.4428%" y="1647.50">&lt;&amp;mut serde_js..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (4 samples, 0.12%)</title><rect x="96.8777%" y="1621" width="0.1156%" height="15" fill="rgb(246,214,8)" fg:x="3351" fg:w="4"/><text x="97.1277%" y="1631.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (4 samples, 0.12%)</title><rect x="96.8777%" y="1605" width="0.1156%" height="15" fill="rgb(227,224,15)" fg:x="3351" fg:w="4"/><text x="97.1277%" y="1615.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (4 samples, 0.12%)</title><rect x="96.8777%" y="1589" width="0.1156%" height="15" fill="rgb(233,175,4)" fg:x="3351" fg:w="4"/><text x="97.1277%" y="1599.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (4 samples, 0.12%)</title><rect x="96.8777%" y="1573" width="0.1156%" height="15" fill="rgb(221,66,45)" fg:x="3351" fg:w="4"/><text x="97.1277%" y="1583.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::eat_char (1 samples, 0.03%)</title><rect x="96.9934%" y="1717" width="0.0289%" height="15" fill="rgb(221,178,18)" fg:x="3355" fg:w="1"/><text x="97.2434%" y="1727.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::discard (1 samples, 0.03%)</title><rect x="96.9934%" y="1701" width="0.0289%" height="15" fill="rgb(213,81,29)" fg:x="3355" fg:w="1"/><text x="97.2434%" y="1711.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::discard (1 samples, 0.03%)</title><rect x="96.9934%" y="1685" width="0.0289%" height="15" fill="rgb(220,89,49)" fg:x="3355" fg:w="1"/><text x="97.2434%" y="1695.50"></text></g><g><title>exchange_lib::message_queue::_::&lt;impl serde::de::Deserialize for exchange_lib::message_queue::Payload&gt;::deserialize (391 samples, 11.30%)</title><rect x="85.8630%" y="1749" width="11.3038%" height="15" fill="rgb(227,60,33)" fg:x="2970" fg:w="391"/><text x="86.1130%" y="1759.50">exchange_lib::mes..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_enum (390 samples, 11.27%)</title><rect x="85.8919%" y="1733" width="11.2749%" height="15" fill="rgb(205,113,12)" fg:x="2971" fg:w="390"/><text x="86.1419%" y="1743.50">&lt;&amp;mut serde_json:..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (5 samples, 0.14%)</title><rect x="97.0223%" y="1717" width="0.1446%" height="15" fill="rgb(211,32,1)" fg:x="3356" fg:w="5"/><text x="97.2723%" y="1727.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (3 samples, 0.09%)</title><rect x="97.0801%" y="1701" width="0.0867%" height="15" fill="rgb(246,2,12)" fg:x="3358" fg:w="3"/><text x="97.3301%" y="1711.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (3 samples, 0.09%)</title><rect x="97.0801%" y="1685" width="0.0867%" height="15" fill="rgb(243,37,27)" fg:x="3358" fg:w="3"/><text x="97.3301%" y="1695.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (3 samples, 0.09%)</title><rect x="97.0801%" y="1669" width="0.0867%" height="15" fill="rgb(248,211,31)" fg:x="3358" fg:w="3"/><text x="97.3301%" y="1679.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="97.3403%" y="1493" width="0.0289%" height="15" fill="rgb(242,146,47)" fg:x="3367" fg:w="1"/><text x="97.5903%" y="1503.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.26%)</title><rect x="97.3114%" y="1589" width="0.2602%" height="15" fill="rgb(206,70,20)" fg:x="3366" fg:w="9"/><text x="97.5614%" y="1599.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.26%)</title><rect x="97.3114%" y="1573" width="0.2602%" height="15" fill="rgb(215,10,51)" fg:x="3366" fg:w="9"/><text x="97.5614%" y="1583.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.26%)</title><rect x="97.3114%" y="1557" width="0.2602%" height="15" fill="rgb(243,178,53)" fg:x="3366" fg:w="9"/><text x="97.5614%" y="1567.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.23%)</title><rect x="97.3403%" y="1541" width="0.2313%" height="15" fill="rgb(233,221,20)" fg:x="3367" fg:w="8"/><text x="97.5903%" y="1551.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.23%)</title><rect x="97.3403%" y="1525" width="0.2313%" height="15" fill="rgb(218,95,35)" fg:x="3367" fg:w="8"/><text x="97.5903%" y="1535.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.23%)</title><rect x="97.3403%" y="1509" width="0.2313%" height="15" fill="rgb(229,13,5)" fg:x="3367" fg:w="8"/><text x="97.5903%" y="1519.50"></text></g><g><title>malloc (7 samples, 0.20%)</title><rect x="97.3692%" y="1493" width="0.2024%" height="15" fill="rgb(252,164,30)" fg:x="3368" fg:w="7"/><text x="97.6192%" y="1503.50"></text></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (11 samples, 0.32%)</title><rect x="97.3114%" y="1701" width="0.3180%" height="15" fill="rgb(232,68,36)" fg:x="3366" fg:w="11"/><text x="97.5614%" y="1711.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (11 samples, 0.32%)</title><rect x="97.3114%" y="1685" width="0.3180%" height="15" fill="rgb(219,59,54)" fg:x="3366" fg:w="11"/><text x="97.5614%" y="1695.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (11 samples, 0.32%)</title><rect x="97.3114%" y="1669" width="0.3180%" height="15" fill="rgb(250,92,33)" fg:x="3366" fg:w="11"/><text x="97.5614%" y="1679.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (11 samples, 0.32%)</title><rect x="97.3114%" y="1653" width="0.3180%" height="15" fill="rgb(229,162,54)" fg:x="3366" fg:w="11"/><text x="97.5614%" y="1663.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (11 samples, 0.32%)</title><rect x="97.3114%" y="1637" width="0.3180%" height="15" fill="rgb(244,114,52)" fg:x="3366" fg:w="11"/><text x="97.5614%" y="1647.50"></text></g><g><title>alloc::slice::hack::to_vec (11 samples, 0.32%)</title><rect x="97.3114%" y="1621" width="0.3180%" height="15" fill="rgb(212,211,43)" fg:x="3366" fg:w="11"/><text x="97.5614%" y="1631.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (11 samples, 0.32%)</title><rect x="97.3114%" y="1605" width="0.3180%" height="15" fill="rgb(226,147,8)" fg:x="3366" fg:w="11"/><text x="97.5614%" y="1615.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.06%)</title><rect x="97.5716%" y="1589" width="0.0578%" height="15" fill="rgb(226,23,13)" fg:x="3375" fg:w="2"/><text x="97.8216%" y="1599.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="97.5716%" y="1573" width="0.0578%" height="15" fill="rgb(240,63,4)" fg:x="3375" fg:w="2"/><text x="97.8216%" y="1583.50"></text></g><g><title>[libc.so.6] (2 samples, 0.06%)</title><rect x="97.5716%" y="1557" width="0.0578%" height="15" fill="rgb(221,1,32)" fg:x="3375" fg:w="2"/><text x="97.8216%" y="1567.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (9 samples, 0.26%)</title><rect x="97.6294%" y="1701" width="0.2602%" height="15" fill="rgb(242,117,10)" fg:x="3377" fg:w="9"/><text x="97.8794%" y="1711.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (8 samples, 0.23%)</title><rect x="97.6583%" y="1685" width="0.2313%" height="15" fill="rgb(249,172,44)" fg:x="3378" fg:w="8"/><text x="97.9083%" y="1695.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.03%)</title><rect x="97.8607%" y="1669" width="0.0289%" height="15" fill="rgb(244,46,45)" fg:x="3385" fg:w="1"/><text x="98.1107%" y="1679.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (418 samples, 12.08%)</title><rect x="85.8341%" y="1765" width="12.0844%" height="15" fill="rgb(206,43,17)" fg:x="2969" fg:w="418"/><text x="86.0841%" y="1775.50">&lt;core::marker::Pha..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (26 samples, 0.75%)</title><rect x="97.1668%" y="1749" width="0.7517%" height="15" fill="rgb(239,218,39)" fg:x="3361" fg:w="26"/><text x="97.4168%" y="1759.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (25 samples, 0.72%)</title><rect x="97.1957%" y="1733" width="0.7228%" height="15" fill="rgb(208,169,54)" fg:x="3362" fg:w="25"/><text x="97.4457%" y="1743.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (25 samples, 0.72%)</title><rect x="97.1957%" y="1717" width="0.7228%" height="15" fill="rgb(247,25,42)" fg:x="3362" fg:w="25"/><text x="97.4457%" y="1727.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.03%)</title><rect x="97.8896%" y="1701" width="0.0289%" height="15" fill="rgb(226,23,31)" fg:x="3386" fg:w="1"/><text x="98.1396%" y="1711.50"></text></g><g><title>&lt;exchange_lib::message_queue::_::&lt;impl serde::de::Deserialize for exchange_lib::message_queue::Message&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (483 samples, 13.96%)</title><rect x="84.0127%" y="1813" width="13.9636%" height="15" fill="rgb(247,16,28)" fg:x="2906" fg:w="483"/><text x="84.2627%" y="1823.50">&lt;exchange_lib::messag..</text></g><g><title>serde::de::MapAccess::next_value (420 samples, 12.14%)</title><rect x="85.8341%" y="1797" width="12.1422%" height="15" fill="rgb(231,147,38)" fg:x="2969" fg:w="420"/><text x="86.0841%" y="1807.50">serde::de::MapAcce..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (420 samples, 12.14%)</title><rect x="85.8341%" y="1781" width="12.1422%" height="15" fill="rgb(253,81,48)" fg:x="2969" fg:w="420"/><text x="86.0841%" y="1791.50">&lt;serde_json::de::M..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (2 samples, 0.06%)</title><rect x="97.9185%" y="1765" width="0.0578%" height="15" fill="rgb(249,222,43)" fg:x="3387" fg:w="2"/><text x="98.1685%" y="1775.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (2 samples, 0.06%)</title><rect x="97.9185%" y="1749" width="0.0578%" height="15" fill="rgb(221,3,27)" fg:x="3387" fg:w="2"/><text x="98.1685%" y="1759.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.03%)</title><rect x="97.9474%" y="1733" width="0.0289%" height="15" fill="rgb(228,180,5)" fg:x="3388" fg:w="1"/><text x="98.1974%" y="1743.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (1 samples, 0.03%)</title><rect x="97.9474%" y="1717" width="0.0289%" height="15" fill="rgb(227,131,42)" fg:x="3388" fg:w="1"/><text x="98.1974%" y="1727.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (1 samples, 0.03%)</title><rect x="97.9474%" y="1701" width="0.0289%" height="15" fill="rgb(212,3,39)" fg:x="3388" fg:w="1"/><text x="98.1974%" y="1711.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::end_map (1 samples, 0.03%)</title><rect x="97.9763%" y="1813" width="0.0289%" height="15" fill="rgb(226,45,5)" fg:x="3389" fg:w="1"/><text x="98.2263%" y="1823.50"></text></g><g><title>exchange_lib::message_queue::_::&lt;impl serde::de::Deserialize for exchange_lib::message_queue::Message&gt;::deserialize (512 samples, 14.80%)</title><rect x="83.2321%" y="1845" width="14.8020%" height="15" fill="rgb(215,167,45)" fg:x="2879" fg:w="512"/><text x="83.4821%" y="1855.50">exchange_lib::message_q..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (512 samples, 14.80%)</title><rect x="83.2321%" y="1829" width="14.8020%" height="15" fill="rgb(250,218,53)" fg:x="2879" fg:w="512"/><text x="83.4821%" y="1839.50">&lt;&amp;mut serde_json::de::D..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.03%)</title><rect x="98.0052%" y="1813" width="0.0289%" height="15" fill="rgb(207,140,0)" fg:x="3390" fg:w="1"/><text x="98.2552%" y="1823.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.03%)</title><rect x="98.0052%" y="1797" width="0.0289%" height="15" fill="rgb(238,133,51)" fg:x="3390" fg:w="1"/><text x="98.2552%" y="1807.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (1 samples, 0.03%)</title><rect x="98.0052%" y="1781" width="0.0289%" height="15" fill="rgb(218,203,53)" fg:x="3390" fg:w="1"/><text x="98.2552%" y="1791.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (1 samples, 0.03%)</title><rect x="98.0052%" y="1765" width="0.0289%" height="15" fill="rgb(226,184,25)" fg:x="3390" fg:w="1"/><text x="98.2552%" y="1775.50"></text></g><g><title>exchange_matching_engine::order_book_processor::OrderBookProcessor::run (2,885 samples, 83.41%)</title><rect x="14.9754%" y="1909" width="83.4056%" height="15" fill="rgb(231,121,21)" fg:x="518" fg:w="2885"/><text x="15.2254%" y="1919.50">exchange_matching_engine::order_book_processor::OrderBookProcessor::run</text></g><g><title>exchange_lib::message_queue::pubsub_batching (2,885 samples, 83.41%)</title><rect x="14.9754%" y="1893" width="83.4056%" height="15" fill="rgb(251,14,34)" fg:x="518" fg:w="2885"/><text x="15.2254%" y="1903.50">exchange_lib::message_queue::pubsub_batching</text></g><g><title>serde_json::de::from_str (539 samples, 15.58%)</title><rect x="82.7985%" y="1877" width="15.5825%" height="15" fill="rgb(249,193,11)" fg:x="2864" fg:w="539"/><text x="83.0485%" y="1887.50">serde_json::de::from_str</text></g><g><title>serde_json::de::from_trait (538 samples, 15.55%)</title><rect x="82.8274%" y="1861" width="15.5536%" height="15" fill="rgb(220,172,37)" fg:x="2865" fg:w="538"/><text x="83.0774%" y="1871.50">serde_json::de::from_tra..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::new (12 samples, 0.35%)</title><rect x="98.0341%" y="1845" width="0.3469%" height="15" fill="rgb(231,229,43)" fg:x="3391" fg:w="12"/><text x="98.2841%" y="1855.50"></text></g><g><title>malloc (4 samples, 0.12%)</title><rect x="98.3810%" y="1909" width="0.1156%" height="15" fill="rgb(250,161,5)" fg:x="3403" fg:w="4"/><text x="98.6310%" y="1919.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (4 samples, 0.12%)</title><rect x="98.4967%" y="1909" width="0.1156%" height="15" fill="rgb(218,225,18)" fg:x="3407" fg:w="4"/><text x="98.7467%" y="1919.50"></text></g><g><title>redis::cmd::Cmd::new (1 samples, 0.03%)</title><rect x="98.6123%" y="1909" width="0.0289%" height="15" fill="rgb(245,45,42)" fg:x="3411" fg:w="1"/><text x="98.8623%" y="1919.50"></text></g><g><title>redis::cmd::write_command (4 samples, 0.12%)</title><rect x="98.6412%" y="1909" width="0.1156%" height="15" fill="rgb(211,115,1)" fg:x="3412" fg:w="4"/><text x="98.8912%" y="1919.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (2 samples, 0.06%)</title><rect x="98.6990%" y="1893" width="0.0578%" height="15" fill="rgb(248,133,52)" fg:x="3414" fg:w="2"/><text x="98.9490%" y="1903.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.06%)</title><rect x="98.6990%" y="1877" width="0.0578%" height="15" fill="rgb(238,100,21)" fg:x="3414" fg:w="2"/><text x="98.9490%" y="1887.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.06%)</title><rect x="98.6990%" y="1861" width="0.0578%" height="15" fill="rgb(247,144,11)" fg:x="3414" fg:w="2"/><text x="98.9490%" y="1871.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.06%)</title><rect x="98.6990%" y="1845" width="0.0578%" height="15" fill="rgb(206,164,16)" fg:x="3414" fg:w="2"/><text x="98.9490%" y="1855.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="98.6990%" y="1829" width="0.0578%" height="15" fill="rgb(222,34,3)" fg:x="3414" fg:w="2"/><text x="98.9490%" y="1839.50"></text></g><g><title>redis::pipeline::Pipeline::query (1 samples, 0.03%)</title><rect x="98.7569%" y="1909" width="0.0289%" height="15" fill="rgb(248,82,4)" fg:x="3416" fg:w="1"/><text x="99.0069%" y="1919.50"></text></g><g><title>redis::types::from_redis_value (1 samples, 0.03%)</title><rect x="98.7569%" y="1893" width="0.0289%" height="15" fill="rgb(228,81,46)" fg:x="3416" fg:w="1"/><text x="99.0069%" y="1903.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.03%)</title><rect x="98.7858%" y="1909" width="0.0289%" height="15" fill="rgb(227,67,47)" fg:x="3417" fg:w="1"/><text x="99.0358%" y="1919.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.09%)</title><rect x="98.8147%" y="1909" width="0.0867%" height="15" fill="rgb(215,93,53)" fg:x="3418" fg:w="3"/><text x="99.0647%" y="1919.50"></text></g><g><title>[unknown] (3,074 samples, 88.87%)</title><rect x="10.0607%" y="1925" width="88.8696%" height="15" fill="rgb(248,194,39)" fg:x="348" fg:w="3074"/><text x="10.3107%" y="1935.50">[unknown]</text></g><g><title>serde_json::ser::to_vec (1 samples, 0.03%)</title><rect x="98.9014%" y="1909" width="0.0289%" height="15" fill="rgb(215,5,19)" fg:x="3421" fg:w="1"/><text x="99.1514%" y="1919.50"></text></g><g><title>__rdl_realloc (3 samples, 0.09%)</title><rect x="98.9303%" y="1925" width="0.0867%" height="15" fill="rgb(226,215,51)" fg:x="3422" fg:w="3"/><text x="99.1803%" y="1935.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="99.0171%" y="1925" width="0.0289%" height="15" fill="rgb(225,56,26)" fg:x="3425" fg:w="1"/><text x="99.2671%" y="1935.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (1 samples, 0.03%)</title><rect x="99.0460%" y="1925" width="0.0289%" height="15" fill="rgb(222,75,29)" fg:x="3426" fg:w="1"/><text x="99.2960%" y="1935.50"></text></g><g><title>cfree (3 samples, 0.09%)</title><rect x="99.0749%" y="1925" width="0.0867%" height="15" fill="rgb(236,139,6)" fg:x="3427" fg:w="3"/><text x="99.3249%" y="1935.50"></text></g><g><title>combine::parser::ParseMode::parse_committed (2 samples, 0.06%)</title><rect x="99.1616%" y="1925" width="0.0578%" height="15" fill="rgb(223,137,36)" fg:x="3430" fg:w="2"/><text x="99.4116%" y="1935.50"></text></g><g><title>combine::parser::byte::memslice (1 samples, 0.03%)</title><rect x="99.2194%" y="1925" width="0.0289%" height="15" fill="rgb(226,99,2)" fg:x="3432" fg:w="1"/><text x="99.4694%" y="1935.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.03%)</title><rect x="99.2483%" y="1925" width="0.0289%" height="15" fill="rgb(206,133,23)" fg:x="3433" fg:w="1"/><text x="99.4983%" y="1935.50"></text></g><g><title>exchange_lib::commands::_::&lt;impl serde::de::Deserialize for exchange_lib::commands::OrderCommand&gt;::deserialize (1 samples, 0.03%)</title><rect x="99.2772%" y="1925" width="0.0289%" height="15" fill="rgb(243,173,15)" fg:x="3434" fg:w="1"/><text x="99.5272%" y="1935.50"></text></g><g><title>exchange_lib::event::_::&lt;impl serde::ser::Serialize for exchange_lib::event::MatchingEngineEvent&gt;::serialize (3 samples, 0.09%)</title><rect x="99.3062%" y="1925" width="0.0867%" height="15" fill="rgb(228,69,28)" fg:x="3435" fg:w="3"/><text x="99.5562%" y="1935.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeTupleVariant&gt;::serialize_field (1 samples, 0.03%)</title><rect x="99.3640%" y="1909" width="0.0289%" height="15" fill="rgb(212,51,22)" fg:x="3437" fg:w="1"/><text x="99.6140%" y="1919.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeSeq&gt;::serialize_element (1 samples, 0.03%)</title><rect x="99.3640%" y="1893" width="0.0289%" height="15" fill="rgb(227,113,0)" fg:x="3437" fg:w="1"/><text x="99.6140%" y="1903.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u64&gt;::serialize (1 samples, 0.03%)</title><rect x="99.3640%" y="1877" width="0.0289%" height="15" fill="rgb(252,84,27)" fg:x="3437" fg:w="1"/><text x="99.6140%" y="1887.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_u64 (1 samples, 0.03%)</title><rect x="99.3640%" y="1861" width="0.0289%" height="15" fill="rgb(223,145,39)" fg:x="3437" fg:w="1"/><text x="99.6140%" y="1871.50"></text></g><g><title>serde_json::ser::Formatter::write_u64 (1 samples, 0.03%)</title><rect x="99.3640%" y="1845" width="0.0289%" height="15" fill="rgb(239,219,30)" fg:x="3437" fg:w="1"/><text x="99.6140%" y="1855.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.03%)</title><rect x="99.3640%" y="1829" width="0.0289%" height="15" fill="rgb(224,196,39)" fg:x="3437" fg:w="1"/><text x="99.6140%" y="1839.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.03%)</title><rect x="99.3640%" y="1813" width="0.0289%" height="15" fill="rgb(205,35,43)" fg:x="3437" fg:w="1"/><text x="99.6140%" y="1823.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="99.3640%" y="1797" width="0.0289%" height="15" fill="rgb(228,201,21)" fg:x="3437" fg:w="1"/><text x="99.6140%" y="1807.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="99.3640%" y="1781" width="0.0289%" height="15" fill="rgb(237,118,16)" fg:x="3437" fg:w="1"/><text x="99.6140%" y="1791.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="99.3640%" y="1765" width="0.0289%" height="15" fill="rgb(241,17,19)" fg:x="3437" fg:w="1"/><text x="99.6140%" y="1775.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="99.3640%" y="1749" width="0.0289%" height="15" fill="rgb(214,10,25)" fg:x="3437" fg:w="1"/><text x="99.6140%" y="1759.50"></text></g><g><title>exchange_lib::message_queue::_::&lt;impl serde::de::Deserialize for exchange_lib::message_queue::Payload&gt;::deserialize (1 samples, 0.03%)</title><rect x="99.3929%" y="1925" width="0.0289%" height="15" fill="rgb(238,37,29)" fg:x="3438" fg:w="1"/><text x="99.6429%" y="1935.50"></text></g><g><title>exchange_lib::message_queue::_::&lt;impl serde::ser::Serialize for exchange_lib::message_queue::Payload&gt;::serialize (1 samples, 0.03%)</title><rect x="99.4218%" y="1925" width="0.0289%" height="15" fill="rgb(253,83,25)" fg:x="3439" fg:w="1"/><text x="99.6718%" y="1935.50"></text></g><g><title>exchange_matching_engine::order::StandingOrder::notify (1 samples, 0.03%)</title><rect x="99.4507%" y="1925" width="0.0289%" height="15" fill="rgb(234,192,12)" fg:x="3440" fg:w="1"/><text x="99.7007%" y="1935.50"></text></g><g><title>malloc (2 samples, 0.06%)</title><rect x="99.4796%" y="1925" width="0.0578%" height="15" fill="rgb(241,216,45)" fg:x="3441" fg:w="2"/><text x="99.7296%" y="1935.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (1 samples, 0.03%)</title><rect x="99.5374%" y="1925" width="0.0289%" height="15" fill="rgb(242,22,33)" fg:x="3443" fg:w="1"/><text x="99.7874%" y="1935.50"></text></g><g><title>realloc (2 samples, 0.06%)</title><rect x="99.5663%" y="1925" width="0.0578%" height="15" fill="rgb(231,105,49)" fg:x="3444" fg:w="2"/><text x="99.8163%" y="1935.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="99.6820%" y="1813" width="0.0289%" height="15" fill="rgb(218,204,15)" fg:x="3448" fg:w="1"/><text x="99.9320%" y="1823.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="99.6820%" y="1797" width="0.0289%" height="15" fill="rgb(235,138,41)" fg:x="3448" fg:w="1"/><text x="99.9320%" y="1807.50"></text></g><g><title>redis::cmd::cmd (4 samples, 0.12%)</title><rect x="99.6242%" y="1925" width="0.1156%" height="15" fill="rgb(246,0,9)" fg:x="3446" fg:w="4"/><text x="99.8742%" y="1935.50"></text></g><g><title>redis::cmd::Cmd::arg (2 samples, 0.06%)</title><rect x="99.6820%" y="1909" width="0.0578%" height="15" fill="rgb(210,74,4)" fg:x="3448" fg:w="2"/><text x="99.9320%" y="1919.50"></text></g><g><title>&lt;&amp;str as redis::types::ToRedisArgs&gt;::write_redis_args (2 samples, 0.06%)</title><rect x="99.6820%" y="1893" width="0.0578%" height="15" fill="rgb(250,60,41)" fg:x="3448" fg:w="2"/><text x="99.9320%" y="1903.50"></text></g><g><title>&lt;redis::cmd::Cmd as redis::types::RedisWrite&gt;::write_arg (2 samples, 0.06%)</title><rect x="99.6820%" y="1877" width="0.0578%" height="15" fill="rgb(220,115,12)" fg:x="3448" fg:w="2"/><text x="99.9320%" y="1887.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.06%)</title><rect x="99.6820%" y="1861" width="0.0578%" height="15" fill="rgb(237,100,13)" fg:x="3448" fg:w="2"/><text x="99.9320%" y="1871.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.06%)</title><rect x="99.6820%" y="1845" width="0.0578%" height="15" fill="rgb(213,55,26)" fg:x="3448" fg:w="2"/><text x="99.9320%" y="1855.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.06%)</title><rect x="99.6820%" y="1829" width="0.0578%" height="15" fill="rgb(216,17,4)" fg:x="3448" fg:w="2"/><text x="99.9320%" y="1839.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="99.7109%" y="1813" width="0.0289%" height="15" fill="rgb(220,153,47)" fg:x="3449" fg:w="1"/><text x="99.9609%" y="1823.50"></text></g><g><title>redis::cmd::write_command (1 samples, 0.03%)</title><rect x="99.7398%" y="1925" width="0.0289%" height="15" fill="rgb(215,131,9)" fg:x="3450" fg:w="1"/><text x="99.9898%" y="1935.50"></text></g><g><title>redis::connection::Msg::from_value (1 samples, 0.03%)</title><rect x="99.7687%" y="1925" width="0.0289%" height="15" fill="rgb(233,46,42)" fg:x="3451" fg:w="1"/><text x="100.0187%" y="1935.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.03%)</title><rect x="99.7976%" y="1925" width="0.0289%" height="15" fill="rgb(226,86,7)" fg:x="3452" fg:w="1"/><text x="100.0476%" y="1935.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (1 samples, 0.03%)</title><rect x="99.7976%" y="1909" width="0.0289%" height="15" fill="rgb(239,226,21)" fg:x="3452" fg:w="1"/><text x="100.0476%" y="1919.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (1 samples, 0.03%)</title><rect x="99.7976%" y="1893" width="0.0289%" height="15" fill="rgb(244,137,22)" fg:x="3452" fg:w="1"/><text x="100.0476%" y="1903.50"></text></g><g><title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.03%)</title><rect x="99.7976%" y="1877" width="0.0289%" height="15" fill="rgb(211,139,35)" fg:x="3452" fg:w="1"/><text x="100.0476%" y="1887.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.03%)</title><rect x="99.7976%" y="1861" width="0.0289%" height="15" fill="rgb(214,62,50)" fg:x="3452" fg:w="1"/><text x="100.0476%" y="1871.50"></text></g><g><title>all (3,459 samples, 100%)</title><rect x="0.0000%" y="1957" width="100.0000%" height="15" fill="rgb(212,113,44)" fg:x="0" fg:w="3459"/><text x="0.2500%" y="1967.50"></text></g><g><title>exchange-matchi (3,459 samples, 100.00%)</title><rect x="0.0000%" y="1941" width="100.0000%" height="15" fill="rgb(226,150,43)" fg:x="0" fg:w="3459"/><text x="0.2500%" y="1951.50">exchange-matchi</text></g><g><title>serde_json::ser::format_escaped_str (6 samples, 0.17%)</title><rect x="99.8265%" y="1925" width="0.1735%" height="15" fill="rgb(250,71,37)" fg:x="3453" fg:w="6"/><text x="100.0765%" y="1935.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (1 samples, 0.03%)</title><rect x="99.9711%" y="1909" width="0.0289%" height="15" fill="rgb(219,76,19)" fg:x="3458" fg:w="1"/><text x="100.2211%" y="1919.50"></text></g><g><title>serde_json::ser::Formatter::write_string_fragment (1 samples, 0.03%)</title><rect x="99.9711%" y="1893" width="0.0289%" height="15" fill="rgb(250,39,11)" fg:x="3458" fg:w="1"/><text x="100.2211%" y="1903.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.03%)</title><rect x="99.9711%" y="1877" width="0.0289%" height="15" fill="rgb(230,64,31)" fg:x="3458" fg:w="1"/><text x="100.2211%" y="1887.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.03%)</title><rect x="99.9711%" y="1861" width="0.0289%" height="15" fill="rgb(208,222,23)" fg:x="3458" fg:w="1"/><text x="100.2211%" y="1871.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="99.9711%" y="1845" width="0.0289%" height="15" fill="rgb(227,125,18)" fg:x="3458" fg:w="1"/><text x="100.2211%" y="1855.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="99.9711%" y="1829" width="0.0289%" height="15" fill="rgb(234,210,9)" fg:x="3458" fg:w="1"/><text x="100.2211%" y="1839.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="99.9711%" y="1813" width="0.0289%" height="15" fill="rgb(217,127,24)" fg:x="3458" fg:w="1"/><text x="100.2211%" y="1823.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="99.9711%" y="1797" width="0.0289%" height="15" fill="rgb(239,141,48)" fg:x="3458" fg:w="1"/><text x="100.2211%" y="1807.50"></text></g></svg></svg>